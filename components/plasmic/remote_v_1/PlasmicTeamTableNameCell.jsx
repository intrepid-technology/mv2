// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: jLGxzXsssr
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../market_v_2/plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicTeamTableNameCell.module.css"; // plasmic-import: jLGxzXsssr/css

export const PlasmicTeamTableNameCell__VariantProps = new Array();

export const PlasmicTeamTableNameCell__ArgProps = new Array(
  "rowavatar",
  "rowemail",
  "rowname"
);

function PlasmicTeamTableNameCell__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <img
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(projectcss.all, projectcss.img, sty.img)}
        loading={"lazy"}
        src={args.rowavatar}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.rowname
        })}

        {p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.rowemail,
          className: classNames(sty.slotTargetRowemail)
        })}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "freeBox"],
  img: ["img"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTeamTableNameCell__ArgProps,
      internalVariantPropNames: PlasmicTeamTableNameCell__VariantProps
    });

    return PlasmicTeamTableNameCell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamTableNameCell";
  } else {
    func.displayName = `PlasmicTeamTableNameCell.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamTableNameCell = Object.assign(
  // Top-level PlasmicTeamTableNameCell renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicTeamTableNameCell
    internalVariantProps: PlasmicTeamTableNameCell__VariantProps,
    internalArgProps: PlasmicTeamTableNameCell__ArgProps
  }
);

export default PlasmicTeamTableNameCell;
/* prettier-ignore-end */
