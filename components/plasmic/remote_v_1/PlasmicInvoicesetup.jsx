// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: v30IpkNohS6
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextLinkArrow from "../../TextLinkArrow"; // plasmic-import: MlCPfXGkVN/component
import DisplayIconTextRight from "../../DisplayIconTextRight"; // plasmic-import: 2XsuG8W9wX/component
import IconPrimary from "../../IconPrimary"; // plasmic-import: -fEFICkFUf/component
import IconElementCircle from "../../IconElementCircle"; // plasmic-import: NwC_LltBnY/component
import CardFeatureHeadlineDescriptionPrimary from "../../CardFeatureHeadlineDescriptionPrimary"; // plasmic-import: qwkYbKgKSI/component
import ButtonLinkPrimary from "../../ButtonLinkPrimary"; // plasmic-import: d7dGAYuRCt/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "../market_v_2/PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../market_v_2/plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicInvoicesetup.module.css"; // plasmic-import: v30IpkNohS6/css
import Icon171Icon from "../market_v_2/icons/PlasmicIcon__Icon171"; // plasmic-import: RfkUw6C5x0/icon
import LogOutIcon from "../market_v_2/icons/PlasmicIcon__LogOut"; // plasmic-import: sApgZMZT6Y/icon
import FilePlusAdd2Icon from "./icons/PlasmicIcon__FilePlusAdd2"; // plasmic-import: BJSgGfSYi/icon
import FileInvoiceIcon from "../market_v_2/icons/PlasmicIcon__FileInvoice"; // plasmic-import: 5y-W1ac1tp/icon

export const PlasmicInvoicesetup__VariantProps = new Array();

export const PlasmicInvoicesetup__ArgProps = new Array();

function PlasmicInvoicesetup__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"switchLinkGroup"}
              data-plasmic-override={overrides.switchLinkGroup}
              className={classNames(projectcss.all, sty.switchLinkGroup)}
            >
              <TextLinkArrow
                data-plasmic-name={"textLinkArrow"}
                data-plasmic-override={overrides.textLinkArrow}
                className={classNames("__wab_instance", sty.textLinkArrow)}
                color={"dark"}
                direction={"left"}
                size={"_16"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dOoqc
                  )}
                >
                  {"Back to member profile"}
                </div>
              </TextLinkArrow>

              <DisplayIconTextRight
                data-plasmic-name={"displayIconTextRight"}
                data-plasmic-override={overrides.displayIconTextRight}
                className={classNames(
                  "__wab_instance",
                  sty.displayIconTextRight
                )}
                direction={"left"}
                elementIcon2={
                  <IconPrimary
                    data-plasmic-name={"iconPrimary"}
                    data-plasmic-override={overrides.iconPrimary}
                    className={classNames("__wab_instance", sty.iconPrimary)}
                    size={"_16Px"}
                    svgIcon={
                      <Icon171Icon
                        data-plasmic-name={"svgIcon12"}
                        data-plasmic-override={overrides.svgIcon12}
                        className={classNames(projectcss.all, sty.svgIcon12)}
                        role={"img"}
                      />
                    }
                    svgIcon16Px={
                      <LogOutIcon
                        data-plasmic-name={"svgIcon3"}
                        data-plasmic-override={overrides.svgIcon3}
                        className={classNames(projectcss.all, sty.svgIcon3)}
                        role={"img"}
                      />
                    }
                  />
                }
                size={"_16"}
                text16Px={"Log out"}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"headlineSubheadParent"}
              data-plasmic-override={overrides.headlineSubheadParent}
              hasGap={true}
              className={classNames(projectcss.all, sty.headlineSubheadParent)}
            >
              <div
                data-plasmic-name={"headline"}
                data-plasmic-override={overrides.headline}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.headline
                )}
              >
                {"Client invoice setup"}
              </div>

              <div
                data-plasmic-name={"subhead"}
                data-plasmic-override={overrides.subhead}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.subhead
                )}
              >
                {
                  "Create a new client to invoice, or invoice an existing client."
                }
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"buttonGroupParent"}
              data-plasmic-override={overrides.buttonGroupParent}
              hasGap={true}
              className={classNames(projectcss.all, sty.buttonGroupParent)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"buttonNavigationGroup"}
                data-plasmic-override={overrides.buttonNavigationGroup}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.buttonNavigationGroup
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"entityNav"}
                  data-plasmic-override={overrides.entityNav}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.entityNav)}
                >
                  <IconElementCircle
                    className={classNames(
                      "__wab_instance",
                      sty.iconElementCircle__q4YaT
                    )}
                    color={"brand"}
                    iconSlot={
                      <FilePlusAdd2Icon
                        className={classNames(projectcss.all, sty.svg___244L)}
                        role={"img"}
                      />
                    }
                  />

                  <CardFeatureHeadlineDescriptionPrimary
                    bodyTextSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bUMdz
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "iphone12ProMax")
                          ? "Find high quality freelancers and agencies from all around the world and compliantly hire them on demand."
                          : "Create a profile for a new client and save their information "}
                      </div>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.cardFeatureHeadlineDescriptionPrimary__ce9Rd
                    )}
                    headlineSlot={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "Find and hire freelancers & agencies"
                        : "New client"
                    }
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"individualNav"}
                  data-plasmic-override={overrides.individualNav}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.individualNav)}
                >
                  <IconElementCircle
                    className={classNames(
                      "__wab_instance",
                      sty.iconElementCircle__zQuYc
                    )}
                    color={"brand"}
                    iconSlot={
                      <FileInvoiceIcon
                        className={classNames(projectcss.all, sty.svg__ivgRo)}
                        role={"img"}
                      />
                    }
                  />

                  <CardFeatureHeadlineDescriptionPrimary
                    bodyTextSlot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tqVeJ
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "iphone12ProMax")
                          ? "Find high quality freelancers and agencies from all around the world and compliantly hire them on demand."
                          : "Invoice an existing client with their saved information."}
                      </div>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.cardFeatureHeadlineDescriptionPrimary__wmgup
                    )}
                    headlineSlot={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "Find and hire freelancers & agencies"
                        : "Existing client"
                    }
                  />
                </p.Stack>
              </p.Stack>

              <ButtonLinkPrimary
                data-plasmic-name={"formTrigger"}
                data-plasmic-override={overrides.formTrigger}
                className={classNames("__wab_instance", sty.formTrigger)}
                color={"dark"}
                height={"_48"}
                text={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xaJou
                    )}
                  >
                    {"Next"}
                  </div>
                }
                type={"fill"}
                width={"stretch"}
              />
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "switchLinkGroup",
    "textLinkArrow",
    "displayIconTextRight",
    "iconPrimary",
    "svgIcon12",
    "svgIcon3",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "buttonGroupParent",
    "buttonNavigationGroup",
    "entityNav",
    "individualNav",
    "formTrigger"
  ],

  freeBox: [
    "freeBox",
    "switchLinkGroup",
    "textLinkArrow",
    "displayIconTextRight",
    "iconPrimary",
    "svgIcon12",
    "svgIcon3",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "buttonGroupParent",
    "buttonNavigationGroup",
    "entityNav",
    "individualNav",
    "formTrigger"
  ],

  switchLinkGroup: [
    "switchLinkGroup",
    "textLinkArrow",
    "displayIconTextRight",
    "iconPrimary",
    "svgIcon12",
    "svgIcon3"
  ],

  textLinkArrow: ["textLinkArrow"],
  displayIconTextRight: [
    "displayIconTextRight",
    "iconPrimary",
    "svgIcon12",
    "svgIcon3"
  ],

  iconPrimary: ["iconPrimary", "svgIcon12", "svgIcon3"],
  svgIcon12: ["svgIcon12"],
  svgIcon3: ["svgIcon3"],
  headlineSubheadParent: ["headlineSubheadParent", "headline", "subhead"],
  headline: ["headline"],
  subhead: ["subhead"],
  buttonGroupParent: [
    "buttonGroupParent",
    "buttonNavigationGroup",
    "entityNav",
    "individualNav",
    "formTrigger"
  ],

  buttonNavigationGroup: [
    "buttonNavigationGroup",
    "entityNav",
    "individualNav"
  ],

  entityNav: ["entityNav"],
  individualNav: ["individualNav"],
  formTrigger: ["formTrigger"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInvoicesetup__ArgProps,
      internalVariantPropNames: PlasmicInvoicesetup__VariantProps
    });

    return PlasmicInvoicesetup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInvoicesetup";
  } else {
    func.displayName = `PlasmicInvoicesetup.${nodeName}`;
  }
  return func;
}

export const PlasmicInvoicesetup = Object.assign(
  // Top-level PlasmicInvoicesetup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    switchLinkGroup: makeNodeComponent("switchLinkGroup"),
    textLinkArrow: makeNodeComponent("textLinkArrow"),
    displayIconTextRight: makeNodeComponent("displayIconTextRight"),
    iconPrimary: makeNodeComponent("iconPrimary"),
    svgIcon12: makeNodeComponent("svgIcon12"),
    svgIcon3: makeNodeComponent("svgIcon3"),
    headlineSubheadParent: makeNodeComponent("headlineSubheadParent"),
    headline: makeNodeComponent("headline"),
    subhead: makeNodeComponent("subhead"),
    buttonGroupParent: makeNodeComponent("buttonGroupParent"),
    buttonNavigationGroup: makeNodeComponent("buttonNavigationGroup"),
    entityNav: makeNodeComponent("entityNav"),
    individualNav: makeNodeComponent("individualNav"),
    formTrigger: makeNodeComponent("formTrigger"),
    // Metadata about props expected for PlasmicInvoicesetup
    internalVariantProps: PlasmicInvoicesetup__VariantProps,
    internalArgProps: PlasmicInvoicesetup__ArgProps
  }
);

export default PlasmicInvoicesetup;
/* prettier-ignore-end */
