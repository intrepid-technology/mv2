// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: XH0SBtjCyV
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import IconElementCircle from "../../IconElementCircle"; // plasmic-import: NwC_LltBnY/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../market_v_2/plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicCardDashboardNavDisplay.module.css"; // plasmic-import: XH0SBtjCyV/css
import UserIcon from "../market_v_2/icons/PlasmicIcon__User"; // plasmic-import: eMAeU2OiF/icon

export const PlasmicCardDashboardNavDisplay__VariantProps = new Array();

export const PlasmicCardDashboardNavDisplay__ArgProps = new Array(
  "headline",
  "body",
  "children",
  "slot",
  "destination"
);

function PlasmicCardDashboardNavDisplay__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <IconElementCircle
            data-plasmic-name={"iconElementCircle"}
            data-plasmic-override={overrides.iconElementCircle}
            className={classNames("__wab_instance", sty.iconElementCircle)}
            iconSlot={p.renderPlasmicSlot({
              defaultContents: (
                <UserIcon
                  className={classNames(projectcss.all, sty.svg__jfFxO)}
                  role={"img"}
                />
              ),

              value: args.slot
            })}
          />

          {p.renderPlasmicSlot({
            defaultContents: "Hire a remote employee",
            value: args.headline,
            className: classNames(sty.slotTargetHeadline)
          })}

          {p.renderPlasmicSlot({
            defaultContents: "Hire and take care of your remote employees.",
            value: args.body,
            className: classNames(sty.slotTargetBody)
          })}
        </p.Stack>
      ) : null}

      <ButtonPrimary
        data-plasmic-name={"buttonPrimary"}
        data-plasmic-override={overrides.buttonPrimary}
        className={classNames("__wab_instance", sty.buttonPrimary)}
        destination={args.destination !== undefined ? args.destination : ""}
        width={"stretch"}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dWj85
              )}
            >
              {"Hire a new employee"}
            </div>
          ),

          value: args.children
        })}
      </ButtonPrimary>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "iconElementCircle", "buttonPrimary"],
  freeBox: ["freeBox", "iconElementCircle"],
  iconElementCircle: ["iconElementCircle"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardDashboardNavDisplay__ArgProps,
      internalVariantPropNames: PlasmicCardDashboardNavDisplay__VariantProps
    });

    return PlasmicCardDashboardNavDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardDashboardNavDisplay";
  } else {
    func.displayName = `PlasmicCardDashboardNavDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicCardDashboardNavDisplay = Object.assign(
  // Top-level PlasmicCardDashboardNavDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    iconElementCircle: makeNodeComponent("iconElementCircle"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicCardDashboardNavDisplay
    internalVariantProps: PlasmicCardDashboardNavDisplay__VariantProps,
    internalArgProps: PlasmicCardDashboardNavDisplay__ArgProps
  }
);

export default PlasmicCardDashboardNavDisplay;
/* prettier-ignore-end */
