// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 1683l8sxRf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../market_v_2/plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicTeamTableCellComponent.module.css"; // plasmic-import: 1683l8sxRf/css

export const PlasmicTeamTableCellComponent__VariantProps = new Array(
  "columnType"
);

export const PlasmicTeamTableCellComponent__ArgProps = new Array(
  "label",
  "row"
);

function PlasmicTeamTableCellComponent__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootcolumnType_avatar]: hasVariant(
          variants,
          "columnType",
          "avatar"
        ),

        [sty.rootcolumnType_compliance]: hasVariant(
          variants,
          "columnType",
          "compliance"
        ),

        [sty.rootcolumnType_status]: hasVariant(
          variants,
          "columnType",
          "status"
        )
      })}
    >
      {(
        hasVariant(variants, "columnType", "avatar")
          ? false
          : hasVariant(variants, "columnType", "compliance")
          ? false
          : hasVariant(variants, "columnType", "status")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__sTHp6, {
            [sty.freeBoxcolumnType_avatar__sTHp6V2X]: hasVariant(
              variants,
              "columnType",
              "avatar"
            ),

            [sty.freeBoxcolumnType_compliance__sTHp6Q5S92]: hasVariant(
              variants,
              "columnType",
              "compliance"
            ),

            [sty.freeBoxcolumnType_status__sTHp6Yjgwm]: hasVariant(
              variants,
              "columnType",
              "status"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.label
          })}
        </div>
      ) : null}
      {(
        hasVariant(variants, "columnType", "compliance")
          ? false
          : hasVariant(variants, "columnType", "status")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__u90NQ, {
            [sty.freeBoxcolumnType_compliance__u90NQq5S92]: hasVariant(
              variants,
              "columnType",
              "compliance"
            ),

            [sty.freeBoxcolumnType_status__u90NQyjgwm]: hasVariant(
              variants,
              "columnType",
              "status"
            )
          })}
        />
      ) : null}
      {(
        hasVariant(variants, "columnType", "compliance")
          ? true
          : hasVariant(variants, "columnType", "status")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__q0HlP, {
            [sty.freeBoxcolumnType_compliance__q0HlPq5S92]: hasVariant(
              variants,
              "columnType",
              "compliance"
            ),

            [sty.freeBoxcolumnType_status__q0HlPyjgwm]: hasVariant(
              variants,
              "columnType",
              "status"
            )
          })}
        />
      ) : null}
      {(hasVariant(variants, "columnType", "avatar") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__c1Y7Z, {
            [sty.freeBoxcolumnType_avatar__c1Y7ZV2X]: hasVariant(
              variants,
              "columnType",
              "avatar"
            ),

            [sty.freeBoxcolumnType_status__c1Y7ZYjgwm]: hasVariant(
              variants,
              "columnType",
              "status"
            )
          })}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTeamTableCellComponent__ArgProps,
      internalVariantPropNames: PlasmicTeamTableCellComponent__VariantProps
    });

    return PlasmicTeamTableCellComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamTableCellComponent";
  } else {
    func.displayName = `PlasmicTeamTableCellComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamTableCellComponent = Object.assign(
  // Top-level PlasmicTeamTableCellComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTeamTableCellComponent
    internalVariantProps: PlasmicTeamTableCellComponent__VariantProps,
    internalArgProps: PlasmicTeamTableCellComponent__ArgProps
  }
);

export default PlasmicTeamTableCellComponent;
/* prettier-ignore-end */
