// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: s78TXnL1de
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../market_v_2/plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicComplianceBadge.module.css"; // plasmic-import: s78TXnL1de/css

export const PlasmicComplianceBadge__VariantProps = new Array("label");

export const PlasmicComplianceBadge__ArgProps = new Array();

function PlasmicComplianceBadge__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootlabel_completed]: hasVariant(variants, "label", "completed"),
        [sty.rootlabel_pending]: hasVariant(variants, "label", "pending")
      })}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxlabel_completed]: hasVariant(
            variants,
            "label",
            "completed"
          )
        })}
      >
        {(
          hasVariant(variants, "label", "pending")
            ? true
            : hasVariant(variants, "label", "completed")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textlabel_completed]: hasVariant(
                  variants,
                  "label",
                  "completed"
                ),

                [sty.textlabel_pending]: hasVariant(
                  variants,
                  "label",
                  "pending"
                )
              }
            )}
          >
            {hasVariant(variants, "label", "pending")
              ? "Pending"
              : hasVariant(variants, "label", "completed")
              ? "Completed"
              : "Pending"}
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicComplianceBadge__ArgProps,
      internalVariantPropNames: PlasmicComplianceBadge__VariantProps
    });

    return PlasmicComplianceBadge__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComplianceBadge";
  } else {
    func.displayName = `PlasmicComplianceBadge.${nodeName}`;
  }
  return func;
}

export const PlasmicComplianceBadge = Object.assign(
  // Top-level PlasmicComplianceBadge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicComplianceBadge
    internalVariantProps: PlasmicComplianceBadge__VariantProps,
    internalArgProps: PlasmicComplianceBadge__ArgProps
  }
);

export default PlasmicComplianceBadge;
/* prettier-ignore-end */
