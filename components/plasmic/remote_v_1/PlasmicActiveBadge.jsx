// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 4ACUrMHmP5
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../market_v_2/plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicActiveBadge.module.css"; // plasmic-import: 4ACUrMHmP5/css

export const PlasmicActiveBadge__VariantProps = new Array("label");

export const PlasmicActiveBadge__ArgProps = new Array();

function PlasmicActiveBadge__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootlabel__true]: hasVariant(variants, "label", "_true")
      })}
    >
      {(
        hasVariant(variants, "label", "_false")
          ? true
          : hasVariant(variants, "label", "_true")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxlabel__false]: hasVariant(variants, "label", "_false"),
            [sty.freeBoxlabel__true]: hasVariant(variants, "label", "_true")
          })}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textlabel__false]: hasVariant(variants, "label", "_false"),
                [sty.textlabel__true]: hasVariant(variants, "label", "_true")
              }
            )}
          >
            {hasVariant(variants, "label", "_false")
              ? "Not Active"
              : hasVariant(variants, "label", "_true")
              ? "Active"
              : "Enter some text"}
          </div>
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActiveBadge__ArgProps,
      internalVariantPropNames: PlasmicActiveBadge__VariantProps
    });

    return PlasmicActiveBadge__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActiveBadge";
  } else {
    func.displayName = `PlasmicActiveBadge.${nodeName}`;
  }
  return func;
}

export const PlasmicActiveBadge = Object.assign(
  // Top-level PlasmicActiveBadge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicActiveBadge
    internalVariantProps: PlasmicActiveBadge__VariantProps,
    internalArgProps: PlasmicActiveBadge__ArgProps
  }
);

export default PlasmicActiveBadge;
/* prettier-ignore-end */
