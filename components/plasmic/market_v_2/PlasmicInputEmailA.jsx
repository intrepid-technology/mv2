// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Umu_QfvTrP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicInputEmailA.module.css"; // plasmic-import: Umu_QfvTrP/css

export const PlasmicInputEmailA__VariantProps = new Array("size");

export const PlasmicInputEmailA__ArgProps = new Array();

function PlasmicInputEmailA__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"inputEmailParent"}
        data-plasmic-override={overrides.inputEmailParent}
        hasGap={true}
        className={classNames(projectcss.all, sty.inputEmailParent, {
          [sty.inputEmailParent__size__360]: hasVariant(
            variants,
            "size",
            "_360"
          ),

          [sty.inputEmailParent__size__540]: hasVariant(
            variants,
            "size",
            "_540"
          ),

          [sty.inputEmailParent__size__720]: hasVariant(
            variants,
            "size",
            "_720"
          )
        })}
      >
        <input
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput ?? overrides.textbox}
          className={classNames(projectcss.input, sty.textInput, {
            [sty.textInput__size__360]: hasVariant(variants, "size", "_360"),
            [sty.textInput__size__540]: hasVariant(variants, "size", "_540"),
            [sty.textInput__size__720]: hasVariant(variants, "size", "_720")
          })}
          placeholder={"Enter your email address"}
          size={1}
          type={"text"}
          value={""}
        />

        <ButtonPrimary
          data-plasmic-name={"buttonPrimary"}
          data-plasmic-override={overrides.buttonPrimary}
          className={classNames("__wab_instance", sty.buttonPrimary, {
            [sty.buttonPrimary__size__360]: hasVariant(
              variants,
              "size",
              "_360"
            ),

            [sty.buttonPrimary__size__540]: hasVariant(
              variants,
              "size",
              "_540"
            ),

            [sty.buttonPrimary__size__720]: hasVariant(variants, "size", "_720")
          })}
          color={
            hasVariant(variants, "size", "_720")
              ? undefined
              : hasVariant(variants, "size", "_540")
              ? undefined
              : hasVariant(variants, "size", "_360")
              ? undefined
              : hasVariant(globalVariants, "screen", "desktop")
              ? "brand"
              : undefined
          }
          size={
            hasVariant(variants, "size", "_720")
              ? "_270"
              : hasVariant(variants, "size", "_540")
              ? "_180"
              : "_120"
          }
        >
          {hasVariant(globalVariants, "screen", "desktop")
            ? "Apply to join"
            : "Enter"}
        </ButtonPrimary>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "inputEmailParent", "textInput", "buttonPrimary"],
  inputEmailParent: ["inputEmailParent", "textInput", "buttonPrimary"],
  textInput: ["textInput"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputEmailA__ArgProps,
      internalVariantPropNames: PlasmicInputEmailA__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicInputEmailA__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputEmailA";
  } else {
    func.displayName = `PlasmicInputEmailA.${nodeName}`;
  }
  return func;
}

export const PlasmicInputEmailA = Object.assign(
  // Top-level PlasmicInputEmailA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    inputEmailParent: makeNodeComponent("inputEmailParent"),
    textInput: makeNodeComponent("textInput"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicInputEmailA
    internalVariantProps: PlasmicInputEmailA__VariantProps,
    internalArgProps: PlasmicInputEmailA__ArgProps
  }
);

export default PlasmicInputEmailA;
/* prettier-ignore-end */
