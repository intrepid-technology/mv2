// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: D0kbF0YbT67
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicElementProfileAttributes.module.css"; // plasmic-import: D0kbF0YbT67/css

export const PlasmicElementProfileAttributes__VariantProps = new Array();

export const PlasmicElementProfileAttributes__ArgProps = new Array();

function PlasmicElementProfileAttributes__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"profileIndustryParent"}
        data-plasmic-override={overrides.profileIndustryParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.profileIndustryParent
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__ksE53
          )}
        >
          <div
            data-plasmic-name={"industry"}
            data-plasmic-override={overrides.industry}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.industry
            )}
          >
            {"Industry"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"textParent6"}
          data-plasmic-override={overrides.textParent6}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.textParent6
          )}
        >
          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__vzQbI
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"Fashion"}
          </ChipBadgeDisplay>

          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__ff4WU
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"Travel"}
          </ChipBadgeDisplay>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"profileCategoriesParent"}
        data-plasmic-override={overrides.profileCategoriesParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.profileCategoriesParent
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__jDrCu
          )}
        >
          <div
            data-plasmic-name={"categories"}
            data-plasmic-override={overrides.categories}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.categories
            )}
          >
            {"Categories"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"categoryBadgeParent"}
          data-plasmic-override={overrides.categoryBadgeParent}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.categoryBadgeParent
          )}
        >
          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__rzCQy
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"Design"}
          </ChipBadgeDisplay>

          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__w45GS
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"Web development"}
          </ChipBadgeDisplay>

          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__aO53O
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"Product"}
          </ChipBadgeDisplay>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"profileSkillsParent"}
        data-plasmic-override={overrides.profileSkillsParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.profileSkillsParent
        )}
      >
        <div
          data-plasmic-name={"skillsTextparent"}
          data-plasmic-override={overrides.skillsTextparent}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.skillsTextparent
          )}
        >
          <div
            data-plasmic-name={"skills"}
            data-plasmic-override={overrides.skills}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.skills
            )}
          >
            {"Skills"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"skillsBadgeParent"}
          data-plasmic-override={overrides.skillsBadgeParent}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.skillsBadgeParent
          )}
        >
          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__z9Y7R
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"React"}
          </ChipBadgeDisplay>

          <ChipBadgeDisplay
            className={classNames("__wab_instance", sty.chipBadgeDisplay__bYE2)}
            color={"brand"}
            type={"ghost"}
          >
            {"Databases"}
          </ChipBadgeDisplay>

          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__eoky9
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"Node"}
          </ChipBadgeDisplay>

          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__x2Fau
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"Javascript"}
          </ChipBadgeDisplay>

          <ChipBadgeDisplay
            className={classNames(
              "__wab_instance",
              sty.chipBadgeDisplay__hRem2
            )}
            color={"brand"}
            type={"ghost"}
          >
            {"Figma"}
          </ChipBadgeDisplay>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "profileIndustryParent",
    "industry",
    "textParent6",
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent",
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent"
  ],

  profileIndustryParent: ["profileIndustryParent", "industry", "textParent6"],
  industry: ["industry"],
  textParent6: ["textParent6"],
  profileCategoriesParent: [
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent"
  ],

  categories: ["categories"],
  categoryBadgeParent: ["categoryBadgeParent"],
  profileSkillsParent: [
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent"
  ],

  skillsTextparent: ["skillsTextparent", "skills"],
  skills: ["skills"],
  skillsBadgeParent: ["skillsBadgeParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementProfileAttributes__ArgProps,
      internalVariantPropNames: PlasmicElementProfileAttributes__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicElementProfileAttributes__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementProfileAttributes";
  } else {
    func.displayName = `PlasmicElementProfileAttributes.${nodeName}`;
  }
  return func;
}

export const PlasmicElementProfileAttributes = Object.assign(
  // Top-level PlasmicElementProfileAttributes renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profileIndustryParent: makeNodeComponent("profileIndustryParent"),
    industry: makeNodeComponent("industry"),
    textParent6: makeNodeComponent("textParent6"),
    profileCategoriesParent: makeNodeComponent("profileCategoriesParent"),
    categories: makeNodeComponent("categories"),
    categoryBadgeParent: makeNodeComponent("categoryBadgeParent"),
    profileSkillsParent: makeNodeComponent("profileSkillsParent"),
    skillsTextparent: makeNodeComponent("skillsTextparent"),
    skills: makeNodeComponent("skills"),
    skillsBadgeParent: makeNodeComponent("skillsBadgeParent"),
    // Metadata about props expected for PlasmicElementProfileAttributes
    internalVariantProps: PlasmicElementProfileAttributes__VariantProps,
    internalArgProps: PlasmicElementProfileAttributes__ArgProps
  }
);

export default PlasmicElementProfileAttributes;
/* prettier-ignore-end */
