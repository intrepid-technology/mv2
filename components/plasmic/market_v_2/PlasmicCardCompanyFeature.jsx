// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: AOOy6Qouul
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextLocation from "../../TextLocation"; // plasmic-import: O1CbetC3Kf/component
import TagBadge from "../../TagBadge"; // plasmic-import: C8K8aavuz-/component
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: e_QdjWvrde/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardCompanyFeature.module.css"; // plasmic-import: AOOy6Qouul/css

export const PlasmicCardCompanyFeature__VariantProps = new Array();

export const PlasmicCardCompanyFeature__ArgProps = new Array(
  "children",
  "slot",
  "slot2",
  "slot3"
);

function PlasmicCardCompanyFeature__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__bnyId)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__ujhJo)}
              role={"img"}
            />
          ),

          value: args.slot3
        })}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__c4Vbs)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__tiR07)}>
          <div className={classNames(defaultcss.all, sty.freeBox__ip4Zv)}>
            {p.renderPlasmicSlot({
              defaultContents: "Company Name",
              value: args.children,
              className: classNames(sty.slotChildren)
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__aErxH)}>
          <div className={classNames(defaultcss.all, sty.freeBox__ekYil)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <TextLocation
                  className={classNames(
                    "__wab_instance",
                    sty.textLocation__cNjJw
                  )}
                />
              ),

              value: args.slot,
              className: classNames(sty.slotSlot)
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__nw1AZ)}>
          <div className={classNames(defaultcss.all, sty.freeBox__ud2Ok)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "Company Description - the tagline that describes them",
              value: args.slot2,
              className: classNames(sty.slotSlot2)
            })}
          </div>
        </div>

        <TagBadge
          data-plasmic-name={"tagBadge"}
          data-plasmic-override={overrides.tagBadge}
          className={classNames("__wab_instance", sty.tagBadge)}
        />

        <RatingDisplayDetail
          data-plasmic-name={"ratingDisplayDetail"}
          data-plasmic-override={overrides.ratingDisplayDetail}
          className={classNames("__wab_instance", sty.ratingDisplayDetail)}
          color={"primaryB"}
        />
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "tagBadge", "ratingDisplayDetail"],
  tagBadge: ["tagBadge"],
  ratingDisplayDetail: ["ratingDisplayDetail"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardCompanyFeature__ArgProps,
      internalVariantPropNames: PlasmicCardCompanyFeature__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCardCompanyFeature__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardCompanyFeature";
  } else {
    func.displayName = `PlasmicCardCompanyFeature.${nodeName}`;
  }
  return func;
}

export const PlasmicCardCompanyFeature = Object.assign(
  // Top-level PlasmicCardCompanyFeature renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tagBadge: makeNodeComponent("tagBadge"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),
    // Metadata about props expected for PlasmicCardCompanyFeature
    internalVariantProps: PlasmicCardCompanyFeature__VariantProps,
    internalArgProps: PlasmicCardCompanyFeature__ArgProps
  }
);

export default PlasmicCardCompanyFeature;
/* prettier-ignore-end */
