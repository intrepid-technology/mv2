// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: GUJw1Rdg6k
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeroWelcomeCta from "../../HeroWelcomeCta"; // plasmic-import: zcIXnSYZXs/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSectionHero.module.css"; // plasmic-import: GUJw1Rdg6k/css

export const PlasmicSectionHero__VariantProps = new Array("persona");

export const PlasmicSectionHero__ArgProps = new Array();

function PlasmicSectionHero__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__persona_member]: hasVariant(variants, "persona", "member"),
        [sty.root__persona_partner]: hasVariant(variants, "persona", "partner")
      })}
    >
      <div
        data-plasmic-name={"heroTextImageDiv"}
        data-plasmic-override={overrides.heroTextImageDiv}
        className={classNames(defaultcss.all, sty.heroTextImageDiv, {
          [sty.heroTextImageDiv__persona_member]: hasVariant(
            variants,
            "persona",
            "member"
          ),

          [sty.heroTextImageDiv__persona_partner]: hasVariant(
            variants,
            "persona",
            "partner"
          )
        })}
      >
        <HeroWelcomeCta
          data-plasmic-name={"heroWelcomeCta"}
          data-plasmic-override={overrides.heroWelcomeCta}
          className={classNames("__wab_instance", sty.heroWelcomeCta, {
            [sty.heroWelcomeCta__persona_member]: hasVariant(
              variants,
              "persona",
              "member"
            ),

            [sty.heroWelcomeCta__persona_partner]: hasVariant(
              variants,
              "persona",
              "partner"
            )
          })}
          cta={
            hasVariant(variants, "persona", "partner")
              ? undefined
              : hasVariant(variants, "persona", "member")
              ? undefined
              : hasVariant(globalVariants, "screen", "desktopPrimary")
              ? undefined
              : undefined
          }
          persona={
            hasVariant(variants, "persona", "partner")
              ? "partner"
              : hasVariant(variants, "persona", "member") &&
                hasVariant(globalVariants, "screen", "desktopPrimary")
              ? "member"
              : hasVariant(variants, "persona", "member")
              ? "member"
              : hasVariant(globalVariants, "screen", "desktopPrimary")
              ? "partner"
              : "partner"
          }
          size={
            hasVariant(variants, "persona", "partner") &&
            hasVariant(globalVariants, "screen", "mobileAPrimary")
              ? "_270"
              : hasVariant(variants, "persona", "partner")
              ? "_720"
              : hasVariant(variants, "persona", "member") &&
                hasVariant(globalVariants, "screen", "mobileAPrimary")
              ? "_360"
              : hasVariant(variants, "persona", "member") &&
                hasVariant(globalVariants, "screen", "desktopPrimary")
              ? "_720"
              : hasVariant(variants, "persona", "member")
              ? "_720"
              : hasVariant(globalVariants, "screen", "mobileAPrimary")
              ? "_360"
              : "_720"
          }
        >
          {hasVariant(variants, "persona", "partner")
            ? "Reach a global audience selling your unique professional design and technology services to entrepreneurs and startups around the world"
            : hasVariant(variants, "persona", "member")
            ? "Find all the technology products and services you need to startup, launch, and grow your business."
            : hasVariant(globalVariants, "screen", "mobileAPrimary")
            ? "Reach a global audience selling your unique design and technology services to entrepreneurs and startups around the world"
            : hasVariant(globalVariants, "screen", "desktopPrimary")
            ? "Find creative agencies helping entrepreneurs and startups succeed with product development, technology, and growth."
            : "The marketplace-community for international design and development agencies to sell professional design and technology services globally."}
        </HeroWelcomeCta>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "heroTextImageDiv", "heroWelcomeCta"],
  heroTextImageDiv: ["heroTextImageDiv", "heroWelcomeCta"],
  heroWelcomeCta: ["heroWelcomeCta"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionHero__ArgProps,
      internalVariantPropNames: PlasmicSectionHero__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSectionHero__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionHero";
  } else {
    func.displayName = `PlasmicSectionHero.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionHero = Object.assign(
  // Top-level PlasmicSectionHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroTextImageDiv: makeNodeComponent("heroTextImageDiv"),
    heroWelcomeCta: makeNodeComponent("heroWelcomeCta"),
    // Metadata about props expected for PlasmicSectionHero
    internalVariantProps: PlasmicSectionHero__VariantProps,
    internalArgProps: PlasmicSectionHero__ArgProps
  }
);

export default PlasmicSectionHero;
/* prettier-ignore-end */
