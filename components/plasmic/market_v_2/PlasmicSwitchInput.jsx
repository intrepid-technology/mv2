// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: q4oa9NmA8gP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSwitchInput.module.css"; // plasmic-import: q4oa9NmA8gP/css

export const PlasmicSwitchInput__VariantProps = new Array("on", "disabled");

export const PlasmicSwitchInput__ArgProps = new Array("content", "name");

function PlasmicSwitchInput__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__disabled]: hasVariant(variants, "disabled", "disabled"),
          [sty.root__disabled_on]:
            hasVariant(variants, "disabled", "disabled") &&
            hasVariant(variants, "on", "on"),
          [sty.root__on]: hasVariant(variants, "on", "on")
        }
      )}
    >
      <div
        data-plasmic-name={"contentWrapper"}
        data-plasmic-override={overrides.contentWrapper}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.contentWrapper
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.content
        })}
      </div>

      <div
        data-plasmic-name={"background"}
        data-plasmic-override={overrides.background}
        className={classNames(defaultcss.all, projectcss.all, sty.background, {
          [sty.background__disabled]: hasVariant(
            variants,
            "disabled",
            "disabled"
          ),

          [sty.background__on]: hasVariant(variants, "on", "on"),
          [sty.background__on_disabled]:
            hasVariant(variants, "on", "on") &&
            hasVariant(variants, "disabled", "disabled")
        })}
      >
        <div
          data-plasmic-name={"circle"}
          data-plasmic-override={overrides.circle}
          className={classNames(defaultcss.all, projectcss.all, sty.circle, {
            [sty.circle__disabled]: hasVariant(
              variants,
              "disabled",
              "disabled"
            ),

            [sty.circle__disabled_on]:
              hasVariant(variants, "disabled", "disabled") &&
              hasVariant(variants, "on", "on"),
            [sty.circle__on]: hasVariant(variants, "on", "on")
          })}
        />
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "contentWrapper", "background", "circle"],
  contentWrapper: ["contentWrapper"],
  background: ["background", "circle"],
  circle: ["circle"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSwitchInput__ArgProps,
      internalVariantPropNames: PlasmicSwitchInput__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSwitchInput__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSwitchInput";
  } else {
    func.displayName = `PlasmicSwitchInput.${nodeName}`;
  }
  return func;
}

export const PlasmicSwitchInput = Object.assign(
  // Top-level PlasmicSwitchInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentWrapper: makeNodeComponent("contentWrapper"),
    background: makeNodeComponent("background"),
    circle: makeNodeComponent("circle"),
    // Metadata about props expected for PlasmicSwitchInput
    internalVariantProps: PlasmicSwitchInput__VariantProps,
    internalArgProps: PlasmicSwitchInput__ArgProps
  }
);

export default PlasmicSwitchInput;
/* prettier-ignore-end */
