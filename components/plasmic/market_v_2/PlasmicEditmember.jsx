// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: QfGXBtwgwt
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import FormContext from "../../FormContext"; // plasmic-import: fzhRfAQRK6/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import FormTextInput from "../../FormTextInput"; // plasmic-import: egzqjpKDP_e/component
import ButtonGroupStripeVerification from "../../ButtonGroupStripeVerification"; // plasmic-import: 2wDe-7IRwt/component
import Button from "../../Button"; // plasmic-import: ftJnovScMuV/component
import FormTextAreaInput from "../../FormTextAreaInput"; // plasmic-import: rDSDf80NUiR/component
import FormSelectInput from "../../FormSelectInput"; // plasmic-import: VSW4TWeqMx/component
import FormMultiSelectInput from "../../FormMultiSelectInput"; // plasmic-import: eTIpxqMjYo/component
import SocialPlatformsSwitchInputs from "../../SocialPlatformsSwitchInputs"; // plasmic-import: KT8HFDqoR9t/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicEditmember.module.css"; // plasmic-import: QfGXBtwgwt/css

export const PlasmicEditmember__VariantProps = new Array();

export const PlasmicEditmember__ArgProps = new Array();

function PlasmicEditmember__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfile"}
            data-plasmic-override={overrides.sectionMemberEditProfile}
            hasGap={true}
            className={classNames(projectcss.all, sty.sectionMemberEditProfile)}
            id={"profile"}
          >
            {false ? (
              <CardHeaderTitleDisplay
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitleDisplay__acBi5
                )}
                size={"_720"}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___04ReL
                    )}
                  >
                    {"Edit profile"}
                  </div>
                }
                textDisplay={"Member"}
                textSubhead={
                  "Set your creator profile and make a great first impression"
                }
              />
            ) : null}

            <FormContext
              data-plasmic-name={"memberProfileForm"}
              data-plasmic-override={overrides.memberProfileForm}
              className={classNames("__wab_instance", sty.memberProfileForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formMemberEditProfile"}
                data-plasmic-override={overrides.formMemberEditProfile}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.formMemberEditProfile
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberPersonalVerification"}
                  data-plasmic-override={
                    overrides.cardMemberPersonalVerification
                  }
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.cardMemberPersonalVerification
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__gEtHe
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hxjHi
                        )}
                      >
                        {"Please enter your full name."}
                      </div>
                    }
                  >
                    {"Personal name"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"memberPersonalNameGroup"}
                    data-plasmic-override={overrides.memberPersonalNameGroup}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.memberPersonalNameGroup
                    )}
                  >
                    <FormTextInput
                      data-plasmic-name={"firstNameInput"}
                      data-plasmic-override={overrides.firstNameInput}
                      className={classNames(
                        "__wab_instance",
                        sty.firstNameInput
                      )}
                      label={"First Name"}
                      name={"firstName"}
                      showLabel={"showLabel"}
                      type={"secondary"}
                    />

                    <FormTextInput
                      data-plasmic-name={"lastNameInput"}
                      data-plasmic-override={overrides.lastNameInput}
                      className={classNames(
                        "__wab_instance",
                        sty.lastNameInput
                      )}
                      label={"Last Name"}
                      name={"lastName"}
                      showLabel={"showLabel"}
                      type={"secondary"}
                    />
                  </p.Stack>

                  <ButtonGroupStripeVerification
                    data-plasmic-name={"buttonGroupStripeVerification"}
                    data-plasmic-override={
                      overrides.buttonGroupStripeVerification
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.buttonGroupStripeVerification
                    )}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberImage"}
                  data-plasmic-override={overrides.cardMemberImage}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberImage)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__ezi8
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h4Mp0
                        )}
                      >
                        {
                          "Click on the avatar to upload a custom image from your files."
                        }
                      </div>
                    }
                  >
                    {"Image"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"memberUploadLogoButtonGroup"}
                    data-plasmic-override={
                      overrides.memberUploadLogoButtonGroup
                    }
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.memberUploadLogoButtonGroup
                    )}
                  >
                    <div
                      data-plasmic-name={"imageWrapper"}
                      data-plasmic-override={overrides.imageWrapper}
                      className={classNames(projectcss.all, sty.imageWrapper)}
                    >
                      <img
                        data-plasmic-name={"userImage"}
                        data-plasmic-override={overrides.userImage}
                        alt={""}
                        className={classNames(projectcss.img, sty.userImage)}
                        src={"/plasmic/market_v_2/images/image4.png"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"memberEditlogoGroup"}
                      data-plasmic-override={overrides.memberEditlogoGroup}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.memberEditlogoGroup
                      )}
                    >
                      <Button
                        data-plasmic-name={"editUserImageButton"}
                        data-plasmic-override={overrides.editUserImageButton}
                        className={classNames(
                          "__wab_instance",
                          sty.editUserImageButton
                        )}
                        preventDefault={"true"}
                        type={"outline"}
                      >
                        {"Edit"}
                      </Button>

                      <Button
                        data-plasmic-name={"deleteUserImageButton"}
                        data-plasmic-override={overrides.deleteUserImageButton}
                        className={classNames(
                          "__wab_instance",
                          sty.deleteUserImageButton
                        )}
                        preventDefault={"true"}
                        type={"secondary"}
                      >
                        {"Delete"}
                      </Button>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberUsername"}
                  data-plasmic-override={overrides.cardMemberUsername}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberUsername)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__anzId
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wxY25
                        )}
                      >
                        {"This is your username within the Intrepid community"}
                      </div>
                    }
                  >
                    {"Username display"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"displayNameInput"}
                    data-plasmic-override={overrides.displayNameInput}
                    adornment={["start"]}
                    className={classNames(
                      "__wab_instance",
                      sty.displayNameInput
                    )}
                    name={"displayName"}
                    startAdornment={"@"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberUrl"}
                  data-plasmic-override={overrides.cardMemberUrl}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberUrl)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary___71L8V
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pNwo
                        )}
                      >
                        {
                          "This is your copany's URL namespace within the Intrepid community"
                        }
                      </div>
                    }
                  >
                    {"Url namespace"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"companyUrlTextInput"}
                    data-plasmic-override={overrides.companyUrlTextInput}
                    adornment={["start"]}
                    className={classNames(
                      "__wab_instance",
                      sty.companyUrlTextInput
                    )}
                    name={"company.url"}
                    startAdornment={"intrepid/technology/"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberTagline"}
                  data-plasmic-override={overrides.cardMemberTagline}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberTagline)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__jfQor
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xxxU
                        )}
                      >
                        {"Short description of your company or team"}
                      </div>
                    }
                  >
                    {"Tagline"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"companyTagInput"}
                    data-plasmic-override={overrides.companyTagInput}
                    className={classNames(
                      "__wab_instance",
                      sty.companyTagInput
                    )}
                    name={"company.tagline"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberDescription"}
                  data-plasmic-override={overrides.cardMemberDescription}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.cardMemberDescription
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__oB2Kh
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qsVv3
                        )}
                      >
                        {"Please describe yourself and your interests. "}
                      </div>
                    }
                  >
                    {"Description"}
                  </CardHeaderTitlePrimary>

                  <FormTextAreaInput
                    data-plasmic-name={"descriptionInput"}
                    data-plasmic-override={overrides.descriptionInput}
                    className={classNames(
                      "__wab_instance",
                      sty.descriptionInput
                    )}
                    name={"description"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardVideoIntroUrl"}
                  data-plasmic-override={overrides.cardVideoIntroUrl}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardVideoIntroUrl)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__hRoA
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zWe26
                        )}
                      >
                        {
                          "Don't worry — this is optional and it's okay to launch without a video."
                        }
                      </div>
                    }
                  >
                    {"Video introduction"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"introVideoUrlInput"}
                    data-plasmic-override={overrides.introVideoUrlInput}
                    adornment={["start"]}
                    className={classNames(
                      "__wab_instance",
                      sty.introVideoUrlInput
                    )}
                    name={"introVideoUrl"}
                    startAdornment={"https//"}
                    type={"secondary"}
                  />
                </p.Stack>

                <Button
                  data-plasmic-name={"submitProfileButton"}
                  data-plasmic-override={overrides.submitProfileButton}
                  className={classNames(
                    "__wab_instance",
                    sty.submitProfileButton
                  )}
                >
                  {"Save Profile"}
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfileDetails"}
            data-plasmic-override={overrides.sectionMemberEditProfileDetails}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.sectionMemberEditProfileDetails
            )}
            id={"profile-details"}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__pGCvu
              )}
              headings={["title"]}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zGsIr
                  )}
                >
                  {"Details"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your creator details for better visibility and matching in the community"
              }
            />

            <FormContext
              data-plasmic-name={"memberDetailsForm"}
              data-plasmic-override={overrides.memberDetailsForm}
              className={classNames("__wab_instance", sty.memberDetailsForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formMemberEditDetails"}
                data-plasmic-override={overrides.formMemberEditDetails}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.formMemberEditDetails
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberLocation"}
                  data-plasmic-override={overrides.cardMemberLocation}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberLocation)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__fhFuB
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oQfam
                        )}
                      >
                        {
                          "Please enter the Country and City of your legal residence"
                        }
                      </div>
                    }
                  >
                    {"Location"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"memberLocationGroup"}
                    data-plasmic-override={overrides.memberLocationGroup}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.memberLocationGroup
                    )}
                  >
                    <FormSelectInput
                      data-plasmic-name={"countrySelectInput"}
                      data-plasmic-override={overrides.countrySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.countrySelectInput
                      )}
                      label={"Country"}
                      name={"location.country"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"citySelectInput"}
                      data-plasmic-override={overrides.citySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.citySelectInput
                      )}
                      label={"City"}
                      name={"location.city"}
                    />
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberIndustry"}
                  data-plasmic-override={overrides.cardMemberIndustry}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberIndustry)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__lrlkZ
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kQo
                        )}
                      >
                        {
                          "Please enter the industry you work in and your role in your company."
                        }
                      </div>
                    }
                  >
                    {"Industry & job"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"memberIndustryGroup"}
                    data-plasmic-override={overrides.memberIndustryGroup}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.memberIndustryGroup
                    )}
                  >
                    <FormSelectInput
                      data-plasmic-name={"industrySelectInput"}
                      data-plasmic-override={overrides.industrySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.industrySelectInput
                      )}
                      label={"Industry"}
                      name={"industry"}
                    />

                    <FormTextInput
                      data-plasmic-name={"jobTitleInput"}
                      data-plasmic-override={overrides.jobTitleInput}
                      className={classNames(
                        "__wab_instance",
                        sty.jobTitleInput
                      )}
                      label={"Job Title"}
                      name={"jobTitle"}
                      showLabel={"showLabel"}
                      type={"secondary"}
                    />
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberLanguages"}
                  data-plasmic-override={overrides.cardMemberLanguages}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.cardMemberLanguages
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary___8QCqw
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ikYyc
                        )}
                      >
                        {"Enter the languages you speak"}
                      </div>
                    }
                  >
                    {"Languages"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"inputGroupMemberLanguages"}
                    data-plasmic-override={overrides.inputGroupMemberLanguages}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.inputGroupMemberLanguages
                    )}
                  >
                    <FormSelectInput
                      data-plasmic-name={"primaryLanguageSelectInput"}
                      data-plasmic-override={
                        overrides.primaryLanguageSelectInput
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.primaryLanguageSelectInput
                      )}
                      label={"Primary"}
                      name={"language.primary"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"secondaryLanguageSelectInput"}
                      data-plasmic-override={
                        overrides.secondaryLanguageSelectInput
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.secondaryLanguageSelectInput
                      )}
                      label={"Secondary"}
                      name={"language.secondary"}
                    />
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberInterests"}
                  data-plasmic-override={overrides.cardMemberInterests}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.cardMemberInterests
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__bl1O0
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mAude
                        )}
                      >
                        {
                          "Search and enter the products/services you are interested in, separated by commas"
                        }
                      </div>
                    }
                  >
                    {"Interests"}
                  </CardHeaderTitlePrimary>

                  <FormMultiSelectInput
                    data-plasmic-name={"interestsMultiSelectInput"}
                    data-plasmic-override={overrides.interestsMultiSelectInput}
                    className={classNames(
                      "__wab_instance",
                      sty.interestsMultiSelectInput
                    )}
                    name={"interests"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberSkills"}
                  data-plasmic-override={overrides.cardMemberSkills}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberSkills)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__i0Au
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4WyB
                        )}
                      >
                        {
                          "Search and enter your skills and strengths, separated by commas"
                        }
                      </div>
                    }
                  >
                    {"Skills"}
                  </CardHeaderTitlePrimary>

                  <FormMultiSelectInput
                    data-plasmic-name={"skillsMultiSelectInput"}
                    data-plasmic-override={overrides.skillsMultiSelectInput}
                    className={classNames(
                      "__wab_instance",
                      sty.skillsMultiSelectInput
                    )}
                    name={"skills"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberCommunity"}
                  data-plasmic-override={overrides.cardMemberCommunity}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.cardMemberCommunity
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__sy9Hg
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kfwe
                        )}
                      >
                        {
                          "Search and enter your industry or most relevant community"
                        }
                      </div>
                    }
                  >
                    {"Community"}
                  </CardHeaderTitlePrimary>

                  <FormMultiSelectInput
                    data-plasmic-name={"communityMultiSelectInput"}
                    data-plasmic-override={overrides.communityMultiSelectInput}
                    className={classNames(
                      "__wab_instance",
                      sty.communityMultiSelectInput
                    )}
                    name={"community"}
                  />
                </p.Stack>

                <Button
                  data-plasmic-name={"submitDetailsButton"}
                  data-plasmic-override={overrides.submitDetailsButton}
                  className={classNames(
                    "__wab_instance",
                    sty.submitDetailsButton
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xh7Ny
                    )}
                  >
                    {"Save Details"}
                  </div>
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfileSocial"}
            data-plasmic-override={overrides.sectionMemberEditProfileSocial}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.sectionMemberEditProfileSocial
            )}
            id={"profile-social"}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__da5Bv
              )}
              headings={["title"]}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zgvp4
                  )}
                >
                  {"Web and social"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Securely verify your accounts and display links on your page. We’ll never post on your behalf."
              }
            />

            <FormContext
              data-plasmic-name={"memberSocialForm"}
              data-plasmic-override={overrides.memberSocialForm}
              className={classNames("__wab_instance", sty.memberSocialForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formMemberEditSocial"}
                data-plasmic-override={overrides.formMemberEditSocial}
                hasGap={true}
                className={classNames(projectcss.all, sty.formMemberEditSocial)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberWebsite"}
                  data-plasmic-override={overrides.cardMemberWebsite}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberWebsite)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__v0B32
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zfHw
                        )}
                      >
                        {"Enter your company's website address"}
                      </div>
                    }
                  >
                    {"Website"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"formTextInput"}
                    data-plasmic-override={overrides.formTextInput}
                    adornment={["start"]}
                    className={classNames("__wab_instance", sty.formTextInput)}
                    name={"website"}
                    startAdornment={"https://"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardMemberSocial"}
                  data-plasmic-override={overrides.cardMemberSocial}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardMemberSocial)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__tYhVt
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__osn8L
                        )}
                      >
                        {
                          "Increase trust and visibility by connecting the social profiles you want to include on your profile"
                        }
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rUb4
                      )}
                    >
                      {"Social"}
                    </div>
                  </CardHeaderTitlePrimary>

                  <SocialPlatformsSwitchInputs
                    data-plasmic-name={"socialPlatformsSwitchInputs"}
                    data-plasmic-override={
                      overrides.socialPlatformsSwitchInputs
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.socialPlatformsSwitchInputs
                    )}
                  />
                </p.Stack>

                <Button
                  data-plasmic-name={"submitSocialButton"}
                  data-plasmic-override={overrides.submitSocialButton}
                  className={classNames(
                    "__wab_instance",
                    sty.submitSocialButton
                  )}
                >
                  {"Save Socials"}
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionMemberEditProfile",
    "memberProfileForm",
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstNameInput",
    "lastNameInput",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "imageWrapper",
    "userImage",
    "memberEditlogoGroup",
    "editUserImageButton",
    "deleteUserImageButton",
    "cardMemberUsername",
    "displayNameInput",
    "cardMemberUrl",
    "companyUrlTextInput",
    "cardMemberTagline",
    "companyTagInput",
    "cardMemberDescription",
    "descriptionInput",
    "cardVideoIntroUrl",
    "introVideoUrlInput",
    "submitProfileButton",
    "sectionMemberEditProfileDetails",
    "memberDetailsForm",
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "countrySelectInput",
    "citySelectInput",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industrySelectInput",
    "jobTitleInput",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput",
    "cardMemberInterests",
    "interestsMultiSelectInput",
    "cardMemberSkills",
    "skillsMultiSelectInput",
    "cardMemberCommunity",
    "communityMultiSelectInput",
    "submitDetailsButton",
    "sectionMemberEditProfileSocial",
    "memberSocialForm",
    "formMemberEditSocial",
    "cardMemberWebsite",
    "formTextInput",
    "cardMemberSocial",
    "socialPlatformsSwitchInputs",
    "submitSocialButton"
  ],

  sectionMemberEditProfile: [
    "sectionMemberEditProfile",
    "memberProfileForm",
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstNameInput",
    "lastNameInput",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "imageWrapper",
    "userImage",
    "memberEditlogoGroup",
    "editUserImageButton",
    "deleteUserImageButton",
    "cardMemberUsername",
    "displayNameInput",
    "cardMemberUrl",
    "companyUrlTextInput",
    "cardMemberTagline",
    "companyTagInput",
    "cardMemberDescription",
    "descriptionInput",
    "cardVideoIntroUrl",
    "introVideoUrlInput",
    "submitProfileButton"
  ],

  memberProfileForm: [
    "memberProfileForm",
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstNameInput",
    "lastNameInput",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "imageWrapper",
    "userImage",
    "memberEditlogoGroup",
    "editUserImageButton",
    "deleteUserImageButton",
    "cardMemberUsername",
    "displayNameInput",
    "cardMemberUrl",
    "companyUrlTextInput",
    "cardMemberTagline",
    "companyTagInput",
    "cardMemberDescription",
    "descriptionInput",
    "cardVideoIntroUrl",
    "introVideoUrlInput",
    "submitProfileButton"
  ],

  formMemberEditProfile: [
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstNameInput",
    "lastNameInput",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "imageWrapper",
    "userImage",
    "memberEditlogoGroup",
    "editUserImageButton",
    "deleteUserImageButton",
    "cardMemberUsername",
    "displayNameInput",
    "cardMemberUrl",
    "companyUrlTextInput",
    "cardMemberTagline",
    "companyTagInput",
    "cardMemberDescription",
    "descriptionInput",
    "cardVideoIntroUrl",
    "introVideoUrlInput",
    "submitProfileButton"
  ],

  cardMemberPersonalVerification: [
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstNameInput",
    "lastNameInput",
    "buttonGroupStripeVerification"
  ],

  memberPersonalNameGroup: [
    "memberPersonalNameGroup",
    "firstNameInput",
    "lastNameInput"
  ],

  firstNameInput: ["firstNameInput"],
  lastNameInput: ["lastNameInput"],
  buttonGroupStripeVerification: ["buttonGroupStripeVerification"],
  cardMemberImage: [
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "imageWrapper",
    "userImage",
    "memberEditlogoGroup",
    "editUserImageButton",
    "deleteUserImageButton"
  ],

  memberUploadLogoButtonGroup: [
    "memberUploadLogoButtonGroup",
    "imageWrapper",
    "userImage",
    "memberEditlogoGroup",
    "editUserImageButton",
    "deleteUserImageButton"
  ],

  imageWrapper: ["imageWrapper", "userImage"],
  userImage: ["userImage"],
  memberEditlogoGroup: [
    "memberEditlogoGroup",
    "editUserImageButton",
    "deleteUserImageButton"
  ],

  editUserImageButton: ["editUserImageButton"],
  deleteUserImageButton: ["deleteUserImageButton"],
  cardMemberUsername: ["cardMemberUsername", "displayNameInput"],
  displayNameInput: ["displayNameInput"],
  cardMemberUrl: ["cardMemberUrl", "companyUrlTextInput"],
  companyUrlTextInput: ["companyUrlTextInput"],
  cardMemberTagline: ["cardMemberTagline", "companyTagInput"],
  companyTagInput: ["companyTagInput"],
  cardMemberDescription: ["cardMemberDescription", "descriptionInput"],
  descriptionInput: ["descriptionInput"],
  cardVideoIntroUrl: ["cardVideoIntroUrl", "introVideoUrlInput"],
  introVideoUrlInput: ["introVideoUrlInput"],
  submitProfileButton: ["submitProfileButton"],
  sectionMemberEditProfileDetails: [
    "sectionMemberEditProfileDetails",
    "memberDetailsForm",
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "countrySelectInput",
    "citySelectInput",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industrySelectInput",
    "jobTitleInput",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput",
    "cardMemberInterests",
    "interestsMultiSelectInput",
    "cardMemberSkills",
    "skillsMultiSelectInput",
    "cardMemberCommunity",
    "communityMultiSelectInput",
    "submitDetailsButton"
  ],

  memberDetailsForm: [
    "memberDetailsForm",
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "countrySelectInput",
    "citySelectInput",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industrySelectInput",
    "jobTitleInput",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput",
    "cardMemberInterests",
    "interestsMultiSelectInput",
    "cardMemberSkills",
    "skillsMultiSelectInput",
    "cardMemberCommunity",
    "communityMultiSelectInput",
    "submitDetailsButton"
  ],

  formMemberEditDetails: [
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "countrySelectInput",
    "citySelectInput",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industrySelectInput",
    "jobTitleInput",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput",
    "cardMemberInterests",
    "interestsMultiSelectInput",
    "cardMemberSkills",
    "skillsMultiSelectInput",
    "cardMemberCommunity",
    "communityMultiSelectInput",
    "submitDetailsButton"
  ],

  cardMemberLocation: [
    "cardMemberLocation",
    "memberLocationGroup",
    "countrySelectInput",
    "citySelectInput"
  ],

  memberLocationGroup: [
    "memberLocationGroup",
    "countrySelectInput",
    "citySelectInput"
  ],

  countrySelectInput: ["countrySelectInput"],
  citySelectInput: ["citySelectInput"],
  cardMemberIndustry: [
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industrySelectInput",
    "jobTitleInput"
  ],

  memberIndustryGroup: [
    "memberIndustryGroup",
    "industrySelectInput",
    "jobTitleInput"
  ],

  industrySelectInput: ["industrySelectInput"],
  jobTitleInput: ["jobTitleInput"],
  cardMemberLanguages: [
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput"
  ],

  inputGroupMemberLanguages: [
    "inputGroupMemberLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput"
  ],

  primaryLanguageSelectInput: ["primaryLanguageSelectInput"],
  secondaryLanguageSelectInput: ["secondaryLanguageSelectInput"],
  cardMemberInterests: ["cardMemberInterests", "interestsMultiSelectInput"],
  interestsMultiSelectInput: ["interestsMultiSelectInput"],
  cardMemberSkills: ["cardMemberSkills", "skillsMultiSelectInput"],
  skillsMultiSelectInput: ["skillsMultiSelectInput"],
  cardMemberCommunity: ["cardMemberCommunity", "communityMultiSelectInput"],
  communityMultiSelectInput: ["communityMultiSelectInput"],
  submitDetailsButton: ["submitDetailsButton"],
  sectionMemberEditProfileSocial: [
    "sectionMemberEditProfileSocial",
    "memberSocialForm",
    "formMemberEditSocial",
    "cardMemberWebsite",
    "formTextInput",
    "cardMemberSocial",
    "socialPlatformsSwitchInputs",
    "submitSocialButton"
  ],

  memberSocialForm: [
    "memberSocialForm",
    "formMemberEditSocial",
    "cardMemberWebsite",
    "formTextInput",
    "cardMemberSocial",
    "socialPlatformsSwitchInputs",
    "submitSocialButton"
  ],

  formMemberEditSocial: [
    "formMemberEditSocial",
    "cardMemberWebsite",
    "formTextInput",
    "cardMemberSocial",
    "socialPlatformsSwitchInputs",
    "submitSocialButton"
  ],

  cardMemberWebsite: ["cardMemberWebsite", "formTextInput"],
  formTextInput: ["formTextInput"],
  cardMemberSocial: ["cardMemberSocial", "socialPlatformsSwitchInputs"],
  socialPlatformsSwitchInputs: ["socialPlatformsSwitchInputs"],
  submitSocialButton: ["submitSocialButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditmember__ArgProps,
      internalVariantPropNames: PlasmicEditmember__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicEditmember__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditmember";
  } else {
    func.displayName = `PlasmicEditmember.${nodeName}`;
  }
  return func;
}

export const PlasmicEditmember = Object.assign(
  // Top-level PlasmicEditmember renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionMemberEditProfile: makeNodeComponent("sectionMemberEditProfile"),
    memberProfileForm: makeNodeComponent("memberProfileForm"),
    formMemberEditProfile: makeNodeComponent("formMemberEditProfile"),
    cardMemberPersonalVerification: makeNodeComponent(
      "cardMemberPersonalVerification"
    ),

    memberPersonalNameGroup: makeNodeComponent("memberPersonalNameGroup"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    buttonGroupStripeVerification: makeNodeComponent(
      "buttonGroupStripeVerification"
    ),

    cardMemberImage: makeNodeComponent("cardMemberImage"),
    memberUploadLogoButtonGroup: makeNodeComponent(
      "memberUploadLogoButtonGroup"
    ),

    imageWrapper: makeNodeComponent("imageWrapper"),
    userImage: makeNodeComponent("userImage"),
    memberEditlogoGroup: makeNodeComponent("memberEditlogoGroup"),
    editUserImageButton: makeNodeComponent("editUserImageButton"),
    deleteUserImageButton: makeNodeComponent("deleteUserImageButton"),
    cardMemberUsername: makeNodeComponent("cardMemberUsername"),
    displayNameInput: makeNodeComponent("displayNameInput"),
    cardMemberUrl: makeNodeComponent("cardMemberUrl"),
    companyUrlTextInput: makeNodeComponent("companyUrlTextInput"),
    cardMemberTagline: makeNodeComponent("cardMemberTagline"),
    companyTagInput: makeNodeComponent("companyTagInput"),
    cardMemberDescription: makeNodeComponent("cardMemberDescription"),
    descriptionInput: makeNodeComponent("descriptionInput"),
    cardVideoIntroUrl: makeNodeComponent("cardVideoIntroUrl"),
    introVideoUrlInput: makeNodeComponent("introVideoUrlInput"),
    submitProfileButton: makeNodeComponent("submitProfileButton"),
    sectionMemberEditProfileDetails: makeNodeComponent(
      "sectionMemberEditProfileDetails"
    ),

    memberDetailsForm: makeNodeComponent("memberDetailsForm"),
    formMemberEditDetails: makeNodeComponent("formMemberEditDetails"),
    cardMemberLocation: makeNodeComponent("cardMemberLocation"),
    memberLocationGroup: makeNodeComponent("memberLocationGroup"),
    countrySelectInput: makeNodeComponent("countrySelectInput"),
    citySelectInput: makeNodeComponent("citySelectInput"),
    cardMemberIndustry: makeNodeComponent("cardMemberIndustry"),
    memberIndustryGroup: makeNodeComponent("memberIndustryGroup"),
    industrySelectInput: makeNodeComponent("industrySelectInput"),
    jobTitleInput: makeNodeComponent("jobTitleInput"),
    cardMemberLanguages: makeNodeComponent("cardMemberLanguages"),
    inputGroupMemberLanguages: makeNodeComponent("inputGroupMemberLanguages"),
    primaryLanguageSelectInput: makeNodeComponent("primaryLanguageSelectInput"),
    secondaryLanguageSelectInput: makeNodeComponent(
      "secondaryLanguageSelectInput"
    ),

    cardMemberInterests: makeNodeComponent("cardMemberInterests"),
    interestsMultiSelectInput: makeNodeComponent("interestsMultiSelectInput"),
    cardMemberSkills: makeNodeComponent("cardMemberSkills"),
    skillsMultiSelectInput: makeNodeComponent("skillsMultiSelectInput"),
    cardMemberCommunity: makeNodeComponent("cardMemberCommunity"),
    communityMultiSelectInput: makeNodeComponent("communityMultiSelectInput"),
    submitDetailsButton: makeNodeComponent("submitDetailsButton"),
    sectionMemberEditProfileSocial: makeNodeComponent(
      "sectionMemberEditProfileSocial"
    ),

    memberSocialForm: makeNodeComponent("memberSocialForm"),
    formMemberEditSocial: makeNodeComponent("formMemberEditSocial"),
    cardMemberWebsite: makeNodeComponent("cardMemberWebsite"),
    formTextInput: makeNodeComponent("formTextInput"),
    cardMemberSocial: makeNodeComponent("cardMemberSocial"),
    socialPlatformsSwitchInputs: makeNodeComponent(
      "socialPlatformsSwitchInputs"
    ),

    submitSocialButton: makeNodeComponent("submitSocialButton"),
    // Metadata about props expected for PlasmicEditmember
    internalVariantProps: PlasmicEditmember__VariantProps,
    internalArgProps: PlasmicEditmember__ArgProps
  }
);

export default PlasmicEditmember;
/* prettier-ignore-end */
