// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: QfGXBtwgwt
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: BXWgCr5-vns/component
import NavbarMemberEdit from "../../NavbarMemberEdit"; // plasmic-import: oTyBGj7jMRD/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: Hp_zc6XLro/component
import ButtonGroupStripeVerification from "../../ButtonGroupStripeVerification"; // plasmic-import: 2wDe-7IRwt/component
import UserAvatarButton from "../../UserAvatarButton"; // plasmic-import: w1GnXfIMuv/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import InputTextPrefixSuffix from "../../InputTextPrefixSuffix"; // plasmic-import: 8Sse2xZ7od/component
import InputTextField from "../../InputTextField"; // plasmic-import: ATs3nXJ-Tjc/component
import InputTextAreaPrimary from "../../InputTextAreaPrimary"; // plasmic-import: T-WLdey8LU/component
import SelectGroupDropdownPrimary from "../../SelectGroupDropdownPrimary"; // plasmic-import: -teiDn_7Z-/component
import InputSearchbarFilterDisplay from "../../InputSearchbarFilterDisplay"; // plasmic-import: zockkqCMBP/component
import CardSocialConnectSwitch from "../../CardSocialConnectSwitch"; // plasmic-import: PjlQKkmde-/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicEditmember.module.css"; // plasmic-import: QfGXBtwgwt/css

export const PlasmicEditmember__VariantProps = new Array();

export const PlasmicEditmember__ArgProps = new Array();

function PlasmicEditmember__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarMemberEdit
            data-plasmic-name={"navbarMemberEdit"}
            data-plasmic-override={overrides.navbarMemberEdit}
            className={classNames("__wab_instance", sty.navbarMemberEdit)}
            navItems={[
              "notifications",
              "messages",
              "reviews",
              "lists",
              "wallet"
            ]}
            selected={"profile"}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfile"}
            data-plasmic-override={overrides.sectionMemberEditProfile}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionMemberEditProfile)}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__acBi5
              )}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text___04ReL
                  )}
                >
                  {"Edit profile"}
                </div>
              }
              textDisplay={"Member"}
              textSubhead={
                "Set your creator profile and make a great first impression"
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditProfile"}
              data-plasmic-override={overrides.formMemberEditProfile}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formMemberEditProfile)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberPersonalVerification"}
                data-plasmic-override={overrides.cardMemberPersonalVerification}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.cardMemberPersonalVerification
                )}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__gEtHe
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__hxjHi
                      )}
                    >
                      {"Please enter your full name."}
                    </div>
                  }
                >
                  {"Personal name"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberPersonalNameGroup"}
                  data-plasmic-override={overrides.memberPersonalNameGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberPersonalNameGroup
                  )}
                >
                  <InputTextForm
                    data-plasmic-name={"firstName"}
                    data-plasmic-override={overrides.firstName}
                    className={classNames("__wab_instance", sty.firstName)}
                    labelHeadline={"First name"}
                    type={"secondary"}
                    width={"_360"}
                  />

                  <InputTextForm
                    data-plasmic-name={"lastName"}
                    data-plasmic-override={overrides.lastName}
                    className={classNames("__wab_instance", sty.lastName)}
                    labelHeadline={"Last name"}
                    type={"secondary"}
                    width={"_360"}
                  />
                </p.Stack>

                <ButtonGroupStripeVerification
                  data-plasmic-name={"buttonGroupStripeVerification"}
                  data-plasmic-override={
                    overrides.buttonGroupStripeVerification
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.buttonGroupStripeVerification
                  )}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberImage"}
                data-plasmic-override={overrides.cardMemberImage}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberImage)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__ezi8
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__h4Mp0
                      )}
                    >
                      {
                        "Click on the avatar to upload a custom image from your files."
                      }
                    </div>
                  }
                >
                  {"Image"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberUploadLogoButtonGroup"}
                  data-plasmic-override={overrides.memberUploadLogoButtonGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberUploadLogoButtonGroup
                  )}
                >
                  <UserAvatarButton
                    data-plasmic-name={"userAvatarButton"}
                    data-plasmic-override={overrides.userAvatarButton}
                    className={classNames(
                      "__wab_instance",
                      sty.userAvatarButton
                    )}
                    size={"_64Px"}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"memberEditlogoGroup"}
                    data-plasmic-override={overrides.memberEditlogoGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.memberEditlogoGroup
                    )}
                  >
                    <ButtonPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary__u0Eio
                      )}
                      size={"_90"}
                      type={"outline"}
                    >
                      {"Edit"}
                    </ButtonPrimary>

                    <ButtonPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary__ryedl
                      )}
                      size={"_90"}
                      type={"secondary"}
                    >
                      {"Delete"}
                    </ButtonPrimary>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberUsername"}
                data-plasmic-override={overrides.cardMemberUsername}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberUsername)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__anzId
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__wxY25
                      )}
                    >
                      {
                        "This is your URL namespace within the Intrepid community"
                      }
                    </div>
                  }
                >
                  {"Username display"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  data-plasmic-name={"username"}
                  data-plasmic-override={overrides.username}
                  className={classNames("__wab_instance", sty.username)}
                  prefixLabelHeadline={"@"}
                  suffix={"suffix"}
                  type={"primary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberUrl"}
                data-plasmic-override={overrides.cardMemberUrl}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberUrl)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___71L8V
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__pNwo
                      )}
                    >
                      {
                        "This is your copany's URL namespace within the Intrepid community"
                      }
                    </div>
                  }
                >
                  {"Url namespace"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix___3Hs15
                  )}
                  prefixLabelHeadline={"intrepid/technology/"}
                  suffix={"suffix"}
                  type={"primary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberTagline"}
                data-plasmic-override={overrides.cardMemberTagline}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberTagline)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__jfQor
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__xxxU
                      )}
                    >
                      {"Short description of your company or team"}
                    </div>
                  }
                >
                  {"Tagline"}
                </CardHeaderTitlePrimary>

                <InputTextField
                  data-plasmic-name={"tags"}
                  data-plasmic-override={overrides.tags}
                  className={classNames("__wab_instance", sty.tags)}
                  size={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                  type={"secondary"}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberDescription"}
                data-plasmic-override={overrides.cardMemberDescription}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.cardMemberDescription
                )}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__oB2Kh
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__qsVv3
                      )}
                    >
                      {"Please describe yourself and your interests. "}
                    </div>
                  }
                >
                  {"Description"}
                </CardHeaderTitlePrimary>

                <InputTextAreaPrimary
                  data-plasmic-name={"description"}
                  data-plasmic-override={overrides.description}
                  className={classNames("__wab_instance", sty.description)}
                  height={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_90"
                  }
                  type={"secondary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardVideoIntroUrl"}
                data-plasmic-override={overrides.cardVideoIntroUrl}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardVideoIntroUrl)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__hRoA
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__zWe26
                      )}
                    >
                      {
                        "Don't worry — this is optional and it's okay to launch without a video."
                      }
                    </div>
                  }
                >
                  {"Video introduction"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__lxaQu
                  )}
                  prefixLabelHeadline={"https//"}
                  suffix={"suffix"}
                  type={"primary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"memberSubmitProfile"}
                data-plasmic-override={overrides.memberSubmitProfile}
                className={classNames(
                  "__wab_instance",
                  sty.memberSubmitProfile
                )}
                size={"_180"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__sHnOz
                  )}
                >
                  {"Save profile"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfileDetails"}
            data-plasmic-override={overrides.sectionMemberEditProfileDetails}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberEditProfileDetails
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__pGCvu
              )}
              headings={["title"]}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__zGsIr
                  )}
                >
                  {"Details"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your creator details for better visibility and matching in the community"
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditDetails"}
              data-plasmic-override={overrides.formMemberEditDetails}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formMemberEditDetails)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberLocation"}
                data-plasmic-override={overrides.cardMemberLocation}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberLocation)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__fhFuB
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__oQfam
                      )}
                    >
                      {
                        "Please enter the Country and City of your legal residence"
                      }
                    </div>
                  }
                >
                  {"Location"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberLocationGroup"}
                  data-plasmic-override={overrides.memberLocationGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberLocationGroup
                  )}
                >
                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"country"}
                    data-plasmic-override={overrides.country}
                    className={classNames("__wab_instance", sty.country)}
                    description={"description"}
                  >
                    {"Country"}
                  </SelectGroupDropdownPrimary>

                  <InputTextForm
                    data-plasmic-name={"city"}
                    data-plasmic-override={overrides.city}
                    className={classNames("__wab_instance", sty.city)}
                    labelHeadline={"City"}
                    subhead={"subhead"}
                    type={"primary"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_360"
                    }
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberIndustry"}
                data-plasmic-override={overrides.cardMemberIndustry}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberIndustry)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__lrlkZ
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__kQo
                      )}
                    >
                      {
                        "Please enter the industry you work in and your role in your company."
                      }
                    </div>
                  }
                >
                  {"Industry & job"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberIndustryGroup"}
                  data-plasmic-override={overrides.memberIndustryGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberIndustryGroup
                  )}
                >
                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"industry"}
                    data-plasmic-override={overrides.industry}
                    className={classNames("__wab_instance", sty.industry)}
                    description={"description"}
                  >
                    {"Industry"}
                  </SelectGroupDropdownPrimary>

                  <InputTextForm
                    data-plasmic-name={"jobTitle"}
                    data-plasmic-override={overrides.jobTitle}
                    className={classNames("__wab_instance", sty.jobTitle)}
                    labelHeadline={"Job title"}
                    subhead={"subhead"}
                    type={"primary"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_360"
                    }
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberLanguages"}
                data-plasmic-override={overrides.cardMemberLanguages}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberLanguages)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___8QCqw
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__ikYyc
                      )}
                    >
                      {"Enter the languages you speak"}
                    </div>
                  }
                >
                  {"Languages"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputGroupMemberLanguages"}
                  data-plasmic-override={overrides.inputGroupMemberLanguages}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupMemberLanguages
                  )}
                >
                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"language"}
                    data-plasmic-override={overrides.language}
                    className={classNames("__wab_instance", sty.language)}
                    description={"description"}
                  >
                    {"Primary"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"selectGroupDropdownPrimary"}
                    data-plasmic-override={overrides.selectGroupDropdownPrimary}
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary
                    )}
                    description={"description"}
                  >
                    {"Secondary"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberInterests"}
                data-plasmic-override={overrides.cardMemberInterests}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberInterests)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__bl1O0
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__mAude
                      )}
                    >
                      {
                        "Search and enter the products/services you are interested in, separated by commas"
                      }
                    </div>
                  }
                >
                  {"Interests"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  data-plasmic-name={"interest"}
                  data-plasmic-override={overrides.interest}
                  className={classNames("__wab_instance", sty.interest)}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberSkills"}
                data-plasmic-override={overrides.cardMemberSkills}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberSkills)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__i0Au
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___4WyB
                      )}
                    >
                      {
                        "Search and enter your skills and strengths, separated by commas"
                      }
                    </div>
                  }
                >
                  {"Skills"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  data-plasmic-name={"skill"}
                  data-plasmic-override={overrides.skill}
                  className={classNames("__wab_instance", sty.skill)}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberCommunity"}
                data-plasmic-override={overrides.cardMemberCommunity}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberCommunity)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__sy9Hg
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__kfwe
                      )}
                    >
                      {
                        "Search and enter your industry or most relevant community"
                      }
                    </div>
                  }
                >
                  {"Community"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  data-plasmic-name={"community"}
                  data-plasmic-override={overrides.community}
                  className={classNames("__wab_instance", sty.community)}
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"memberSubmitDetails"}
                data-plasmic-override={overrides.memberSubmitDetails}
                className={classNames(
                  "__wab_instance",
                  sty.memberSubmitDetails
                )}
                size={"_180"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__o7ZPl
                  )}
                >
                  {"Save details"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfileSocial"}
            data-plasmic-override={overrides.sectionMemberEditProfileSocial}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberEditProfileSocial
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__da5Bv
              )}
              headings={["title"]}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__zgvp4
                  )}
                >
                  {"Web and social"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Securely verify your accounts and display links on your page. We’ll never post on your behalf."
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditSocial"}
              data-plasmic-override={overrides.formMemberEditSocial}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formMemberEditSocial)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberWebsite"}
                data-plasmic-override={overrides.cardMemberWebsite}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberWebsite)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__v0B32
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__zfHw
                      )}
                    >
                      {"Enter your company's website address"}
                    </div>
                  }
                >
                  {"Website"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  data-plasmic-name={"website"}
                  data-plasmic-override={overrides.website}
                  className={classNames("__wab_instance", sty.website)}
                  prefixLabelHeadline={"https://"}
                  suffix={"suffix"}
                  type={"primary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberSocial"}
                data-plasmic-override={overrides.cardMemberSocial}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberSocial)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__tYhVt
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__osn8L
                      )}
                    >
                      {
                        "Increase trust and visibility by connecting the social profiles you want to include on your profile"
                      }
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__rUb4
                    )}
                  >
                    {"Social"}
                  </div>
                </CardHeaderTitlePrimary>

                <div
                  data-plasmic-name={"inputGroupMemberSocial"}
                  data-plasmic-override={overrides.inputGroupMemberSocial}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupMemberSocial
                  )}
                >
                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__ilTpw
                    )}
                    socialNetwork={"instagram"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__c4KdL
                    )}
                    socialNetwork={"facebook"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__z0Tmx
                    )}
                    socialNetwork={"linkedin"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__dhc2B
                    )}
                    socialNetwork={"twitter"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__iDscj
                    )}
                    socialNetwork={"youtube"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__vE5D2
                    )}
                    socialNetwork={"tikTok"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__fpocU
                    )}
                    socialNetwork={"github"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch___4Snea
                    )}
                    socialNetwork={"dribbble"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />
                </div>
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"memberSubmitSocials"}
                data-plasmic-override={overrides.memberSubmitSocials}
                className={classNames(
                  "__wab_instance",
                  sty.memberSubmitSocials
                )}
                size={"_180"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__uRTf
                  )}
                >
                  {"Save socials"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarMemberEdit",
    "sectionMemberEditProfile",
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstName",
    "lastName",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup",
    "cardMemberUsername",
    "username",
    "cardMemberUrl",
    "cardMemberTagline",
    "tags",
    "cardMemberDescription",
    "description",
    "cardVideoIntroUrl",
    "memberSubmitProfile",
    "sectionMemberEditProfileDetails",
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "country",
    "city",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industry",
    "jobTitle",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "language",
    "selectGroupDropdownPrimary",
    "cardMemberInterests",
    "interest",
    "cardMemberSkills",
    "skill",
    "cardMemberCommunity",
    "community",
    "memberSubmitDetails",
    "sectionMemberEditProfileSocial",
    "formMemberEditSocial",
    "cardMemberWebsite",
    "website",
    "cardMemberSocial",
    "inputGroupMemberSocial",
    "memberSubmitSocials",
    "footerB"
  ],

  navbarInternal: ["navbarInternal"],
  navbarMemberEdit: ["navbarMemberEdit"],
  sectionMemberEditProfile: [
    "sectionMemberEditProfile",
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstName",
    "lastName",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup",
    "cardMemberUsername",
    "username",
    "cardMemberUrl",
    "cardMemberTagline",
    "tags",
    "cardMemberDescription",
    "description",
    "cardVideoIntroUrl",
    "memberSubmitProfile"
  ],

  formMemberEditProfile: [
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstName",
    "lastName",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup",
    "cardMemberUsername",
    "username",
    "cardMemberUrl",
    "cardMemberTagline",
    "tags",
    "cardMemberDescription",
    "description",
    "cardVideoIntroUrl",
    "memberSubmitProfile"
  ],

  cardMemberPersonalVerification: [
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "firstName",
    "lastName",
    "buttonGroupStripeVerification"
  ],

  memberPersonalNameGroup: ["memberPersonalNameGroup", "firstName", "lastName"],
  firstName: ["firstName"],
  lastName: ["lastName"],
  buttonGroupStripeVerification: ["buttonGroupStripeVerification"],
  cardMemberImage: [
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup"
  ],

  memberUploadLogoButtonGroup: [
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup"
  ],

  userAvatarButton: ["userAvatarButton"],
  memberEditlogoGroup: ["memberEditlogoGroup"],
  cardMemberUsername: ["cardMemberUsername", "username"],
  username: ["username"],
  cardMemberUrl: ["cardMemberUrl"],
  cardMemberTagline: ["cardMemberTagline", "tags"],
  tags: ["tags"],
  cardMemberDescription: ["cardMemberDescription", "description"],
  description: ["description"],
  cardVideoIntroUrl: ["cardVideoIntroUrl"],
  memberSubmitProfile: ["memberSubmitProfile"],
  sectionMemberEditProfileDetails: [
    "sectionMemberEditProfileDetails",
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "country",
    "city",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industry",
    "jobTitle",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "language",
    "selectGroupDropdownPrimary",
    "cardMemberInterests",
    "interest",
    "cardMemberSkills",
    "skill",
    "cardMemberCommunity",
    "community",
    "memberSubmitDetails"
  ],

  formMemberEditDetails: [
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "country",
    "city",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industry",
    "jobTitle",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "language",
    "selectGroupDropdownPrimary",
    "cardMemberInterests",
    "interest",
    "cardMemberSkills",
    "skill",
    "cardMemberCommunity",
    "community",
    "memberSubmitDetails"
  ],

  cardMemberLocation: [
    "cardMemberLocation",
    "memberLocationGroup",
    "country",
    "city"
  ],

  memberLocationGroup: ["memberLocationGroup", "country", "city"],
  country: ["country"],
  city: ["city"],
  cardMemberIndustry: [
    "cardMemberIndustry",
    "memberIndustryGroup",
    "industry",
    "jobTitle"
  ],

  memberIndustryGroup: ["memberIndustryGroup", "industry", "jobTitle"],
  industry: ["industry"],
  jobTitle: ["jobTitle"],
  cardMemberLanguages: [
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "language",
    "selectGroupDropdownPrimary"
  ],

  inputGroupMemberLanguages: [
    "inputGroupMemberLanguages",
    "language",
    "selectGroupDropdownPrimary"
  ],

  language: ["language"],
  selectGroupDropdownPrimary: ["selectGroupDropdownPrimary"],
  cardMemberInterests: ["cardMemberInterests", "interest"],
  interest: ["interest"],
  cardMemberSkills: ["cardMemberSkills", "skill"],
  skill: ["skill"],
  cardMemberCommunity: ["cardMemberCommunity", "community"],
  community: ["community"],
  memberSubmitDetails: ["memberSubmitDetails"],
  sectionMemberEditProfileSocial: [
    "sectionMemberEditProfileSocial",
    "formMemberEditSocial",
    "cardMemberWebsite",
    "website",
    "cardMemberSocial",
    "inputGroupMemberSocial",
    "memberSubmitSocials"
  ],

  formMemberEditSocial: [
    "formMemberEditSocial",
    "cardMemberWebsite",
    "website",
    "cardMemberSocial",
    "inputGroupMemberSocial",
    "memberSubmitSocials"
  ],

  cardMemberWebsite: ["cardMemberWebsite", "website"],
  website: ["website"],
  cardMemberSocial: ["cardMemberSocial", "inputGroupMemberSocial"],
  inputGroupMemberSocial: ["inputGroupMemberSocial"],
  memberSubmitSocials: ["memberSubmitSocials"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditmember__ArgProps,
      internalVariantPropNames: PlasmicEditmember__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicEditmember__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditmember";
  } else {
    func.displayName = `PlasmicEditmember.${nodeName}`;
  }
  return func;
}

export const PlasmicEditmember = Object.assign(
  // Top-level PlasmicEditmember renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarMemberEdit: makeNodeComponent("navbarMemberEdit"),
    sectionMemberEditProfile: makeNodeComponent("sectionMemberEditProfile"),
    formMemberEditProfile: makeNodeComponent("formMemberEditProfile"),
    cardMemberPersonalVerification: makeNodeComponent(
      "cardMemberPersonalVerification"
    ),

    memberPersonalNameGroup: makeNodeComponent("memberPersonalNameGroup"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    buttonGroupStripeVerification: makeNodeComponent(
      "buttonGroupStripeVerification"
    ),

    cardMemberImage: makeNodeComponent("cardMemberImage"),
    memberUploadLogoButtonGroup: makeNodeComponent(
      "memberUploadLogoButtonGroup"
    ),

    userAvatarButton: makeNodeComponent("userAvatarButton"),
    memberEditlogoGroup: makeNodeComponent("memberEditlogoGroup"),
    cardMemberUsername: makeNodeComponent("cardMemberUsername"),
    username: makeNodeComponent("username"),
    cardMemberUrl: makeNodeComponent("cardMemberUrl"),
    cardMemberTagline: makeNodeComponent("cardMemberTagline"),
    tags: makeNodeComponent("tags"),
    cardMemberDescription: makeNodeComponent("cardMemberDescription"),
    description: makeNodeComponent("description"),
    cardVideoIntroUrl: makeNodeComponent("cardVideoIntroUrl"),
    memberSubmitProfile: makeNodeComponent("memberSubmitProfile"),
    sectionMemberEditProfileDetails: makeNodeComponent(
      "sectionMemberEditProfileDetails"
    ),

    formMemberEditDetails: makeNodeComponent("formMemberEditDetails"),
    cardMemberLocation: makeNodeComponent("cardMemberLocation"),
    memberLocationGroup: makeNodeComponent("memberLocationGroup"),
    country: makeNodeComponent("country"),
    city: makeNodeComponent("city"),
    cardMemberIndustry: makeNodeComponent("cardMemberIndustry"),
    memberIndustryGroup: makeNodeComponent("memberIndustryGroup"),
    industry: makeNodeComponent("industry"),
    jobTitle: makeNodeComponent("jobTitle"),
    cardMemberLanguages: makeNodeComponent("cardMemberLanguages"),
    inputGroupMemberLanguages: makeNodeComponent("inputGroupMemberLanguages"),
    language: makeNodeComponent("language"),
    selectGroupDropdownPrimary: makeNodeComponent("selectGroupDropdownPrimary"),
    cardMemberInterests: makeNodeComponent("cardMemberInterests"),
    interest: makeNodeComponent("interest"),
    cardMemberSkills: makeNodeComponent("cardMemberSkills"),
    skill: makeNodeComponent("skill"),
    cardMemberCommunity: makeNodeComponent("cardMemberCommunity"),
    community: makeNodeComponent("community"),
    memberSubmitDetails: makeNodeComponent("memberSubmitDetails"),
    sectionMemberEditProfileSocial: makeNodeComponent(
      "sectionMemberEditProfileSocial"
    ),

    formMemberEditSocial: makeNodeComponent("formMemberEditSocial"),
    cardMemberWebsite: makeNodeComponent("cardMemberWebsite"),
    website: makeNodeComponent("website"),
    cardMemberSocial: makeNodeComponent("cardMemberSocial"),
    inputGroupMemberSocial: makeNodeComponent("inputGroupMemberSocial"),
    memberSubmitSocials: makeNodeComponent("memberSubmitSocials"),
    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicEditmember
    internalVariantProps: PlasmicEditmember__VariantProps,
    internalArgProps: PlasmicEditmember__ArgProps
  }
);

export default PlasmicEditmember;
/* prettier-ignore-end */
