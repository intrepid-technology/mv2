// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Z8dV7lUnBe3
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import FormSwitchInput from "../../FormSwitchInput"; // plasmic-import: Q6uFqZTeF8/component
import FormMultiCheckboxInput from "../../FormMultiCheckboxInput"; // plasmic-import: -o3gl0nF6j/component
import Button from "../../Button"; // plasmic-import: ftJnovScMuV/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicNotificationSettingsForm.module.css"; // plasmic-import: Z8dV7lUnBe3/css

export const PlasmicNotificationSettingsForm__VariantProps = new Array();

export const PlasmicNotificationSettingsForm__ArgProps = new Array();

function PlasmicNotificationSettingsForm__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <CardHeaderTitleDisplay
        data-plasmic-name={"cardHeaderTitleDisplay"}
        data-plasmic-override={overrides.cardHeaderTitleDisplay}
        className={classNames("__wab_instance", sty.cardHeaderTitleDisplay)}
        headings={["title"]}
        size={
          hasVariant(globalVariants, "screen", "iphone678") ? undefined : "_720"
        }
        slot={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__grNtB
            )}
          >
            {"Notifications"}
          </div>
        }
        textDisplay={"Profile edit"}
        textSubhead={"Get notified about activity on Intrepid"}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"notificationPushEmail"}
        data-plasmic-override={overrides.notificationPushEmail}
        hasGap={true}
        className={classNames(projectcss.all, sty.notificationPushEmail)}
      >
        <CardHeaderTitlePrimary
          className={classNames(
            "__wab_instance",
            sty.cardHeaderTitlePrimary__mtwaw
          )}
          slot={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__buGzX
              )}
            >
              {"Updates when you're away from the community."}
            </div>
          }
        >
          {"Speak easy"}
        </CardHeaderTitlePrimary>

        <FormSwitchInput
          data-plasmic-name={"pushNotificationSwitchInput"}
          data-plasmic-override={overrides.pushNotificationSwitchInput}
          className={classNames(
            "__wab_instance",
            sty.pushNotificationSwitchInput
          )}
          content={
            <div className={classNames(projectcss.all, sty.freeBox__tp9Sb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__koKy2
                )}
              >
                {"Push notifications"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gwNlz
                )}
              >
                {"What's going on in the community - sent to your mobile"}
              </div>
            </div>
          }
          name={"pushNotification"}
        />

        <FormSwitchInput
          data-plasmic-name={"emailNotificationSwitchInput"}
          data-plasmic-override={overrides.emailNotificationSwitchInput}
          className={classNames(
            "__wab_instance",
            sty.emailNotificationSwitchInput
          )}
          content={
            <div className={classNames(projectcss.all, sty.freeBox__nrQmG)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__obReU
                )}
              >
                {"Email notifications"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xwp9K
                )}
              >
                {"What's going on in the community - sent to your inbox"}
              </div>
            </div>
          }
          name={"emailNotification"}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"notificationActivity"}
        data-plasmic-override={overrides.notificationActivity}
        hasGap={true}
        className={classNames(projectcss.all, sty.notificationActivity)}
      >
        <CardHeaderTitlePrimary
          className={classNames(
            "__wab_instance",
            sty.cardHeaderTitlePrimary___4Gt9U
          )}
          slot={
            "Get notifications from your interactions within the community."
          }
        >
          {"Heads up"}
        </CardHeaderTitlePrimary>

        <FormMultiCheckboxInput
          data-plasmic-name={"activityMultiCheckboxInput"}
          data-plasmic-override={overrides.activityMultiCheckboxInput}
          className={classNames(
            "__wab_instance",
            sty.activityMultiCheckboxInput
          )}
          name={"activities"}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"notificationNewsEvents"}
        data-plasmic-override={overrides.notificationNewsEvents}
        hasGap={true}
        className={classNames(projectcss.all, sty.notificationNewsEvents)}
      >
        <CardHeaderTitlePrimary
          className={classNames(
            "__wab_instance",
            sty.cardHeaderTitlePrimary__ztsDq
          )}
          slot={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mnP3L
              )}
            >
              {"All the fun things going on in the community- be in the know."}
            </div>
          }
        >
          {"Happenings"}
        </CardHeaderTitlePrimary>

        <FormSwitchInput
          className={classNames("__wab_instance", sty.formSwitchInput__vpmoC)}
          content={
            <div className={classNames(projectcss.all, sty.freeBox___6V3Uj)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3P7Ii
                )}
              >
                {"Email newsletter"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__flYs
                )}
              >
                {"Our weekly newsletter packed with fun stuff"}
              </div>
            </div>
          }
          name={"events.newsletter"}
        />

        <FormSwitchInput
          className={classNames("__wab_instance", sty.formSwitchInput__s0CUy)}
          content={
            <div className={classNames(projectcss.all, sty.freeBox__diGcP)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n402S
                )}
              >
                {"Events and meetups"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dUqCc
                )}
              >
                {"Meet members live and in person"}
              </div>
            </div>
          }
          name={"events.meetups"}
        />
      </p.Stack>

      <div
        data-plasmic-name={"buttonWrapper"}
        data-plasmic-override={overrides.buttonWrapper}
        className={classNames(projectcss.all, sty.buttonWrapper)}
      >
        <Button
          data-plasmic-name={"notificationFormSubmitButton"}
          data-plasmic-override={overrides.notificationFormSubmitButton}
          className={classNames(
            "__wab_instance",
            sty.notificationFormSubmitButton
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wPskt
            )}
          >
            {"Save Notifications"}
          </div>
        </Button>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "cardHeaderTitleDisplay",
    "notificationPushEmail",
    "pushNotificationSwitchInput",
    "emailNotificationSwitchInput",
    "notificationActivity",
    "activityMultiCheckboxInput",
    "notificationNewsEvents",
    "buttonWrapper",
    "notificationFormSubmitButton"
  ],

  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  notificationPushEmail: [
    "notificationPushEmail",
    "pushNotificationSwitchInput",
    "emailNotificationSwitchInput"
  ],

  pushNotificationSwitchInput: ["pushNotificationSwitchInput"],
  emailNotificationSwitchInput: ["emailNotificationSwitchInput"],
  notificationActivity: ["notificationActivity", "activityMultiCheckboxInput"],
  activityMultiCheckboxInput: ["activityMultiCheckboxInput"],
  notificationNewsEvents: ["notificationNewsEvents"],
  buttonWrapper: ["buttonWrapper", "notificationFormSubmitButton"],
  notificationFormSubmitButton: ["notificationFormSubmitButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNotificationSettingsForm__ArgProps,
      internalVariantPropNames: PlasmicNotificationSettingsForm__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNotificationSettingsForm__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNotificationSettingsForm";
  } else {
    func.displayName = `PlasmicNotificationSettingsForm.${nodeName}`;
  }
  return func;
}

export const PlasmicNotificationSettingsForm = Object.assign(
  // Top-level PlasmicNotificationSettingsForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    notificationPushEmail: makeNodeComponent("notificationPushEmail"),
    pushNotificationSwitchInput: makeNodeComponent(
      "pushNotificationSwitchInput"
    ),

    emailNotificationSwitchInput: makeNodeComponent(
      "emailNotificationSwitchInput"
    ),

    notificationActivity: makeNodeComponent("notificationActivity"),
    activityMultiCheckboxInput: makeNodeComponent("activityMultiCheckboxInput"),
    notificationNewsEvents: makeNodeComponent("notificationNewsEvents"),
    buttonWrapper: makeNodeComponent("buttonWrapper"),
    notificationFormSubmitButton: makeNodeComponent(
      "notificationFormSubmitButton"
    ),

    // Metadata about props expected for PlasmicNotificationSettingsForm
    internalVariantProps: PlasmicNotificationSettingsForm__VariantProps,
    internalArgProps: PlasmicNotificationSettingsForm__ArgProps
  }
);

export default PlasmicNotificationSettingsForm;
/* prettier-ignore-end */
