// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Olpj-oqQtA
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardPasswordReset.module.css"; // plasmic-import: Olpj-oqQtA/css
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: naG0WWoBul/icon

export const PlasmicCardPasswordReset__VariantProps = new Array();

export const PlasmicCardPasswordReset__ArgProps = new Array("textSlot");

function PlasmicCardPasswordReset__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(projectcss.all, sty.parent)}
      >
        <p.PlasmicLink
          data-plasmic-name={"navLinkBack"}
          data-plasmic-override={overrides.navLinkBack}
          className={classNames(projectcss.a, sty.navLinkBack)}
          component={Link}
          href={"/log-in"}
          platform={"nextjs"}
        >
          <Icon43Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </p.PlasmicLink>

        <p.Stack
          as={"form"}
          data-plasmic-name={"passwordReset"}
          data-plasmic-override={overrides.passwordReset}
          hasGap={true}
          className={classNames(projectcss.all, sty.passwordReset)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubheadGroupParent"}
            data-plasmic-override={overrides.headlineSubheadGroupParent}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.headlineSubheadGroupParent
            )}
          >
            <div
              data-plasmic-name={"headlineText"}
              data-plasmic-override={overrides.headlineText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.headlineText
              )}
            >
              {"Password reset?"}
            </div>

            <div
              data-plasmic-name={"textBodyParent"}
              data-plasmic-override={overrides.textBodyParent}
              className={classNames(projectcss.all, sty.textBodyParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "Enter your registered email below to receive your password recovery link.",
                value: args.textSlot,
                className: classNames(sty.slotTargetTextSlot)
              })}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"emailButtonGroupParent"}
            data-plasmic-override={overrides.emailButtonGroupParent}
            hasGap={true}
            className={classNames(projectcss.all, sty.emailButtonGroupParent)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"emailParent"}
              data-plasmic-override={overrides.emailParent}
              hasGap={true}
              className={classNames(projectcss.all, sty.emailParent)}
            >
              <label
                data-plasmic-name={"emailLabel"}
                data-plasmic-override={overrides.emailLabel}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.emailLabel
                )}
              >
                {"Email"}
              </label>

              <input
                data-plasmic-name={"registeredEmail"}
                data-plasmic-override={overrides.registeredEmail}
                className={classNames(projectcss.input, sty.registeredEmail)}
                placeholder={"enter your registered email address"}
                size={1}
                type={"text"}
                value={""}
              />
            </p.Stack>

            <ButtonPrimary
              data-plasmic-name={"recoveryLinkEmail"}
              data-plasmic-override={overrides.recoveryLinkEmail}
              className={classNames("__wab_instance", sty.recoveryLinkEmail)}
              size={"_360"}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Send recovery link"}
              </div>
            </ButtonPrimary>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "navLinkBack",
    "svg",
    "passwordReset",
    "headlineSubheadGroupParent",
    "headlineText",
    "textBodyParent",
    "emailButtonGroupParent",
    "emailParent",
    "emailLabel",
    "registeredEmail",
    "recoveryLinkEmail",
    "text"
  ],

  parent: [
    "parent",
    "navLinkBack",
    "svg",
    "passwordReset",
    "headlineSubheadGroupParent",
    "headlineText",
    "textBodyParent",
    "emailButtonGroupParent",
    "emailParent",
    "emailLabel",
    "registeredEmail",
    "recoveryLinkEmail",
    "text"
  ],

  navLinkBack: ["navLinkBack", "svg"],
  svg: ["svg"],
  passwordReset: [
    "passwordReset",
    "headlineSubheadGroupParent",
    "headlineText",
    "textBodyParent",
    "emailButtonGroupParent",
    "emailParent",
    "emailLabel",
    "registeredEmail",
    "recoveryLinkEmail",
    "text"
  ],

  headlineSubheadGroupParent: [
    "headlineSubheadGroupParent",
    "headlineText",
    "textBodyParent"
  ],

  headlineText: ["headlineText"],
  textBodyParent: ["textBodyParent"],
  emailButtonGroupParent: [
    "emailButtonGroupParent",
    "emailParent",
    "emailLabel",
    "registeredEmail",
    "recoveryLinkEmail",
    "text"
  ],

  emailParent: ["emailParent", "emailLabel", "registeredEmail"],
  emailLabel: ["emailLabel"],
  registeredEmail: ["registeredEmail"],
  recoveryLinkEmail: ["recoveryLinkEmail", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardPasswordReset__ArgProps,
      internalVariantPropNames: PlasmicCardPasswordReset__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCardPasswordReset__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardPasswordReset";
  } else {
    func.displayName = `PlasmicCardPasswordReset.${nodeName}`;
  }
  return func;
}

export const PlasmicCardPasswordReset = Object.assign(
  // Top-level PlasmicCardPasswordReset renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    navLinkBack: makeNodeComponent("navLinkBack"),
    svg: makeNodeComponent("svg"),
    passwordReset: makeNodeComponent("passwordReset"),
    headlineSubheadGroupParent: makeNodeComponent("headlineSubheadGroupParent"),
    headlineText: makeNodeComponent("headlineText"),
    textBodyParent: makeNodeComponent("textBodyParent"),
    emailButtonGroupParent: makeNodeComponent("emailButtonGroupParent"),
    emailParent: makeNodeComponent("emailParent"),
    emailLabel: makeNodeComponent("emailLabel"),
    registeredEmail: makeNodeComponent("registeredEmail"),
    recoveryLinkEmail: makeNodeComponent("recoveryLinkEmail"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicCardPasswordReset
    internalVariantProps: PlasmicCardPasswordReset__VariantProps,
    internalArgProps: PlasmicCardPasswordReset__ArgProps
  }
);

export default PlasmicCardPasswordReset;
/* prettier-ignore-end */
