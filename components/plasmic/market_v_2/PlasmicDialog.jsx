// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: bjYLFDLDv0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicDialog.module.css"; // plasmic-import: bjYLFDLDv0/css

export const PlasmicDialog__VariantProps = new Array();

export const PlasmicDialog__ArgProps = new Array(
  "headline",
  "subhead",
  "children",
  "cancelButtonLabel",
  "submitButtonLabel"
);

function PlasmicDialog__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        hasGap={true}
        className={classNames(projectcss.all, sty.header)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___4SOnT)}>
          <div className={classNames(projectcss.all, sty.freeBox___4JCbN)}>
            {p.renderPlasmicSlot({
              defaultContents: "Model Headline Title",
              value: args.headline,
              className: classNames(sty.slotTargetHeadline)
            })}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__fzWiL)}>
          <div className={classNames(projectcss.all, sty.freeBox__ubnbo)}>
            {p.renderPlasmicSlot({
              defaultContents: "This is a modal to get your attention",
              value: args.subhead,
              className: classNames(sty.slotTargetSubhead)
            })}
          </div>
        </div>
      </p.Stack>

      <div
        data-plasmic-name={"contentWrapper"}
        data-plasmic-override={overrides.contentWrapper}
        className={classNames(projectcss.all, sty.contentWrapper)}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.children
        })}
      </div>

      <div
        data-plasmic-name={"actionsWrapper"}
        data-plasmic-override={overrides.actionsWrapper}
        className={classNames(projectcss.all, sty.actionsWrapper)}
      >
        <button
          data-plasmic-name={"cancelButton"}
          data-plasmic-override={overrides.cancelButton}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.cancelButton
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Cancel",
            value: args.cancelButtonLabel,
            className: classNames(sty.slotTargetCancelButtonLabel)
          })}
        </button>

        <button
          data-plasmic-name={"submitButton"}
          data-plasmic-override={overrides.submitButton}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.submitButton
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Submit",
            value: args.submitButtonLabel,
            className: classNames(sty.slotTargetSubmitButtonLabel)
          })}
        </button>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "contentWrapper",
    "actionsWrapper",
    "cancelButton",
    "submitButton"
  ],

  header: ["header"],
  contentWrapper: ["contentWrapper"],
  actionsWrapper: ["actionsWrapper", "cancelButton", "submitButton"],
  cancelButton: ["cancelButton"],
  submitButton: ["submitButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDialog__ArgProps,
      internalVariantPropNames: PlasmicDialog__VariantProps
    });

    return PlasmicDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDialog";
  } else {
    func.displayName = `PlasmicDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicDialog = Object.assign(
  // Top-level PlasmicDialog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    actionsWrapper: makeNodeComponent("actionsWrapper"),
    cancelButton: makeNodeComponent("cancelButton"),
    submitButton: makeNodeComponent("submitButton"),
    // Metadata about props expected for PlasmicDialog
    internalVariantProps: PlasmicDialog__VariantProps,
    internalArgProps: PlasmicDialog__ArgProps
  }
);

export default PlasmicDialog;
/* prettier-ignore-end */
