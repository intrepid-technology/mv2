// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 2YXWRU8_5CaO
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TagPartnerC from "../../TagPartnerC"; // plasmic-import: VbmQFgDzT6/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import Accordion from "../../Accordion"; // plasmic-import: azR0jnXzDL/component
import ServiceFeatureB from "../../ServiceFeatureB"; // plasmic-import: WvXgBKm3bX/component
import ServiceFeatureCard from "../../ServiceFeatureCard"; // plasmic-import: NNvsnnDA0J/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: KmwWxjrE8L/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicServicedetail.module.css"; // plasmic-import: 2YXWRU8_5CaO/css
import Icon54Icon from "./icons/PlasmicIcon__Icon54"; // plasmic-import: krveNVXkj/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: yu83kfpl6j/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: JricKendl/icon
import SectionDividerIcon from "./icons/PlasmicIcon__SectionDivider"; // plasmic-import: UzRMlTHWYLl/icon
import CellDividerIcon from "./icons/PlasmicIcon__CellDivider"; // plasmic-import: n34VWl8XDZ4/icon
import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: 2qZ8N9GyOr/icon
import ShareIcon from "./icons/PlasmicIcon__Share"; // plasmic-import: WvwVMYuHRy/icon

export const PlasmicServicedetail__VariantProps = new Array();

export const PlasmicServicedetail__ArgProps = new Array(
  "serviceTitle",
  "serviceCompanyName",
  "serviceAmount",
  "serviceName",
  "serviceDescription",
  "category",
  "subCategory"
);

function PlasmicServicedetail__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"serviceDetailCheckoutPageParent"}
            data-plasmic-override={overrides.serviceDetailCheckoutPageParent}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.serviceDetailCheckoutPageParent
            )}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"serviceDetailOverviewParent"}
              data-plasmic-override={overrides.serviceDetailOverviewParent}
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.serviceDetailOverviewParent
              )}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceHeadlineParent"}
                data-plasmic-override={overrides.serviceHeadlineParent}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.serviceHeadlineParent
                )}
              >
                <div
                  data-plasmic-name={"headline"}
                  data-plasmic-override={overrides.headline}
                  className={classNames(projectcss.all, sty.headline)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zfdEw)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Title of the service sold on this page",
                      value: args.serviceTitle,
                      className: classNames(sty.slotTargetServiceTitle)
                    })}
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"subheading"}
                  data-plasmic-override={overrides.subheading}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.subheading)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pNTwY)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Enter some text",
                      value: args.category,
                      className: classNames(sty.slotTargetCategory)
                    })}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___1TWq1)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "/ Enter some text",
                      value: args.subCategory,
                      className: classNames(sty.slotTargetSubCategory)
                    })}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headlineNamePriceParent"}
                  data-plasmic-override={overrides.headlineNamePriceParent}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.headlineNamePriceParent
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"companyNamePriceParent2"}
                    data-plasmic-override={overrides.companyNamePriceParent2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.companyNamePriceParent2
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cQnBt)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kqzI
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kWxw1
                          )}
                        >
                          <div
                            data-plasmic-name={"serviceCompanyName2"}
                            data-plasmic-override={
                              overrides.serviceCompanyName2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.serviceCompanyName2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___9Puij
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9AYq
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents: "Company name",
                                  value: args.serviceCompanyName,
                                  className: classNames(
                                    sty.slotTargetServiceCompanyName
                                  )
                                })}
                              </div>
                            </div>
                          </div>
                        </p.Stack>
                      </div>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"companyVerificationBadgesParent3"}
                    data-plasmic-override={
                      overrides.companyVerificationBadgesParent3
                    }
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.companyVerificationBadgesParent3
                    )}
                  >
                    <TagPartnerC
                      className={classNames(
                        "__wab_instance",
                        sty.tagPartnerC___5Bk4R
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"companyIsVerified3"}
                      data-plasmic-override={overrides.companyIsVerified3}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.companyIsVerified3
                      )}
                    >
                      <Icon54Icon
                        className={classNames(projectcss.all, sty.svg___0Zifo)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fjFyq
                        )}
                      >
                        {"Verified"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceImageBlock"}
                data-plasmic-override={overrides.serviceImageBlock}
                hasGap={true}
                className={classNames(projectcss.all, sty.serviceImageBlock)}
              >
                <img
                  data-plasmic-name={"serviceHeroImage"}
                  data-plasmic-override={overrides.serviceHeroImage}
                  alt={""}
                  className={classNames(
                    projectcss.all,
                    projectcss.img,
                    sty.serviceHeroImage
                  )}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ew4Af)}
                >
                  <img
                    data-plasmic-name={"serviceImageOne"}
                    data-plasmic-override={overrides.serviceImageOne}
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.serviceImageOne
                    )}
                  />

                  <img
                    data-plasmic-name={"serviceImageTwo"}
                    data-plasmic-override={overrides.serviceImageTwo}
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.serviceImageTwo
                    )}
                  />

                  <img
                    data-plasmic-name={"serviceImageThree"}
                    data-plasmic-override={overrides.serviceImageThree}
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.serviceImageThree
                    )}
                  />

                  <img
                    data-plasmic-name={"serviceImageFour"}
                    data-plasmic-override={overrides.serviceImageFour}
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.serviceImageFour
                    )}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"serviceFeaturesWrapper"}
                  data-plasmic-override={overrides.serviceFeaturesWrapper}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.serviceFeaturesWrapper
                  )}
                >
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__jV9
                    )}
                    color={"brand"}
                    type={"ghost"}
                  >
                    {"UX Design"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__z31Jf
                    )}
                    color={"brand"}
                    type={"ghost"}
                  >
                    {"Design system"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__zNQiS
                    )}
                    color={"brand"}
                    type={"ghost"}
                  >
                    {"Mobile app"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__uh9Vp
                    )}
                    color={"brand"}
                    type={"ghost"}
                  >
                    {"Web app"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__coqtM
                    )}
                    color={"brand"}
                    type={"ghost"}
                  >
                    {"E-commerce"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__qkcBh
                    )}
                    color={"brand"}
                    type={"ghost"}
                  >
                    {"Fashion"}
                  </ChipBadgeDisplay>
                </p.Stack>

                <SectionDividerIcon
                  className={classNames(projectcss.all, sty.svg__nw7Wz)}
                  role={"img"}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceOverviewParent"}
                data-plasmic-override={overrides.serviceOverviewParent}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.serviceOverviewParent
                )}
              >
                <div
                  data-plasmic-name={"descriptionBlock"}
                  data-plasmic-override={overrides.descriptionBlock}
                  className={classNames(projectcss.all, sty.descriptionBlock)}
                >
                  <Accordion
                    data-plasmic-name={"descriptionAccordion"}
                    data-plasmic-override={overrides.descriptionAccordion}
                    className={classNames(
                      "__wab_instance",
                      sty.descriptionAccordion
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z3E6R
                      )}
                    >
                      {"Description"}
                    </div>
                  </Accordion>
                </div>

                <div
                  data-plasmic-name={"processBlock"}
                  data-plasmic-override={overrides.processBlock}
                  className={classNames(projectcss.all, sty.processBlock)}
                >
                  <Accordion
                    data-plasmic-name={"processAccordion"}
                    data-plasmic-override={overrides.processAccordion}
                    className={classNames(
                      "__wab_instance",
                      sty.processAccordion
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zVRh
                      )}
                    >
                      {"Process"}
                    </div>
                  </Accordion>
                </div>

                <div
                  data-plasmic-name={"featuresBlock"}
                  data-plasmic-override={overrides.featuresBlock}
                  className={classNames(projectcss.all, sty.featuresBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__gH068
                    )}
                    content={
                      <div
                        data-plasmic-name={"serviceFeaturesOverview"}
                        data-plasmic-override={
                          overrides.serviceFeaturesOverview
                        }
                        className={classNames(
                          projectcss.all,
                          sty.serviceFeaturesOverview
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tu3Wz
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vbPe2
                              )}
                            >
                              <ServiceFeatureB
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceFeatureB__pEEfd
                                )}
                              />

                              <ServiceFeatureB
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceFeatureB__m2D7D
                                )}
                              />

                              <ServiceFeatureB
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceFeatureB__mXxAq
                                )}
                              />

                              <ServiceFeatureB
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceFeatureB__oSaJy
                                )}
                              />

                              <ServiceFeatureB
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceFeatureB___4Tn6P
                                )}
                              />

                              <ServiceFeatureB
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceFeatureB__cCzNv
                                )}
                              />

                              <ServiceFeatureB
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceFeatureB__kDzHd
                                )}
                              />

                              <ServiceFeatureB
                                className={classNames(
                                  "__wab_instance",
                                  sty.serviceFeatureB__sx1Di
                                )}
                              />
                            </p.Stack>
                          </p.Stack>
                        ) : null}
                      </div>
                    }
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pnud8
                      )}
                    >
                      {"Features"}
                    </div>
                  </Accordion>
                </div>

                <div
                  data-plasmic-name={"contentBlock"}
                  data-plasmic-override={overrides.contentBlock}
                  className={classNames(projectcss.all, sty.contentBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__aijA
                    )}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kHmO0
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nKBwa
                            )}
                          >
                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard___5LeY
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__u2SvN
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__ygnn
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__htoeu
                              )}
                            />
                          </p.Stack>
                        ) : null}
                      </div>
                    }
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wMb
                      )}
                    >
                      {"Content"}
                    </div>
                  </Accordion>
                </div>

                <div
                  data-plasmic-name={"methodBlock"}
                  data-plasmic-override={overrides.methodBlock}
                  className={classNames(projectcss.all, sty.methodBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__cHnL
                    )}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1Ese0
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bGavK
                            )}
                          >
                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__pMb5
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__aZ5Cb
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard___8R3Xk
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__uIfZx
                              )}
                            />
                          </p.Stack>
                        ) : null}
                      </div>
                    }
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mG8P
                      )}
                    >
                      {"Method"}
                    </div>
                  </Accordion>
                </div>

                <div
                  data-plasmic-name={"toolsBlock"}
                  data-plasmic-override={overrides.toolsBlock}
                  className={classNames(projectcss.all, sty.toolsBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__rHzZp
                    )}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___71ORb
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ttyHw
                            )}
                          >
                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add2"}
                                  data-plasmic-override={overrides.add2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add2
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__d2MuW
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete2"}
                                  data-plasmic-override={overrides.delete2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete2
                                  )}
                                  role={"img"}
                                />
                              }
                            />

                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add3"}
                                  data-plasmic-override={overrides.add3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add3
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__scZc5
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete3"}
                                  data-plasmic-override={overrides.delete3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete3
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Design system"}
                            </ChipBadgeDisplay>

                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add4"}
                                  data-plasmic-override={overrides.add4}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add4
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__eQnOv
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete4"}
                                  data-plasmic-override={overrides.delete4}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete4
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Mobile app"}
                            </ChipBadgeDisplay>

                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add5"}
                                  data-plasmic-override={overrides.add5}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add5
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__ptZcb
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete5"}
                                  data-plasmic-override={overrides.delete5}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete5
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Web app"}
                            </ChipBadgeDisplay>

                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add6"}
                                  data-plasmic-override={overrides.add6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add6
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__vlISe
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete6"}
                                  data-plasmic-override={overrides.delete6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete6
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"E-commerce"}
                            </ChipBadgeDisplay>
                          </p.Stack>
                        ) : null}
                      </div>
                    }
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oi7S0
                      )}
                    >
                      {"Tools"}
                    </div>
                  </Accordion>
                </div>

                <div
                  data-plasmic-name={"formatBlock"}
                  data-plasmic-override={overrides.formatBlock}
                  className={classNames(projectcss.all, sty.formatBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__aOnLc
                    )}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bEXt
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__geArL
                            )}
                          >
                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add7"}
                                  data-plasmic-override={overrides.add7}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add7
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__vLjl
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete7"}
                                  data-plasmic-override={overrides.delete7}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete7
                                  )}
                                  role={"img"}
                                />
                              }
                            />

                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add8"}
                                  data-plasmic-override={overrides.add8}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add8
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__lpjJ
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete8"}
                                  data-plasmic-override={overrides.delete8}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete8
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Design system"}
                            </ChipBadgeDisplay>

                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add9"}
                                  data-plasmic-override={overrides.add9}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add9
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__cFnYq
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete9"}
                                  data-plasmic-override={overrides.delete9}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete9
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Mobile app"}
                            </ChipBadgeDisplay>

                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add10"}
                                  data-plasmic-override={overrides.add10}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add10
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__yphAv
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete10"}
                                  data-plasmic-override={overrides.delete10}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete10
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Web app"}
                            </ChipBadgeDisplay>

                            <ChipBadgeDisplay
                              addIcon={
                                <PlusBoldIcon
                                  data-plasmic-name={"add11"}
                                  data-plasmic-override={overrides.add11}
                                  className={classNames(
                                    projectcss.all,
                                    sty.add11
                                  )}
                                  role={"img"}
                                />
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.chipBadgeDisplay__sedp1
                              )}
                              deleteIcon={
                                <Icon170Icon
                                  data-plasmic-name={"delete11"}
                                  data-plasmic-override={overrides.delete11}
                                  className={classNames(
                                    projectcss.all,
                                    sty.delete11
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"E-commerce"}
                            </ChipBadgeDisplay>
                          </p.Stack>
                        ) : null}
                      </div>
                    }
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cH8Eb
                      )}
                    >
                      {"Format"}
                    </div>
                  </Accordion>
                </div>

                <div
                  data-plasmic-name={"requirementsBlock"}
                  data-plasmic-override={overrides.requirementsBlock}
                  className={classNames(projectcss.all, sty.requirementsBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__dwCtl
                    )}
                    content={
                      true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__t9EAw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5OzNn
                            )}
                          >
                            {
                              "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Dictum porttitor faucibus viverra eget nibh aliquam. Venenatis maecenas at diam amet. Ac odio vitae morbi fermentum, morbi odio leo volutpat. Fringilla habitant nibh placerat rhoncus, turpis. Urna ipsum purus nam sapien faucibus.\n\nSit egestas faucibus mauris, lorem. Massa ultrices netus velit tempor ligula nec egestas. Netus ullamcorper varius aliquam quam ut at. Ridiculus scelerisque nunc turpis mattis malesuada fringilla viverra nunc. Turpis."
                            }
                          </div>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hsM4C
                            )}
                          >
                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__ji9Wp
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__pw17
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__mpKj
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__ze4CR
                              )}
                            />
                          </p.Stack>
                        </div>
                      ) : null
                    }
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ucMu5
                      )}
                    >
                      {"Requirements"}
                    </div>
                  </Accordion>
                </div>

                <div
                  data-plasmic-name={"termsBlock"}
                  data-plasmic-override={overrides.termsBlock}
                  className={classNames(projectcss.all, sty.termsBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__fUsZa
                    )}
                    content={
                      true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qitb4
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a0JSz
                            )}
                          >
                            {
                              "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Dictum porttitor faucibus viverra eget nibh aliquam. Venenatis maecenas at diam amet. Ac odio vitae morbi fermentum, morbi odio leo volutpat. Fringilla habitant nibh placerat rhoncus, turpis. Urna ipsum purus nam sapien faucibus.\n\nSit egestas faucibus mauris, lorem. Massa ultrices netus velit tempor ligula nec egestas. Netus ullamcorper varius aliquam quam ut at. Ridiculus scelerisque nunc turpis mattis malesuada fringilla viverra nunc. Turpis."
                            }
                          </div>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__n9Y3U
                            )}
                          >
                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__fl20H
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard___7UM36
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard___8Gyw4
                              )}
                            />

                            <ServiceFeatureCard
                              className={classNames(
                                "__wab_instance",
                                sty.serviceFeatureCard__qqDx
                              )}
                            />
                          </p.Stack>
                        </div>
                      ) : null
                    }
                    size={
                      hasVariant(globalVariants, "screen", "iphone12ProMax")
                        ? "small"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__prl3O
                      )}
                    >
                      {"Terms"}
                    </div>
                  </Accordion>
                </div>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"serviceOrderParent"}
              data-plasmic-override={overrides.serviceOrderParent}
              hasGap={true}
              className={classNames(projectcss.all, sty.serviceOrderParent)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceCheckoutHeader"}
                data-plasmic-override={overrides.serviceCheckoutHeader}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.serviceCheckoutHeader
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"serviceDescriptionParent"}
                  data-plasmic-override={overrides.serviceDescriptionParent}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.serviceDescriptionParent
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"headlineNamePriceVerificationParent"}
                    data-plasmic-override={
                      overrides.headlineNamePriceVerificationParent
                    }
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.headlineNamePriceVerificationParent
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"companyNamePriceParent"}
                      data-plasmic-override={overrides.companyNamePriceParent}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.companyNamePriceParent
                      )}
                    >
                      <div
                        data-plasmic-name={"servicePrice"}
                        data-plasmic-override={overrides.servicePrice}
                        className={classNames(projectcss.all, sty.servicePrice)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uOdZo
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s6WbX
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "10,000",
                              value: args.serviceAmount,
                              className: classNames(sty.slotTargetServiceAmount)
                            })}
                          </div>
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <div
                    data-plasmic-name={"serviceNameTitle"}
                    data-plasmic-override={overrides.serviceNameTitle}
                    className={classNames(projectcss.all, sty.serviceNameTitle)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m2W9E)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aexTm
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Service name",
                          value: args.serviceName,
                          className: classNames(sty.slotTargetServiceName)
                        })}
                      </div>
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"serviceShortDescription"}
                    data-plasmic-override={overrides.serviceShortDescription}
                    className={classNames(
                      projectcss.all,
                      sty.serviceShortDescription
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mjS0B)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents:
                          "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, na",
                        value: args.serviceDescription,
                        className: classNames(sty.slotTargetServiceDescription)
                      })}
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>

              <CellDividerIcon
                className={classNames(projectcss.all, sty.svg__u19Rk)}
                role={"img"}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"companyDescriptionParent"}
                data-plasmic-override={overrides.companyDescriptionParent}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.companyDescriptionParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headlineCompanyParent"}
                  data-plasmic-override={overrides.headlineCompanyParent}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.headlineCompanyParent
                  )}
                >
                  <div
                    data-plasmic-name={"serviceCompanyLogo"}
                    data-plasmic-override={overrides.serviceCompanyLogo}
                    className={classNames(
                      projectcss.all,
                      sty.serviceCompanyLogo
                    )}
                  >
                    <UserAvatar
                      data-plasmic-name={"userAvatar"}
                      data-plasmic-override={overrides.userAvatar}
                      className={classNames("__wab_instance", sty.userAvatar)}
                      navUserAvatar32={
                        <img
                          data-plasmic-name={"navUserAvatar32"}
                          data-plasmic-override={overrides.navUserAvatar32}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.navUserAvatar32
                          )}
                          src={"/plasmic/market_v_2/images/image4.png"}
                        />
                      }
                      size={"_32"}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"companyNamePriceParent3"}
                    data-plasmic-override={overrides.companyNamePriceParent3}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.companyNamePriceParent3
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mGz7R)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xtsDr
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qYg99
                          )}
                        >
                          <div
                            data-plasmic-name={"serviceCompanyName3"}
                            data-plasmic-override={
                              overrides.serviceCompanyName3
                            }
                            className={classNames(
                              projectcss.all,
                              sty.serviceCompanyName3
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tSmZz
                              )}
                            >
                              {"Company name"}
                            </div>
                          </div>
                        </p.Stack>
                      </div>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"companyVerificationBadgesParent4"}
                    data-plasmic-override={
                      overrides.companyVerificationBadgesParent4
                    }
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.companyVerificationBadgesParent4
                    )}
                  >
                    <TagPartnerC
                      className={classNames(
                        "__wab_instance",
                        sty.tagPartnerC__i6HzK
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"companyIsVerified4"}
                      data-plasmic-override={overrides.companyIsVerified4}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.companyIsVerified4
                      )}
                    >
                      <Icon54Icon
                        className={classNames(projectcss.all, sty.svg__jrz1R)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___133Eb
                        )}
                      >
                        {"Verified"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <div
                  data-plasmic-name={"companyShortDescription"}
                  data-plasmic-override={overrides.companyShortDescription}
                  className={classNames(
                    projectcss.all,
                    sty.companyShortDescription
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pxCD
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, na"
                    }
                  </div>
                </div>
              </p.Stack>

              <CellDividerIcon
                className={classNames(projectcss.all, sty.svg__oyzAe)}
                role={"img"}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceCheckoutButtons"}
                data-plasmic-override={overrides.serviceCheckoutButtons}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.serviceCheckoutButtons
                )}
              >
                <ButtonPrimary
                  data-plasmic-name={"orderButton"}
                  data-plasmic-override={overrides.orderButton}
                  className={classNames("__wab_instance", sty.orderButton)}
                  color={"primary"}
                  width={"_360"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3EPlj
                    )}
                  >
                    {"Order now"}
                  </div>
                </ButtonPrimary>

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__ma8Uo
                  )}
                  type={"outline"}
                  width={"_360"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tOLxW
                    )}
                  >
                    {"Add to brief"}
                  </div>
                </ButtonPrimary>

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__gzMur
                  )}
                  type={"ghost"}
                  width={"_360"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rgQzD
                    )}
                  >
                    {"Request quote"}
                  </div>
                </ButtonPrimary>

                <p.Stack
                  as={"button"}
                  data-plasmic-name={"save"}
                  data-plasmic-override={overrides.save}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    sty.save
                  )}
                >
                  <BookmarkIcon
                    data-plasmic-name={"bookmark"}
                    data-plasmic-override={overrides.bookmark}
                    className={classNames(projectcss.all, sty.bookmark)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eawQa
                    )}
                  >
                    {"Save"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"button"}
                  data-plasmic-name={"share"}
                  data-plasmic-override={overrides.share}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    sty.share
                  )}
                >
                  <ShareIcon
                    data-plasmic-name={"svgShare"}
                    data-plasmic-override={overrides.svgShare}
                    className={classNames(projectcss.all, sty.svgShare)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ffOr8
                    )}
                  >
                    {"Share"}
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "serviceDetailCheckoutPageParent",
    "serviceDetailOverviewParent",
    "serviceHeadlineParent",
    "headline",
    "subheading",
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3",
    "serviceImageBlock",
    "serviceHeroImage",
    "serviceImageOne",
    "serviceImageTwo",
    "serviceImageThree",
    "serviceImageFour",
    "serviceFeaturesWrapper",
    "serviceOverviewParent",
    "descriptionBlock",
    "descriptionAccordion",
    "processBlock",
    "processAccordion",
    "featuresBlock",
    "serviceFeaturesOverview",
    "contentBlock",
    "methodBlock",
    "toolsBlock",
    "add2",
    "delete2",
    "add3",
    "delete3",
    "add4",
    "delete4",
    "add5",
    "delete5",
    "add6",
    "delete6",
    "formatBlock",
    "add7",
    "delete7",
    "add8",
    "delete8",
    "add9",
    "delete9",
    "add10",
    "delete10",
    "add11",
    "delete11",
    "requirementsBlock",
    "termsBlock",
    "serviceOrderParent",
    "serviceCheckoutHeader",
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceNameTitle",
    "serviceShortDescription",
    "companyDescriptionParent",
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4",
    "companyShortDescription",
    "serviceCheckoutButtons",
    "orderButton",
    "save",
    "bookmark",
    "share",
    "svgShare"
  ],

  serviceDetailCheckoutPageParent: [
    "serviceDetailCheckoutPageParent",
    "serviceDetailOverviewParent",
    "serviceHeadlineParent",
    "headline",
    "subheading",
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3",
    "serviceImageBlock",
    "serviceHeroImage",
    "serviceImageOne",
    "serviceImageTwo",
    "serviceImageThree",
    "serviceImageFour",
    "serviceFeaturesWrapper",
    "serviceOverviewParent",
    "descriptionBlock",
    "descriptionAccordion",
    "processBlock",
    "processAccordion",
    "featuresBlock",
    "serviceFeaturesOverview",
    "contentBlock",
    "methodBlock",
    "toolsBlock",
    "add2",
    "delete2",
    "add3",
    "delete3",
    "add4",
    "delete4",
    "add5",
    "delete5",
    "add6",
    "delete6",
    "formatBlock",
    "add7",
    "delete7",
    "add8",
    "delete8",
    "add9",
    "delete9",
    "add10",
    "delete10",
    "add11",
    "delete11",
    "requirementsBlock",
    "termsBlock",
    "serviceOrderParent",
    "serviceCheckoutHeader",
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceNameTitle",
    "serviceShortDescription",
    "companyDescriptionParent",
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4",
    "companyShortDescription",
    "serviceCheckoutButtons",
    "orderButton",
    "save",
    "bookmark",
    "share",
    "svgShare"
  ],

  serviceDetailOverviewParent: [
    "serviceDetailOverviewParent",
    "serviceHeadlineParent",
    "headline",
    "subheading",
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3",
    "serviceImageBlock",
    "serviceHeroImage",
    "serviceImageOne",
    "serviceImageTwo",
    "serviceImageThree",
    "serviceImageFour",
    "serviceFeaturesWrapper",
    "serviceOverviewParent",
    "descriptionBlock",
    "descriptionAccordion",
    "processBlock",
    "processAccordion",
    "featuresBlock",
    "serviceFeaturesOverview",
    "contentBlock",
    "methodBlock",
    "toolsBlock",
    "add2",
    "delete2",
    "add3",
    "delete3",
    "add4",
    "delete4",
    "add5",
    "delete5",
    "add6",
    "delete6",
    "formatBlock",
    "add7",
    "delete7",
    "add8",
    "delete8",
    "add9",
    "delete9",
    "add10",
    "delete10",
    "add11",
    "delete11",
    "requirementsBlock",
    "termsBlock"
  ],

  serviceHeadlineParent: [
    "serviceHeadlineParent",
    "headline",
    "subheading",
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3"
  ],

  headline: ["headline"],
  subheading: ["subheading"],
  headlineNamePriceParent: [
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3"
  ],

  companyNamePriceParent2: ["companyNamePriceParent2", "serviceCompanyName2"],
  serviceCompanyName2: ["serviceCompanyName2"],
  companyVerificationBadgesParent3: [
    "companyVerificationBadgesParent3",
    "companyIsVerified3"
  ],

  companyIsVerified3: ["companyIsVerified3"],
  serviceImageBlock: [
    "serviceImageBlock",
    "serviceHeroImage",
    "serviceImageOne",
    "serviceImageTwo",
    "serviceImageThree",
    "serviceImageFour",
    "serviceFeaturesWrapper"
  ],

  serviceHeroImage: ["serviceHeroImage"],
  serviceImageOne: ["serviceImageOne"],
  serviceImageTwo: ["serviceImageTwo"],
  serviceImageThree: ["serviceImageThree"],
  serviceImageFour: ["serviceImageFour"],
  serviceFeaturesWrapper: ["serviceFeaturesWrapper"],
  serviceOverviewParent: [
    "serviceOverviewParent",
    "descriptionBlock",
    "descriptionAccordion",
    "processBlock",
    "processAccordion",
    "featuresBlock",
    "serviceFeaturesOverview",
    "contentBlock",
    "methodBlock",
    "toolsBlock",
    "add2",
    "delete2",
    "add3",
    "delete3",
    "add4",
    "delete4",
    "add5",
    "delete5",
    "add6",
    "delete6",
    "formatBlock",
    "add7",
    "delete7",
    "add8",
    "delete8",
    "add9",
    "delete9",
    "add10",
    "delete10",
    "add11",
    "delete11",
    "requirementsBlock",
    "termsBlock"
  ],

  descriptionBlock: ["descriptionBlock", "descriptionAccordion"],
  descriptionAccordion: ["descriptionAccordion"],
  processBlock: ["processBlock", "processAccordion"],
  processAccordion: ["processAccordion"],
  featuresBlock: ["featuresBlock", "serviceFeaturesOverview"],
  serviceFeaturesOverview: ["serviceFeaturesOverview"],
  contentBlock: ["contentBlock"],
  methodBlock: ["methodBlock"],
  toolsBlock: [
    "toolsBlock",
    "add2",
    "delete2",
    "add3",
    "delete3",
    "add4",
    "delete4",
    "add5",
    "delete5",
    "add6",
    "delete6"
  ],

  add2: ["add2"],
  delete2: ["delete2"],
  add3: ["add3"],
  delete3: ["delete3"],
  add4: ["add4"],
  delete4: ["delete4"],
  add5: ["add5"],
  delete5: ["delete5"],
  add6: ["add6"],
  delete6: ["delete6"],
  formatBlock: [
    "formatBlock",
    "add7",
    "delete7",
    "add8",
    "delete8",
    "add9",
    "delete9",
    "add10",
    "delete10",
    "add11",
    "delete11"
  ],

  add7: ["add7"],
  delete7: ["delete7"],
  add8: ["add8"],
  delete8: ["delete8"],
  add9: ["add9"],
  delete9: ["delete9"],
  add10: ["add10"],
  delete10: ["delete10"],
  add11: ["add11"],
  delete11: ["delete11"],
  requirementsBlock: ["requirementsBlock"],
  termsBlock: ["termsBlock"],
  serviceOrderParent: [
    "serviceOrderParent",
    "serviceCheckoutHeader",
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceNameTitle",
    "serviceShortDescription",
    "companyDescriptionParent",
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4",
    "companyShortDescription",
    "serviceCheckoutButtons",
    "orderButton",
    "save",
    "bookmark",
    "share",
    "svgShare"
  ],

  serviceCheckoutHeader: [
    "serviceCheckoutHeader",
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceNameTitle",
    "serviceShortDescription"
  ],

  serviceDescriptionParent: [
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceNameTitle",
    "serviceShortDescription"
  ],

  headlineNamePriceVerificationParent: [
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice"
  ],

  companyNamePriceParent: ["companyNamePriceParent", "servicePrice"],
  servicePrice: ["servicePrice"],
  serviceNameTitle: ["serviceNameTitle"],
  serviceShortDescription: ["serviceShortDescription"],
  companyDescriptionParent: [
    "companyDescriptionParent",
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4",
    "companyShortDescription"
  ],

  headlineCompanyParent: [
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4"
  ],

  serviceCompanyLogo: ["serviceCompanyLogo", "userAvatar", "navUserAvatar32"],
  userAvatar: ["userAvatar", "navUserAvatar32"],
  navUserAvatar32: ["navUserAvatar32"],
  companyNamePriceParent3: ["companyNamePriceParent3", "serviceCompanyName3"],
  serviceCompanyName3: ["serviceCompanyName3"],
  companyVerificationBadgesParent4: [
    "companyVerificationBadgesParent4",
    "companyIsVerified4"
  ],

  companyIsVerified4: ["companyIsVerified4"],
  companyShortDescription: ["companyShortDescription"],
  serviceCheckoutButtons: [
    "serviceCheckoutButtons",
    "orderButton",
    "save",
    "bookmark",
    "share",
    "svgShare"
  ],

  orderButton: ["orderButton"],
  save: ["save", "bookmark"],
  bookmark: ["bookmark"],
  share: ["share", "svgShare"],
  svgShare: ["svgShare"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServicedetail__ArgProps,
      internalVariantPropNames: PlasmicServicedetail__VariantProps
    });

    return PlasmicServicedetail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServicedetail";
  } else {
    func.displayName = `PlasmicServicedetail.${nodeName}`;
  }
  return func;
}

export const PlasmicServicedetail = Object.assign(
  // Top-level PlasmicServicedetail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    serviceDetailCheckoutPageParent: makeNodeComponent(
      "serviceDetailCheckoutPageParent"
    ),

    serviceDetailOverviewParent: makeNodeComponent(
      "serviceDetailOverviewParent"
    ),

    serviceHeadlineParent: makeNodeComponent("serviceHeadlineParent"),
    headline: makeNodeComponent("headline"),
    subheading: makeNodeComponent("subheading"),
    headlineNamePriceParent: makeNodeComponent("headlineNamePriceParent"),
    companyNamePriceParent2: makeNodeComponent("companyNamePriceParent2"),
    serviceCompanyName2: makeNodeComponent("serviceCompanyName2"),
    companyVerificationBadgesParent3: makeNodeComponent(
      "companyVerificationBadgesParent3"
    ),

    companyIsVerified3: makeNodeComponent("companyIsVerified3"),
    serviceImageBlock: makeNodeComponent("serviceImageBlock"),
    serviceHeroImage: makeNodeComponent("serviceHeroImage"),
    serviceImageOne: makeNodeComponent("serviceImageOne"),
    serviceImageTwo: makeNodeComponent("serviceImageTwo"),
    serviceImageThree: makeNodeComponent("serviceImageThree"),
    serviceImageFour: makeNodeComponent("serviceImageFour"),
    serviceFeaturesWrapper: makeNodeComponent("serviceFeaturesWrapper"),
    serviceOverviewParent: makeNodeComponent("serviceOverviewParent"),
    descriptionBlock: makeNodeComponent("descriptionBlock"),
    descriptionAccordion: makeNodeComponent("descriptionAccordion"),
    processBlock: makeNodeComponent("processBlock"),
    processAccordion: makeNodeComponent("processAccordion"),
    featuresBlock: makeNodeComponent("featuresBlock"),
    serviceFeaturesOverview: makeNodeComponent("serviceFeaturesOverview"),
    contentBlock: makeNodeComponent("contentBlock"),
    methodBlock: makeNodeComponent("methodBlock"),
    toolsBlock: makeNodeComponent("toolsBlock"),
    add2: makeNodeComponent("add2"),
    delete2: makeNodeComponent("delete2"),
    add3: makeNodeComponent("add3"),
    delete3: makeNodeComponent("delete3"),
    add4: makeNodeComponent("add4"),
    delete4: makeNodeComponent("delete4"),
    add5: makeNodeComponent("add5"),
    delete5: makeNodeComponent("delete5"),
    add6: makeNodeComponent("add6"),
    delete6: makeNodeComponent("delete6"),
    formatBlock: makeNodeComponent("formatBlock"),
    add7: makeNodeComponent("add7"),
    delete7: makeNodeComponent("delete7"),
    add8: makeNodeComponent("add8"),
    delete8: makeNodeComponent("delete8"),
    add9: makeNodeComponent("add9"),
    delete9: makeNodeComponent("delete9"),
    add10: makeNodeComponent("add10"),
    delete10: makeNodeComponent("delete10"),
    add11: makeNodeComponent("add11"),
    delete11: makeNodeComponent("delete11"),
    requirementsBlock: makeNodeComponent("requirementsBlock"),
    termsBlock: makeNodeComponent("termsBlock"),
    serviceOrderParent: makeNodeComponent("serviceOrderParent"),
    serviceCheckoutHeader: makeNodeComponent("serviceCheckoutHeader"),
    serviceDescriptionParent: makeNodeComponent("serviceDescriptionParent"),
    headlineNamePriceVerificationParent: makeNodeComponent(
      "headlineNamePriceVerificationParent"
    ),

    companyNamePriceParent: makeNodeComponent("companyNamePriceParent"),
    servicePrice: makeNodeComponent("servicePrice"),
    serviceNameTitle: makeNodeComponent("serviceNameTitle"),
    serviceShortDescription: makeNodeComponent("serviceShortDescription"),
    companyDescriptionParent: makeNodeComponent("companyDescriptionParent"),
    headlineCompanyParent: makeNodeComponent("headlineCompanyParent"),
    serviceCompanyLogo: makeNodeComponent("serviceCompanyLogo"),
    userAvatar: makeNodeComponent("userAvatar"),
    navUserAvatar32: makeNodeComponent("navUserAvatar32"),
    companyNamePriceParent3: makeNodeComponent("companyNamePriceParent3"),
    serviceCompanyName3: makeNodeComponent("serviceCompanyName3"),
    companyVerificationBadgesParent4: makeNodeComponent(
      "companyVerificationBadgesParent4"
    ),

    companyIsVerified4: makeNodeComponent("companyIsVerified4"),
    companyShortDescription: makeNodeComponent("companyShortDescription"),
    serviceCheckoutButtons: makeNodeComponent("serviceCheckoutButtons"),
    orderButton: makeNodeComponent("orderButton"),
    save: makeNodeComponent("save"),
    bookmark: makeNodeComponent("bookmark"),
    share: makeNodeComponent("share"),
    svgShare: makeNodeComponent("svgShare"),
    // Metadata about props expected for PlasmicServicedetail
    internalVariantProps: PlasmicServicedetail__VariantProps,
    internalArgProps: PlasmicServicedetail__ArgProps
  }
);

export default PlasmicServicedetail;
/* prettier-ignore-end */
