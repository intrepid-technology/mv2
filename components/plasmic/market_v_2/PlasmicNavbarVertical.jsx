// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: BUxP2uKOf9
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: jGROxaZ_Hy/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicNavbarVertical.module.css"; // plasmic-import: BUxP2uKOf9/css

export const PlasmicNavbarVertical__VariantProps = new Array(
  "_switch",
  "user",
  "size"
);

export const PlasmicNavbarVertical__ArgProps = new Array("linkText", "slot4");

function PlasmicNavbarVertical__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"sidePanel"}
      data-plasmic-override={overrides.sidePanel}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        sty.sidePanel,
        { [sty.sidePanel___switch]: hasVariant(variants, "_switch", "_switch") }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"navCard"}
        data-plasmic-override={overrides.navCard}
        hasGap={true}
        className={classNames(projectcss.all, sty.navCard, {
          [sty.navCard___switch]: hasVariant(variants, "_switch", "_switch"),
          [sty.navCard__user_partner]: hasVariant(variants, "user", "partner")
        })}
      >
        <div
          data-plasmic-name={"iconParent"}
          data-plasmic-override={overrides.iconParent}
          className={classNames(projectcss.all, sty.iconParent, {
            [sty.iconParent___switch]: hasVariant(
              variants,
              "_switch",
              "_switch"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <svg
                className={classNames(projectcss.all, sty.svg__rPi01)}
                role={"img"}
              />
            ),

            value: args.slot4
          })}
        </div>

        <div
          data-plasmic-name={"navLinkParent"}
          data-plasmic-override={overrides.navLinkParent}
          className={classNames(projectcss.all, sty.navLinkParent, {
            [sty.navLinkParent___switch]: hasVariant(
              variants,
              "_switch",
              "_switch"
            )
          })}
        >
          <NavLink
            data-plasmic-name={"navLink"}
            data-plasmic-override={overrides.navLink}
            className={classNames("__wab_instance", sty.navLink, {
              [sty.navLink___switch]: hasVariant(variants, "_switch", "_switch")
            })}
            linkText={p.renderPlasmicSlot({
              defaultContents: "click me",
              value: args.linkText,
              className: classNames(sty.slotTargetLinkText, {
                [sty.slotTargetLinkText___switch]: hasVariant(
                  variants,
                  "_switch",
                  "_switch"
                ),

                [sty.slotTargetLinkText__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              })
            })}
          />
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  sidePanel: ["sidePanel", "navCard", "iconParent", "navLinkParent", "navLink"],
  navCard: ["navCard", "iconParent", "navLinkParent", "navLink"],
  iconParent: ["iconParent"],
  navLinkParent: ["navLinkParent", "navLink"],
  navLink: ["navLink"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarVertical__ArgProps,
      internalVariantPropNames: PlasmicNavbarVertical__VariantProps
    });

    return PlasmicNavbarVertical__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sidePanel") {
    func.displayName = "PlasmicNavbarVertical";
  } else {
    func.displayName = `PlasmicNavbarVertical.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarVertical = Object.assign(
  // Top-level PlasmicNavbarVertical renders the root element
  makeNodeComponent("sidePanel"),
  {
    // Helper components rendering sub-elements
    navCard: makeNodeComponent("navCard"),
    iconParent: makeNodeComponent("iconParent"),
    navLinkParent: makeNodeComponent("navLinkParent"),
    navLink: makeNodeComponent("navLink"),
    // Metadata about props expected for PlasmicNavbarVertical
    internalVariantProps: PlasmicNavbarVertical__VariantProps,
    internalArgProps: PlasmicNavbarVertical__ArgProps
  }
);

export default PlasmicNavbarVertical;
/* prettier-ignore-end */
