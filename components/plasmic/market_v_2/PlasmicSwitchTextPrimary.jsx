// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 0ls58SUcEc
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SwitchPrimary from "../../SwitchPrimary"; // plasmic-import: M6TX-0ESZQ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSwitchTextPrimary.module.css"; // plasmic-import: 0ls58SUcEc/css

export const PlasmicSwitchTextPrimary__VariantProps = new Array("state");

export const PlasmicSwitchTextPrimary__ArgProps = new Array("text");

function PlasmicSwitchTextPrimary__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_checked]: hasVariant(variants, "state", "checked"),
        [sty.root__state_disabled]: hasVariant(variants, "state", "disabled")
      })}
    >
      <div
        data-plasmic-name={"textParent"}
        data-plasmic-override={overrides.textParent}
        className={classNames(defaultcss.all, sty.textParent)}
      >
        <div
          data-plasmic-name={"textSlotParent"}
          data-plasmic-override={overrides.textSlotParent}
          className={classNames(defaultcss.all, sty.textSlotParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.text,
            className: classNames(sty.slotText)
          })}
        </div>
      </div>

      <SwitchPrimary
        data-plasmic-name={"switchPrimary"}
        data-plasmic-override={overrides.switchPrimary}
        _switch={
          hasVariant(variants, "state", "checked") ? "_switch" : undefined
        }
        className={classNames("__wab_instance", sty.switchPrimary, {
          [sty.switchPrimary__state_checked]: hasVariant(
            variants,
            "state",
            "checked"
          ),

          [sty.switchPrimary__state_disabled]: hasVariant(
            variants,
            "state",
            "disabled"
          )
        })}
        disabled={
          hasVariant(variants, "state", "disabled") ? "closed" : undefined
        }
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "textParent", "textSlotParent", "switchPrimary"],
  textParent: ["textParent", "textSlotParent"],
  textSlotParent: ["textSlotParent"],
  switchPrimary: ["switchPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSwitchTextPrimary__ArgProps,
      internalVariantPropNames: PlasmicSwitchTextPrimary__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSwitchTextPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSwitchTextPrimary";
  } else {
    func.displayName = `PlasmicSwitchTextPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicSwitchTextPrimary = Object.assign(
  // Top-level PlasmicSwitchTextPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textParent: makeNodeComponent("textParent"),
    textSlotParent: makeNodeComponent("textSlotParent"),
    switchPrimary: makeNodeComponent("switchPrimary"),
    // Metadata about props expected for PlasmicSwitchTextPrimary
    internalVariantProps: PlasmicSwitchTextPrimary__VariantProps,
    internalArgProps: PlasmicSwitchTextPrimary__ArgProps
  }
);

export default PlasmicSwitchTextPrimary;
/* prettier-ignore-end */
