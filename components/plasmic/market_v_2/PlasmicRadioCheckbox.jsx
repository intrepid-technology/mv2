// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: TRRmUa9KEQ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicRadioCheckbox.module.css"; // plasmic-import: TRRmUa9KEQ/css
import Icon103Icon from "./icons/PlasmicIcon__Icon103"; // plasmic-import: 1-aKJYjqLG/icon

export const PlasmicRadioCheckbox__VariantProps = new Array("state", "size");

export const PlasmicRadioCheckbox__ArgProps = new Array("children");

function PlasmicRadioCheckbox__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__size__180]: hasVariant(variants, "size", "_180"),
          [sty.root__size__270]: hasVariant(variants, "size", "_270"),
          [sty.root__size__360]: hasVariant(variants, "size", "_360"),
          [sty.root__size__90]: hasVariant(variants, "size", "_90"),
          [sty.root__state_selected]: hasVariant(variants, "state", "selected")
        }
      )}
    >
      <div
        className={classNames(defaultcss.all, sty.box__xdan5, {
          [sty.box__size__270__xdan5Y2Fsu]: hasVariant(
            variants,
            "size",
            "_270"
          ),

          [sty.box__size__90__xdan5DxVnv]: hasVariant(variants, "size", "_90"),
          [sty.box__state_selected__xdan5Bi1Xj]: hasVariant(
            variants,
            "state",
            "selected"
          )
        })}
      >
        {(hasVariant(variants, "state", "selected") ? true : false) ? (
          <Icon103Icon
            className={classNames(defaultcss.all, sty.svg__z5We, {
              [sty.svg__state_selected__z5WeBi1Xj]: hasVariant(
                variants,
                "state",
                "selected"
              )
            })}
            role={"img"}
          />
        ) : null}
        {false ? (
          <svg
            className={classNames(defaultcss.all, sty.svg__cJiKx, {
              [sty.svg__state_selected__cJiKxbi1Xj]: hasVariant(
                variants,
                "state",
                "selected"
              )
            })}
            role={"img"}
          />
        ) : null}
      </div>

      <div
        className={classNames(defaultcss.all, sty.box__l835R, {
          [sty.box__size__90__l835RDxVnv]: hasVariant(variants, "size", "_90"),
          [sty.box__state_selected__l835Rbi1Xj]: hasVariant(
            variants,
            "state",
            "selected"
          )
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.box___6RQyQ, {
            [sty.box__size__90___6RQyQDxVnv]: hasVariant(
              variants,
              "size",
              "_90"
            ),

            [sty.box__state_selected___6RQyQbi1Xj]: hasVariant(
              variants,
              "state",
              "selected"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Feature",
            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__size__180]: hasVariant(
                variants,
                "size",
                "_180"
              ),

              [sty.slotChildren__size__270]: hasVariant(
                variants,
                "size",
                "_270"
              ),

              [sty.slotChildren__size__360]: hasVariant(
                variants,
                "size",
                "_360"
              ),

              [sty.slotChildren__size__90]: hasVariant(variants, "size", "_90"),
              [sty.slotChildren__state_selected]: hasVariant(
                variants,
                "state",
                "selected"
              )
            })
          })}
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRadioCheckbox__ArgProps,
      internalVariantPropNames: PlasmicRadioCheckbox__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicRadioCheckbox__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioCheckbox";
  } else {
    func.displayName = `PlasmicRadioCheckbox.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioCheckbox = Object.assign(
  // Top-level PlasmicRadioCheckbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicRadioCheckbox
    internalVariantProps: PlasmicRadioCheckbox__VariantProps,
    internalArgProps: PlasmicRadioCheckbox__ArgProps
  }
);

export default PlasmicRadioCheckbox;
/* prettier-ignore-end */
