// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: CFkqhe0NX3
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicHeadlineStatementServiceListing.module.css"; // plasmic-import: CFkqhe0NX3/css

export const PlasmicHeadlineStatementServiceListing__VariantProps = new Array();

export const PlasmicHeadlineStatementServiceListing__ArgProps = new Array(
  "children"
);

function PlasmicHeadlineStatementServiceListing__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__g9O1R
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__hF6UG
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Lets get started with your listing.",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeadlineStatementServiceListing__ArgProps,
      internalVariantPropNames:
        PlasmicHeadlineStatementServiceListing__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHeadlineStatementServiceListing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeadlineStatementServiceListing";
  } else {
    func.displayName = `PlasmicHeadlineStatementServiceListing.${nodeName}`;
  }
  return func;
}

export const PlasmicHeadlineStatementServiceListing = Object.assign(
  // Top-level PlasmicHeadlineStatementServiceListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicHeadlineStatementServiceListing
    internalVariantProps: PlasmicHeadlineStatementServiceListing__VariantProps,
    internalArgProps: PlasmicHeadlineStatementServiceListing__ArgProps
  }
);

export default PlasmicHeadlineStatementServiceListing;
/* prettier-ignore-end */
