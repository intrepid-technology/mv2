// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: o1fXsWwgdW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicButtonCirclePlusMinus.module.css"; // plasmic-import: o1fXsWwgdW/css
import CirclePlusIcon from "./icons/PlasmicIcon__CirclePlus"; // plasmic-import: bxdFeSUaP/icon
import CircleMinusIcon from "./icons/PlasmicIcon__CircleMinus"; // plasmic-import: VNJsxL6vUq/icon

export const PlasmicButtonCirclePlusMinus__VariantProps = new Array(
  "type",
  "size",
  "alignment"
);

export const PlasmicButtonCirclePlusMinus__ArgProps = new Array();

function PlasmicButtonCirclePlusMinus__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__alignment_left]: hasVariant(variants, "alignment", "left"),
          [sty.root__alignment_right]: hasVariant(
            variants,
            "alignment",
            "right"
          ),

          [sty.root__size__16]: hasVariant(variants, "size", "_16"),
          [sty.root__size__24]: hasVariant(variants, "size", "_24"),
          [sty.root__size__32]: hasVariant(variants, "size", "_32"),
          [sty.root__size__48]: hasVariant(variants, "size", "_48")
        }
      )}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(projectcss.all, sty.parent, {
          [sty.parent__alignment_left]: hasVariant(
            variants,
            "alignment",
            "left"
          ),

          [sty.parent__alignment_right]: hasVariant(
            variants,
            "alignment",
            "right"
          ),

          [sty.parent__size__16]: hasVariant(variants, "size", "_16"),
          [sty.parent__size__24]: hasVariant(variants, "size", "_24"),
          [sty.parent__size__32]: hasVariant(variants, "size", "_32"),
          [sty.parent__size__48]: hasVariant(variants, "size", "_48")
        })}
      >
        <div
          data-plasmic-name={"svgBackground"}
          data-plasmic-override={overrides.svgBackground}
          className={classNames(projectcss.all, sty.svgBackground, {
            [sty.svgBackground__alignment_left]: hasVariant(
              variants,
              "alignment",
              "left"
            ),

            [sty.svgBackground__alignment_right]: hasVariant(
              variants,
              "alignment",
              "right"
            ),

            [sty.svgBackground__size__16]: hasVariant(variants, "size", "_16"),
            [sty.svgBackground__size__24]: hasVariant(variants, "size", "_24"),
            [sty.svgBackground__size__32]: hasVariant(variants, "size", "_32"),
            [sty.svgBackground__size__48]: hasVariant(variants, "size", "_48")
          })}
        >
          <div
            data-plasmic-name={"svgParent"}
            data-plasmic-override={overrides.svgParent}
            className={classNames(projectcss.all, sty.svgParent, {
              [sty.svgParent__alignment_left]: hasVariant(
                variants,
                "alignment",
                "left"
              ),

              [sty.svgParent__size__16]: hasVariant(variants, "size", "_16"),
              [sty.svgParent__size__24]: hasVariant(variants, "size", "_24"),
              [sty.svgParent__size__32]: hasVariant(variants, "size", "_32"),
              [sty.svgParent__size__48]: hasVariant(variants, "size", "_48")
            })}
          >
            <p.PlasmicIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              PlasmicIconType={
                hasVariant(variants, "type", "decrement")
                  ? CircleMinusIcon
                  : CirclePlusIcon
              }
              className={classNames(projectcss.all, sty.svg, {
                [sty.svg__alignment_left]: hasVariant(
                  variants,
                  "alignment",
                  "left"
                ),

                [sty.svg__size__16]: hasVariant(variants, "size", "_16"),
                [sty.svg__size__18]: hasVariant(variants, "size", "_18"),
                [sty.svg__size__32]: hasVariant(variants, "size", "_32"),
                [sty.svg__size__48]: hasVariant(variants, "size", "_48"),
                [sty.svg__type_decrement]: hasVariant(
                  variants,
                  "type",
                  "decrement"
                ),

                [sty.svg__type_increment]: hasVariant(
                  variants,
                  "type",
                  "increment"
                )
              })}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </button>
  );
}

const PlasmicDescendants = {
  root: ["root", "parent", "svgBackground", "svgParent", "svg"],
  parent: ["parent", "svgBackground", "svgParent", "svg"],
  svgBackground: ["svgBackground", "svgParent", "svg"],
  svgParent: ["svgParent", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonCirclePlusMinus__ArgProps,
      internalVariantPropNames: PlasmicButtonCirclePlusMinus__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicButtonCirclePlusMinus__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonCirclePlusMinus";
  } else {
    func.displayName = `PlasmicButtonCirclePlusMinus.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonCirclePlusMinus = Object.assign(
  // Top-level PlasmicButtonCirclePlusMinus renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    svgBackground: makeNodeComponent("svgBackground"),
    svgParent: makeNodeComponent("svgParent"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicButtonCirclePlusMinus
    internalVariantProps: PlasmicButtonCirclePlusMinus__VariantProps,
    internalArgProps: PlasmicButtonCirclePlusMinus__ArgProps
  }
);

export default PlasmicButtonCirclePlusMinus;
/* prettier-ignore-end */
