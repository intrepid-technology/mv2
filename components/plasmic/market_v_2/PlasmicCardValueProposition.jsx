// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: oaNvs68b2k
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardValueProposition.module.css"; // plasmic-import: oaNvs68b2k/css
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: 4sI0jLkpS-/icon

export const PlasmicCardValueProposition__VariantProps = new Array(
  "background",
  "size"
);

export const PlasmicCardValueProposition__ArgProps = new Array(
  "svg",
  "headline",
  "textBody"
);

function PlasmicCardValueProposition__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__background_bgLightB]: hasVariant(
          variants,
          "background",
          "bgLightB"
        ),

        [sty.root__size__160]: hasVariant(variants, "size", "_160"),
        [sty.root__size__270]: hasVariant(variants, "size", "_270")
      })}
    >
      <div
        data-plasmic-name={"svgParentBg"}
        data-plasmic-override={overrides.svgParentBg}
        className={classNames(defaultcss.all, sty.svgParentBg, {
          [sty.svgParentBg__size__160]: hasVariant(variants, "size", "_160"),
          [sty.svgParentBg__size__270]: hasVariant(variants, "size", "_270")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Icon114Icon
              className={classNames(defaultcss.all, sty.svg__upruU)}
              role={"img"}
            />
          ),

          value: args.svg
        })}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <div
          data-plasmic-name={"headlineTextParent"}
          data-plasmic-override={overrides.headlineTextParent}
          className={classNames(defaultcss.all, sty.headlineTextParent, {
            [sty.headlineTextParent__size__160]: hasVariant(
              variants,
              "size",
              "_160"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Headline value proposition",
            value: args.headline,
            className: classNames(sty.slotTargetHeadline, {
              [sty.slotTargetHeadline__size__160]: hasVariant(
                variants,
                "size",
                "_160"
              ),

              [sty.slotTargetHeadline__size__270]: hasVariant(
                variants,
                "size",
                "_270"
              )
            })
          })}
        </div>

        <div
          data-plasmic-name={"textBodyParent"}
          data-plasmic-override={overrides.textBodyParent}
          className={classNames(defaultcss.all, sty.textBodyParent, {
            [sty.textBodyParent__size__160]: hasVariant(
              variants,
              "size",
              "_160"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "Description of the key value that we provide. it should only a few line",
            value: args.textBody,
            className: classNames(sty.slotTargetTextBody, {
              [sty.slotTargetTextBody__size__160]: hasVariant(
                variants,
                "size",
                "_160"
              ),

              [sty.slotTargetTextBody__size__270]: hasVariant(
                variants,
                "size",
                "_270"
              )
            })
          })}
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "svgParentBg",
    "parent",
    "headlineTextParent",
    "textBodyParent"
  ],

  svgParentBg: ["svgParentBg"],
  parent: ["parent", "headlineTextParent", "textBodyParent"],
  headlineTextParent: ["headlineTextParent"],
  textBodyParent: ["textBodyParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardValueProposition__ArgProps,
      internalVariantPropNames: PlasmicCardValueProposition__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCardValueProposition__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardValueProposition";
  } else {
    func.displayName = `PlasmicCardValueProposition.${nodeName}`;
  }
  return func;
}

export const PlasmicCardValueProposition = Object.assign(
  // Top-level PlasmicCardValueProposition renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svgParentBg: makeNodeComponent("svgParentBg"),
    parent: makeNodeComponent("parent"),
    headlineTextParent: makeNodeComponent("headlineTextParent"),
    textBodyParent: makeNodeComponent("textBodyParent"),
    // Metadata about props expected for PlasmicCardValueProposition
    internalVariantProps: PlasmicCardValueProposition__VariantProps,
    internalArgProps: PlasmicCardValueProposition__ArgProps
  }
);

export default PlasmicCardValueProposition;
/* prettier-ignore-end */
