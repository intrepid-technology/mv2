// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Kd4Jtco7N_
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicAlertCard.module.css"; // plasmic-import: Kd4Jtco7N_/css

export const PlasmicAlertCard__VariantProps = new Array();

export const PlasmicAlertCard__ArgProps = new Array("content");

function PlasmicAlertCard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"badgeWrapper"}
        data-plasmic-override={overrides.badgeWrapper}
        className={classNames(projectcss.all, sty.badgeWrapper)}
      >
        <ChipBadgeDisplay
          data-plasmic-name={"chipBadgeDisplay"}
          data-plasmic-override={overrides.chipBadgeDisplay}
          className={classNames("__wab_instance", sty.chipBadgeDisplay)}
          color={"brand"}
          type={"ghost"}
        >
          {"Beta"}
        </ChipBadgeDisplay>
      </div>

      <div
        data-plasmic-name={"contentWrapper"}
        data-plasmic-override={overrides.contentWrapper}
        className={classNames(projectcss.all, sty.contentWrapper)}
      >
        {p.renderPlasmicSlot({
          defaultContents:
            "Lorem ipsum dolor sit amet. Ut molestiae quasi At quos eveniet ea accusamus iste et voluptas earum non nisi deleniti ",
          value: args.content,
          className: classNames(sty.slotTargetContent)
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "badgeWrapper", "chipBadgeDisplay", "contentWrapper"],
  badgeWrapper: ["badgeWrapper", "chipBadgeDisplay"],
  chipBadgeDisplay: ["chipBadgeDisplay"],
  contentWrapper: ["contentWrapper"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAlertCard__ArgProps,
      internalVariantPropNames: PlasmicAlertCard__VariantProps
    });

    return PlasmicAlertCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAlertCard";
  } else {
    func.displayName = `PlasmicAlertCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAlertCard = Object.assign(
  // Top-level PlasmicAlertCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    badgeWrapper: makeNodeComponent("badgeWrapper"),
    chipBadgeDisplay: makeNodeComponent("chipBadgeDisplay"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    // Metadata about props expected for PlasmicAlertCard
    internalVariantProps: PlasmicAlertCard__VariantProps,
    internalArgProps: PlasmicAlertCard__ArgProps
  }
);

export default PlasmicAlertCard;
/* prettier-ignore-end */
