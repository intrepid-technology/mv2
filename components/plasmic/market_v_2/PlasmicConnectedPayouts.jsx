// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: MWF4dfPCn0i
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputFormCardWebhookConnections from "../../InputFormCardWebhookConnections"; // plasmic-import: gKd8t6dFgYd/component
import CardConnectedAccount from "../../CardConnectedAccount"; // plasmic-import: _uTya7yxqeE/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicConnectedPayouts.module.css"; // plasmic-import: MWF4dfPCn0i/css

export const PlasmicConnectedPayouts__VariantProps = new Array(
  "closed",
  "visible"
);

export const PlasmicConnectedPayouts__ArgProps = new Array();

function PlasmicConnectedPayouts__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootclosed]: hasVariant(variants, "closed", "closed"),
        [sty.rootvisible_paypal]: hasVariant(variants, "visible", "paypal"),
        [sty.rootvisible_stripe]: hasVariant(variants, "visible", "stripe")
      })}
    >
      <InputFormCardWebhookConnections
        data-plasmic-name={"connectedPayoutAccount"}
        data-plasmic-override={overrides.connectedPayoutAccount}
        className={classNames("__wab_instance", sty.connectedPayoutAccount, {
          [sty.connectedPayoutAccountvisible_paypal]: hasVariant(
            variants,
            "visible",
            "paypal"
          ),

          [sty.connectedPayoutAccountvisible_stripe]: hasVariant(
            variants,
            "visible",
            "stripe"
          )
        })}
        payment={true}
        slot={"Connect your payment accounts to receive payouts from Intrepid."}
      >
        {"Payout Connections"}
      </InputFormCardWebhookConnections>

      {(
        hasVariant(variants, "visible", "paypal")
          ? false
          : hasVariant(variants, "closed", "closed")
          ? false
          : true
      ) ? (
        <CardConnectedAccount
          data-plasmic-name={"connectedStripe"}
          data-plasmic-override={overrides.connectedStripe}
          className={classNames("__wab_instance", sty.connectedStripe, {
            [sty.connectedStripeclosed]: hasVariant(
              variants,
              "closed",
              "closed"
            ),

            [sty.connectedStripevisible_paypal]: hasVariant(
              variants,
              "visible",
              "paypal"
            ),

            [sty.connectedStripevisible_stripe]: hasVariant(
              variants,
              "visible",
              "stripe"
            )
          })}
          team={true}
          userFirstname={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__okVi8
              )}
            >
              {"companyName"}
            </div>
          }
          userLastName={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jJiBu
              )}
            >
              {"userLastName"}
            </div>
          }
        />
      ) : null}
      {(
        hasVariant(variants, "visible", "stripe")
          ? false
          : hasVariant(variants, "closed", "closed")
          ? false
          : true
      ) ? (
        <CardConnectedAccount
          data-plasmic-name={"connectedPaypal"}
          data-plasmic-override={overrides.connectedPaypal}
          className={classNames("__wab_instance", sty.connectedPaypal, {
            [sty.connectedPaypalclosed]: hasVariant(
              variants,
              "closed",
              "closed"
            ),

            [sty.connectedPaypalvisible_paypal]: hasVariant(
              variants,
              "visible",
              "paypal"
            ),

            [sty.connectedPaypalvisible_stripe]: hasVariant(
              variants,
              "visible",
              "stripe"
            )
          })}
          team={true}
          userFirstname={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jftdj
              )}
            >
              {"companyName"}
            </div>
          }
          userLastName={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0GTCk
              )}
            >
              {"userLastName"}
            </div>
          }
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "connectedPayoutAccount",
    "connectedStripe",
    "connectedPaypal"
  ],

  connectedPayoutAccount: ["connectedPayoutAccount"],
  connectedStripe: ["connectedStripe"],
  connectedPaypal: ["connectedPaypal"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicConnectedPayouts__ArgProps,
      internalVariantPropNames: PlasmicConnectedPayouts__VariantProps
    });

    return PlasmicConnectedPayouts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConnectedPayouts";
  } else {
    func.displayName = `PlasmicConnectedPayouts.${nodeName}`;
  }
  return func;
}

export const PlasmicConnectedPayouts = Object.assign(
  // Top-level PlasmicConnectedPayouts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    connectedPayoutAccount: makeNodeComponent("connectedPayoutAccount"),
    connectedStripe: makeNodeComponent("connectedStripe"),
    connectedPaypal: makeNodeComponent("connectedPaypal"),
    // Metadata about props expected for PlasmicConnectedPayouts
    internalVariantProps: PlasmicConnectedPayouts__VariantProps,
    internalArgProps: PlasmicConnectedPayouts__ArgProps
  }
);

export default PlasmicConnectedPayouts;
/* prettier-ignore-end */
