// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: w1GnXfIMuv
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicUserAvatarButton.module.css"; // plasmic-import: w1GnXfIMuv/css

export const PlasmicUserAvatarButton__VariantProps = new Array("size");

export const PlasmicUserAvatarButton__ArgProps = new Array("avatarImage");

function PlasmicUserAvatarButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <button
      data-plasmic-name={"avatarButtonEdit"}
      data-plasmic-override={overrides.avatarButtonEdit}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.avatarButtonEdit,
        {
          [sty.avatarButtonEdit__size__16Px]: hasVariant(
            variants,
            "size",
            "_16Px"
          ),

          [sty.avatarButtonEdit__size__24Px]: hasVariant(
            variants,
            "size",
            "_24Px"
          ),

          [sty.avatarButtonEdit__size__32Px]: hasVariant(
            variants,
            "size",
            "_32Px"
          ),

          [sty.avatarButtonEdit__size__40Px]: hasVariant(
            variants,
            "size",
            "_40Px"
          ),

          [sty.avatarButtonEdit__size__48Px]: hasVariant(
            variants,
            "size",
            "_48Px"
          ),

          [sty.avatarButtonEdit__size__64Px]: hasVariant(
            variants,
            "size",
            "_64Px"
          ),

          [sty.avatarButtonEdit__size__80Px]: hasVariant(
            variants,
            "size",
            "_80Px"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"avatarImageBackground"}
        data-plasmic-override={overrides.avatarImageBackground}
        className={classNames(defaultcss.all, sty.avatarImageBackground, {
          [sty.avatarImageBackground__size__40Px]: hasVariant(
            variants,
            "size",
            "_40Px"
          ),

          [sty.avatarImageBackground__size__80Px]: hasVariant(
            variants,
            "size",
            "_80Px"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__gOzp)}
              height={360}
              role={"img"}
              src={"/plasmic/market_v_2/images/image4.png"}
              width={360}
            />
          ),

          value: args.avatarImage,
          className: classNames(sty.slotAvatarImage, {
            [sty.slotAvatarImage__size__80Px]: hasVariant(
              variants,
              "size",
              "_80Px"
            )
          })
        })}
      </div>
    </button>
  );
}

const PlasmicDescendants = {
  avatarButtonEdit: ["avatarButtonEdit", "avatarImageBackground"],
  avatarImageBackground: ["avatarImageBackground"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUserAvatarButton__ArgProps,
      internalVariantPropNames: PlasmicUserAvatarButton__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicUserAvatarButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "avatarButtonEdit") {
    func.displayName = "PlasmicUserAvatarButton";
  } else {
    func.displayName = `PlasmicUserAvatarButton.${nodeName}`;
  }
  return func;
}

export const PlasmicUserAvatarButton = Object.assign(
  // Top-level PlasmicUserAvatarButton renders the root element
  makeNodeComponent("avatarButtonEdit"),
  {
    // Helper components rendering sub-elements
    avatarImageBackground: makeNodeComponent("avatarImageBackground"),
    // Metadata about props expected for PlasmicUserAvatarButton
    internalVariantProps: PlasmicUserAvatarButton__VariantProps,
    internalArgProps: PlasmicUserAvatarButton__ArgProps
  }
);

export default PlasmicUserAvatarButton;
/* prettier-ignore-end */
