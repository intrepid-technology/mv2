// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: gjyxgsDEI-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicInputCardNumberField.module.css"; // plasmic-import: gjyxgsDEI-/css

export const PlasmicInputCardNumberField__VariantProps = new Array(
  "description",
  "state",
  "size"
);

export const PlasmicInputCardNumberField__ArgProps = new Array(
  "children",
  "slot"
);

function PlasmicInputCardNumberField__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootsize__180]: hasVariant(variants, "size", "_180"),
        [sty.rootsize__270]: hasVariant(variants, "size", "_270")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mo2A2, {
          [sty.freeBoxsize__180__mo2A2Wew5]: hasVariant(
            variants,
            "size",
            "_180"
          ),

          [sty.freeBoxstate_success__mo2A2Xndgz]: hasVariant(
            variants,
            "state",
            "success"
          )
        })}
      >
        <p.Stack
          as={"input"}
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput ?? overrides.textbox}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.input,
            sty.textInput,
            {
              [sty.textInputsize__180]: hasVariant(variants, "size", "_180"),
              [sty.textInputstate_success]: hasVariant(
                variants,
                "state",
                "success"
              )
            }
          )}
          placeholder={""}
          size={1}
          type={"text"}
          value={""}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__w4B3K, {
            [sty.freeBoxsize__180__w4B3KWew5]: hasVariant(
              variants,
              "size",
              "_180"
            ),

            [sty.freeBoxsize__270__w4B3KEWntz]: hasVariant(
              variants,
              "size",
              "_270"
            ),

            [sty.freeBoxstate_success__w4B3Kxndgz]: hasVariant(
              variants,
              "state",
              "success"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Content",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrensize__180]: hasVariant(
                variants,
                "size",
                "_180"
              ),

              [sty.slotTargetChildrenstate_success]: hasVariant(
                variants,
                "state",
                "success"
              )
            })
          })}
        </div>
      </p.Stack>

      {(hasVariant(variants, "description", "description") ? false : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___09Rg3, {
            [sty.freeBoxdescription___09Rg38YNeE]: hasVariant(
              variants,
              "description",
              "description"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Description",
            value: args.slot,
            className: classNames(sty.slotTargetSlot, {
              [sty.slotTargetSlotdescription]: hasVariant(
                variants,
                "description",
                "description"
              ),

              [sty.slotTargetSlotsize__180]: hasVariant(
                variants,
                "size",
                "_180"
              )
            })
          })}
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox"],
  textInput: ["textInput", "textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputCardNumberField__ArgProps,
      internalVariantPropNames: PlasmicInputCardNumberField__VariantProps
    });

    return PlasmicInputCardNumberField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputCardNumberField";
  } else {
    func.displayName = `PlasmicInputCardNumberField.${nodeName}`;
  }
  return func;
}

export const PlasmicInputCardNumberField = Object.assign(
  // Top-level PlasmicInputCardNumberField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    // Metadata about props expected for PlasmicInputCardNumberField
    internalVariantProps: PlasmicInputCardNumberField__VariantProps,
    internalArgProps: PlasmicInputCardNumberField__ArgProps
  }
);

export default PlasmicInputCardNumberField;
/* prettier-ignore-end */
