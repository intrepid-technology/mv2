// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: MCUdGz7XKy0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SelectInput from "../../SelectInput"; // plasmic-import: 6gReGypE5kO/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicSelectTimeDropdownPrimary.module.css"; // plasmic-import: MCUdGz7XKy0/css

export const PlasmicSelectTimeDropdownPrimary__VariantProps = new Array(
  "label"
);

export const PlasmicSelectTimeDropdownPrimary__ArgProps = new Array("children");

function PlasmicSelectTimeDropdownPrimary__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "label", "label") ? false : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__tegzh, {
            [sty.freeBox__label__tegzhB8B]: hasVariant(
              variants,
              "label",
              "label"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Time",
            value: args.children
          })}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__yWeCd)}
      >
        <SelectInput
          className={classNames("__wab_instance", sty.selectInput__nEvfQ)}
          placeholder={"Hour"}
        />

        <SelectInput
          className={classNames("__wab_instance", sty.selectInput__ekUk4)}
          placeholder={"Minute"}
        />

        <SelectInput
          className={classNames("__wab_instance", sty.selectInput__ex1P)}
          placeholder={"AM/PM"}
        />
      </p.Stack>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectTimeDropdownPrimary__ArgProps,
      internalVariantPropNames: PlasmicSelectTimeDropdownPrimary__VariantProps
    });

    return PlasmicSelectTimeDropdownPrimary__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectTimeDropdownPrimary";
  } else {
    func.displayName = `PlasmicSelectTimeDropdownPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectTimeDropdownPrimary = Object.assign(
  // Top-level PlasmicSelectTimeDropdownPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSelectTimeDropdownPrimary
    internalVariantProps: PlasmicSelectTimeDropdownPrimary__VariantProps,
    internalArgProps: PlasmicSelectTimeDropdownPrimary__ArgProps
  }
);

export default PlasmicSelectTimeDropdownPrimary;
/* prettier-ignore-end */
