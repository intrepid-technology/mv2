// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: jKGLXJ6-Gl
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicTagBadgeVerification.module.css"; // plasmic-import: jKGLXJ6-Gl/css
import Icon129Icon from "./icons/PlasmicIcon__Icon129"; // plasmic-import: 1Q3PXgbL-f/icon

export const PlasmicTagBadgeVerification__VariantProps = new Array("size");

export const PlasmicTagBadgeVerification__ArgProps = new Array();

function PlasmicTagBadgeVerification__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__14]: hasVariant(variants, "size", "_14"),
        [sty.root__size__16]: hasVariant(variants, "size", "_16"),
        [sty.root__size__18]: hasVariant(variants, "size", "_18"),
        [sty.root__size__24]: hasVariant(variants, "size", "_24")
      })}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(projectcss.all, sty.parent, {
          [sty.parent__size__14]: hasVariant(variants, "size", "_14"),
          [sty.parent__size__16]: hasVariant(variants, "size", "_16"),
          [sty.parent__size__18]: hasVariant(variants, "size", "_18"),
          [sty.parent__size__24]: hasVariant(variants, "size", "_24")
        })}
      >
        <Icon129Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svg__size__14]: hasVariant(variants, "size", "_14"),
            [sty.svg__size__16]: hasVariant(variants, "size", "_16"),
            [sty.svg__size__18]: hasVariant(variants, "size", "_18"),
            [sty.svg__size__24]: hasVariant(variants, "size", "_24")
          })}
          role={"img"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "parent", "svg"],
  parent: ["parent", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTagBadgeVerification__ArgProps,
      internalVariantPropNames: PlasmicTagBadgeVerification__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTagBadgeVerification__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTagBadgeVerification";
  } else {
    func.displayName = `PlasmicTagBadgeVerification.${nodeName}`;
  }
  return func;
}

export const PlasmicTagBadgeVerification = Object.assign(
  // Top-level PlasmicTagBadgeVerification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicTagBadgeVerification
    internalVariantProps: PlasmicTagBadgeVerification__VariantProps,
    internalArgProps: PlasmicTagBadgeVerification__ArgProps
  }
);

export default PlasmicTagBadgeVerification;
/* prettier-ignore-end */
