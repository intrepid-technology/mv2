// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: _lVEBPxny8
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPricingTableHeadlinePriceCard.module.css"; // plasmic-import: _lVEBPxny8/css

export const PlasmicPricingTableHeadlinePriceCard__VariantProps = new Array();

export const PlasmicPricingTableHeadlinePriceCard__ArgProps = new Array(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4"
);

function PlasmicPricingTableHeadlinePriceCard__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box___3S0X2)}>
        <div className={classNames(defaultcss.all, sty.box___04MeC)}>
          {p.renderPlasmicSlot({
            defaultContents: "Membership",
            value: args.children,
            className: classNames(sty.slotChildren)
          })}
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"elementNumberValueIntervalTermParent"}
        data-plasmic-override={overrides.elementNumberValueIntervalTermParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          sty.elementNumberValueIntervalTermParent
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__qOaV)}
        >
          <div className={classNames(defaultcss.all, sty.box__gOClv)}>
            <div className={classNames(defaultcss.all, sty.box__xHjU)}>
              {p.renderPlasmicSlot({
                defaultContents: "$",
                value: args.slot2,
                className: classNames(sty.slotSlot2)
              })}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.box__m0Ufj)}>
            <div className={classNames(defaultcss.all, sty.box__s51Ve)}>
              {p.renderPlasmicSlot({
                defaultContents: "50",
                value: args.slot3,
                className: classNames(sty.slotSlot3)
              })}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.box___2DAj1)}>
            <div className={classNames(defaultcss.all, sty.box__z9Y91)}>
              {p.renderPlasmicSlot({
                defaultContents: "/year",
                value: args.slot4,
                className: classNames(sty.slotSlot4)
              })}
            </div>
          </div>
        </p.Stack>

        <div
          data-plasmic-name={"descriptionTextParent"}
          data-plasmic-override={overrides.descriptionTextParent}
          className={classNames(defaultcss.all, sty.descriptionTextParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Description",
            value: args.slot,
            className: classNames(sty.slotSlot)
          })}
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "elementNumberValueIntervalTermParent",
    "descriptionTextParent"
  ],

  elementNumberValueIntervalTermParent: [
    "elementNumberValueIntervalTermParent",
    "descriptionTextParent"
  ],

  descriptionTextParent: ["descriptionTextParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricingTableHeadlinePriceCard__ArgProps,
      internalVariantPropNames:
        PlasmicPricingTableHeadlinePriceCard__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPricingTableHeadlinePriceCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingTableHeadlinePriceCard";
  } else {
    func.displayName = `PlasmicPricingTableHeadlinePriceCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingTableHeadlinePriceCard = Object.assign(
  // Top-level PlasmicPricingTableHeadlinePriceCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    elementNumberValueIntervalTermParent: makeNodeComponent(
      "elementNumberValueIntervalTermParent"
    ),

    descriptionTextParent: makeNodeComponent("descriptionTextParent"),
    // Metadata about props expected for PlasmicPricingTableHeadlinePriceCard
    internalVariantProps: PlasmicPricingTableHeadlinePriceCard__VariantProps,
    internalArgProps: PlasmicPricingTableHeadlinePriceCard__ArgProps
  }
);

export default PlasmicPricingTableHeadlinePriceCard;
/* prettier-ignore-end */
