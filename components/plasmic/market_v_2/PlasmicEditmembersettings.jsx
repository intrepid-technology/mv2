// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: j8kezDqiX0q
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavbarMemberEdit from "../../NavbarMemberEdit"; // plasmic-import: oTyBGj7jMRD/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import FormContext from "../../FormContext"; // plasmic-import: fzhRfAQRK6/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import FormTextInput from "../../FormTextInput"; // plasmic-import: egzqjpKDP_e/component
import Button from "../../Button"; // plasmic-import: ftJnovScMuV/component
import SwitchInput from "../../SwitchInput"; // plasmic-import: q4oa9NmA8gP/component
import FormSelectInput from "../../FormSelectInput"; // plasmic-import: VSW4TWeqMx/component
import NotificationSettingsForm from "../../NotificationSettingsForm"; // plasmic-import: Z8dV7lUnBe3/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicEditmembersettings.module.css"; // plasmic-import: j8kezDqiX0q/css
import GooglesvgIcon from "./icons/PlasmicIcon__Googlesvg"; // plasmic-import: XP-psNmhog/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: EaVXobEXiy/icon
import TwitterSquareFillIcon from "./icons/PlasmicIcon__TwitterSquareFill"; // plasmic-import: YS9smaNhXs/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: DEc54POMG/icon
import GithubIcon from "./icons/PlasmicIcon__Github"; // plasmic-import: 3czk3Wymzb/icon

export const PlasmicEditmembersettings__VariantProps = new Array();

export const PlasmicEditmembersettings__ArgProps = new Array();

function PlasmicEditmembersettings__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarMemberEdit
            data-plasmic-name={"navbarMemberEdit"}
            data-plasmic-override={overrides.navbarMemberEdit}
            className={classNames("__wab_instance", sty.navbarMemberEdit)}
            navItems={[
              "notifications",
              "messages",
              "lists",
              "reviews",
              "wallet"
            ]}
            selected={"settings"}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberSettingsEmail"}
            data-plasmic-override={overrides.sectionMemberSettingsEmail}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsEmail
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay
              )}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text___1J1Ku
                  )}
                >
                  {"Manage your account"}
                </div>
              }
              textDisplay={"Settings"}
              textSubhead={"Maintain a safe and secure community experience  "}
            />

            <FormContext
              data-plasmic-name={"emailForm"}
              data-plasmic-override={overrides.emailForm}
              className={classNames("__wab_instance", sty.emailForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formMemberEditEmail"}
                data-plasmic-override={overrides.formMemberEditEmail}
                hasGap={true}
                className={classNames(defaultcss.all, sty.formMemberEditEmail)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__pZx7J)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__vfOg5
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__stdky
                        )}
                      >
                        {
                          "Enter a new email address to update the one you use to log in"
                        }
                      </div>
                    }
                  >
                    {"Email"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"emailTextInput"}
                    data-plasmic-override={overrides.emailTextInput}
                    className={classNames("__wab_instance", sty.emailTextInput)}
                    name={"email"}
                  />
                </p.Stack>

                <Button
                  data-plasmic-name={"emailFormSubmitButton"}
                  data-plasmic-override={overrides.emailFormSubmitButton}
                  className={classNames(
                    "__wab_instance",
                    sty.emailFormSubmitButton
                  )}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__bXNro
                    )}
                  >
                    {"Update Email"}
                  </div>
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberSettingsPasswordReset"}
            data-plasmic-override={overrides.sectionMemberSettingsPasswordReset}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsPasswordReset
            )}
          >
            <p.Stack
              as={"section"}
              data-plasmic-name={"sectionMemberPasswordReset"}
              data-plasmic-override={overrides.sectionMemberPasswordReset}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionMemberPasswordReset
              )}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__rmGSc
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__pucdn
                    )}
                  >
                    {
                      "Click the button to reset your password and we will send you a verification link"
                    }
                  </div>
                }
              >
                {"Password reset"}
              </CardHeaderTitlePrimary>

              <Button
                data-plasmic-name={"passwordResetButton"}
                data-plasmic-override={overrides.passwordResetButton}
                className={classNames(
                  "__wab_instance",
                  sty.passwordResetButton
                )}
                type={"ghost"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__zr6Zm
                  )}
                >
                  {"Reset Password"}
                </div>
              </Button>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberSettingsLoginConnections"}
            data-plasmic-override={
              overrides.sectionMemberSettingsLoginConnections
            }
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsLoginConnections
            )}
          >
            <FormContext
              data-plasmic-name={"formContext"}
              data-plasmic-override={overrides.formContext}
              className={classNames("__wab_instance", sty.formContext)}
            >
              <p.Stack
                as={"section"}
                data-plasmic-name={"sectionMemberLoginConnections"}
                data-plasmic-override={overrides.sectionMemberLoginConnections}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.sectionMemberLoginConnections
                )}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__ta5FN)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__qzg0M
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__lhHaq
                        )}
                      >
                        {"Connect your social accounts to log in to Intrepid."}
                      </div>
                    }
                  >
                    {"Login connections"}
                  </CardHeaderTitlePrimary>

                  <div
                    data-plasmic-name={"inputGroupMemberLoginSocial"}
                    data-plasmic-override={
                      overrides.inputGroupMemberLoginSocial
                    }
                    className={classNames(
                      defaultcss.all,
                      sty.inputGroupMemberLoginSocial
                    )}
                  >
                    <SwitchInput
                      data-plasmic-name={"googleSwitchInput"}
                      data-plasmic-override={overrides.googleSwitchInput}
                      className={classNames(
                        "__wab_instance",
                        sty.googleSwitchInput
                      )}
                      content={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox__dwCra
                          )}
                        >
                          <GooglesvgIcon
                            className={classNames(
                              defaultcss.all,
                              sty.svg__dc7Qu
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.text__ccls
                            )}
                          >
                            {"Google"}
                          </div>
                        </p.Stack>
                      }
                    />

                    <SwitchInput
                      data-plasmic-name={"facebookSwitchInput"}
                      data-plasmic-override={overrides.facebookSwitchInput}
                      className={classNames(
                        "__wab_instance",
                        sty.facebookSwitchInput
                      )}
                      content={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox__jhNWs
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              defaultcss.all,
                              sty.svg__e2WvX
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.text___25A
                            )}
                          >
                            {"Facebook"}
                          </div>
                        </p.Stack>
                      }
                    />

                    <SwitchInput
                      data-plasmic-name={"twitterSwitchInput"}
                      data-plasmic-override={overrides.twitterSwitchInput}
                      className={classNames(
                        "__wab_instance",
                        sty.twitterSwitchInput
                      )}
                      content={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox__vd3Q
                          )}
                        >
                          <TwitterSquareFillIcon
                            className={classNames(
                              defaultcss.all,
                              sty.svg___1AzOc
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.text___8FQhv
                            )}
                          >
                            {"Twitter"}
                          </div>
                        </p.Stack>
                      }
                    />

                    <SwitchInput
                      data-plasmic-name={"linkedInSwitchInput"}
                      data-plasmic-override={overrides.linkedInSwitchInput}
                      className={classNames(
                        "__wab_instance",
                        sty.linkedInSwitchInput
                      )}
                      content={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox___8CqVc
                          )}
                        >
                          <Icon10Icon
                            className={classNames(
                              defaultcss.all,
                              sty.svg__py6TS
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.text__sRrhz
                            )}
                          >
                            {"Linkedin"}
                          </div>
                        </p.Stack>
                      }
                    />

                    <SwitchInput
                      data-plasmic-name={"githubSwitchInput"}
                      data-plasmic-override={overrides.githubSwitchInput}
                      className={classNames(
                        "__wab_instance",
                        sty.githubSwitchInput
                      )}
                      content={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox___0Xli
                          )}
                        >
                          <GithubIcon
                            className={classNames(
                              defaultcss.all,
                              sty.svg__i1Yxg
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.text__pBbHh
                            )}
                          >
                            {"Github"}
                          </div>
                        </p.Stack>
                      }
                    />
                  </div>
                </p.Stack>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberMobileNumber"}
            data-plasmic-override={overrides.sectionMemberMobileNumber}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberMobileNumber
            )}
          >
            <FormContext
              data-plasmic-name={"mobileForm"}
              data-plasmic-override={overrides.mobileForm}
              className={classNames("__wab_instance", sty.mobileForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formMemberEditMobileNumber"}
                data-plasmic-override={overrides.formMemberEditMobileNumber}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.formMemberEditMobileNumber
                )}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__ltCq0)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__xC5L
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__lzt1R
                        )}
                      >
                        {"Membership perks and offers sent directly to you"}
                      </div>
                    }
                  >
                    {"Mobile number"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"memberLocationGroup"}
                    data-plasmic-override={overrides.memberLocationGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.memberLocationGroup
                    )}
                  >
                    <FormSelectInput
                      data-plasmic-name={"mobileCountrySelectInput"}
                      data-plasmic-override={overrides.mobileCountrySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.mobileCountrySelectInput
                      )}
                      label={"Country"}
                      name={"country"}
                    />

                    <FormTextInput
                      data-plasmic-name={"numberTextInput"}
                      data-plasmic-override={overrides.numberTextInput}
                      className={classNames(
                        "__wab_instance",
                        sty.numberTextInput
                      )}
                      label={"Number"}
                      name={"number"}
                      showLabel={"showLabel"}
                    />
                  </p.Stack>
                </p.Stack>

                <Button
                  data-plasmic-name={"mobileFormSubmitButton"}
                  data-plasmic-override={overrides.mobileFormSubmitButton}
                  className={classNames(
                    "__wab_instance",
                    sty.mobileFormSubmitButton
                  )}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__istu
                    )}
                  >
                    {"Save Mobile"}
                  </div>
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberSettingsAddress"}
            data-plasmic-override={overrides.sectionMemberSettingsAddress}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsAddress
            )}
          >
            <FormContext
              data-plasmic-name={"addressForm"}
              data-plasmic-override={overrides.addressForm}
              className={classNames("__wab_instance", sty.addressForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formMemberEditAddress"}
                data-plasmic-override={overrides.formMemberEditAddress}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.formMemberEditAddress
                )}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__zJ5N8)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__lgaOa
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__bNhrh
                        )}
                      >
                        {
                          "Add your address if you want to appear in search results for local businesses"
                        }
                      </div>
                    }
                  >
                    {"Address"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__qvHgH)}
                  >
                    <FormTextInput
                      data-plasmic-name={"addressTextInput"}
                      data-plasmic-override={overrides.addressTextInput}
                      className={classNames(
                        "__wab_instance",
                        sty.addressTextInput
                      )}
                      label={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__oz4Vl
                          )}
                        >
                          {"Address"}
                        </div>
                      }
                      name={"address"}
                      showLabel={"showLabel"}
                    />

                    <FormTextInput
                      data-plasmic-name={"addressLineTwoTextInput"}
                      data-plasmic-override={overrides.addressLineTwoTextInput}
                      className={classNames(
                        "__wab_instance",
                        sty.addressLineTwoTextInput
                      )}
                      label={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text___0Xmlr
                          )}
                        >
                          {"Address Line 2"}
                        </div>
                      }
                      name={"addressLineTwo"}
                      showLabel={"showLabel"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"countrySelectInput"}
                      data-plasmic-override={overrides.countrySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.countrySelectInput
                      )}
                      label={"Country"}
                      name={"country"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"citySelectInput"}
                      data-plasmic-override={overrides.citySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.citySelectInput
                      )}
                      label={
                        <div
                          data-plasmic-name={"label2"}
                          data-plasmic-override={overrides.label2}
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.label2
                          )}
                        >
                          {"City"}
                        </div>
                      }
                      name={"city"}
                    />

                    <FormTextInput
                      data-plasmic-name={"stateTextInput"}
                      data-plasmic-override={overrides.stateTextInput}
                      className={classNames(
                        "__wab_instance",
                        sty.stateTextInput
                      )}
                      label={"Province/State"}
                      name={"state"}
                      showLabel={"showLabel"}
                    />

                    <FormTextInput
                      data-plasmic-name={"postalCodeTextInput"}
                      data-plasmic-override={overrides.postalCodeTextInput}
                      className={classNames(
                        "__wab_instance",
                        sty.postalCodeTextInput
                      )}
                      label={"Zip/Postal code"}
                      name={"postalCode"}
                      showLabel={"showLabel"}
                    />
                  </p.Stack>
                </p.Stack>

                <Button
                  data-plasmic-name={"addressFormSubmitButton"}
                  data-plasmic-override={overrides.addressFormSubmitButton}
                  className={classNames(
                    "__wab_instance",
                    sty.addressFormSubmitButton
                  )}
                >
                  {"Save Address"}
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <FormContext
            data-plasmic-name={"notificationsForm"}
            data-plasmic-override={overrides.notificationsForm}
            className={classNames("__wab_instance", sty.notificationsForm)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__wBn7A)}>
              <NotificationSettingsForm
                data-plasmic-name={"notificationSettingsForm"}
                data-plasmic-override={overrides.notificationSettingsForm}
                className={classNames(
                  "__wab_instance",
                  sty.notificationSettingsForm
                )}
              />
            </div>
          </FormContext>

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionMemberSettingsDeleteAccount"}
            data-plasmic-override={overrides.sectionMemberSettingsDeleteAccount}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsDeleteAccount
            )}
          >
            <p.Stack
              as={"section"}
              data-plasmic-name={"sectionMemberDeleteAccount"}
              data-plasmic-override={overrides.sectionMemberDeleteAccount}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionMemberDeleteAccount
              )}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___6BojG)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___84IO
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__rRcFg
                      )}
                    >
                      {
                        "Permanently remove your account and all of its contents from the Intrepid community. This action is not reversible, so please continue with caution."
                      }
                    </div>
                  }
                >
                  {"Delete account"}
                </CardHeaderTitlePrimary>
              </p.Stack>

              <Button
                data-plasmic-name={"deleteAccountButton"}
                data-plasmic-override={overrides.deleteAccountButton}
                className={classNames(
                  "__wab_instance",
                  sty.deleteAccountButton
                )}
                color={"caution"}
                type={"ghost"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__z1Dqb
                  )}
                >
                  {"Delete Account"}
                </div>
              </Button>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarMemberEdit",
    "sectionMemberSettingsEmail",
    "cardHeaderTitleDisplay",
    "emailForm",
    "formMemberEditEmail",
    "emailTextInput",
    "emailFormSubmitButton",
    "sectionMemberSettingsPasswordReset",
    "sectionMemberPasswordReset",
    "passwordResetButton",
    "sectionMemberSettingsLoginConnections",
    "formContext",
    "sectionMemberLoginConnections",
    "inputGroupMemberLoginSocial",
    "googleSwitchInput",
    "facebookSwitchInput",
    "twitterSwitchInput",
    "linkedInSwitchInput",
    "githubSwitchInput",
    "sectionMemberMobileNumber",
    "mobileForm",
    "formMemberEditMobileNumber",
    "memberLocationGroup",
    "mobileCountrySelectInput",
    "numberTextInput",
    "mobileFormSubmitButton",
    "sectionMemberSettingsAddress",
    "addressForm",
    "formMemberEditAddress",
    "addressTextInput",
    "addressLineTwoTextInput",
    "countrySelectInput",
    "citySelectInput",
    "label2",
    "stateTextInput",
    "postalCodeTextInput",
    "addressFormSubmitButton",
    "notificationsForm",
    "notificationSettingsForm",
    "sectionMemberSettingsDeleteAccount",
    "sectionMemberDeleteAccount",
    "deleteAccountButton",
    "footerB"
  ],

  navbarMemberEdit: ["navbarMemberEdit"],
  sectionMemberSettingsEmail: [
    "sectionMemberSettingsEmail",
    "cardHeaderTitleDisplay",
    "emailForm",
    "formMemberEditEmail",
    "emailTextInput",
    "emailFormSubmitButton"
  ],

  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  emailForm: [
    "emailForm",
    "formMemberEditEmail",
    "emailTextInput",
    "emailFormSubmitButton"
  ],

  formMemberEditEmail: [
    "formMemberEditEmail",
    "emailTextInput",
    "emailFormSubmitButton"
  ],

  emailTextInput: ["emailTextInput"],
  emailFormSubmitButton: ["emailFormSubmitButton"],
  sectionMemberSettingsPasswordReset: [
    "sectionMemberSettingsPasswordReset",
    "sectionMemberPasswordReset",
    "passwordResetButton"
  ],

  sectionMemberPasswordReset: [
    "sectionMemberPasswordReset",
    "passwordResetButton"
  ],

  passwordResetButton: ["passwordResetButton"],
  sectionMemberSettingsLoginConnections: [
    "sectionMemberSettingsLoginConnections",
    "formContext",
    "sectionMemberLoginConnections",
    "inputGroupMemberLoginSocial",
    "googleSwitchInput",
    "facebookSwitchInput",
    "twitterSwitchInput",
    "linkedInSwitchInput",
    "githubSwitchInput"
  ],

  formContext: [
    "formContext",
    "sectionMemberLoginConnections",
    "inputGroupMemberLoginSocial",
    "googleSwitchInput",
    "facebookSwitchInput",
    "twitterSwitchInput",
    "linkedInSwitchInput",
    "githubSwitchInput"
  ],

  sectionMemberLoginConnections: [
    "sectionMemberLoginConnections",
    "inputGroupMemberLoginSocial",
    "googleSwitchInput",
    "facebookSwitchInput",
    "twitterSwitchInput",
    "linkedInSwitchInput",
    "githubSwitchInput"
  ],

  inputGroupMemberLoginSocial: [
    "inputGroupMemberLoginSocial",
    "googleSwitchInput",
    "facebookSwitchInput",
    "twitterSwitchInput",
    "linkedInSwitchInput",
    "githubSwitchInput"
  ],

  googleSwitchInput: ["googleSwitchInput"],
  facebookSwitchInput: ["facebookSwitchInput"],
  twitterSwitchInput: ["twitterSwitchInput"],
  linkedInSwitchInput: ["linkedInSwitchInput"],
  githubSwitchInput: ["githubSwitchInput"],
  sectionMemberMobileNumber: [
    "sectionMemberMobileNumber",
    "mobileForm",
    "formMemberEditMobileNumber",
    "memberLocationGroup",
    "mobileCountrySelectInput",
    "numberTextInput",
    "mobileFormSubmitButton"
  ],

  mobileForm: [
    "mobileForm",
    "formMemberEditMobileNumber",
    "memberLocationGroup",
    "mobileCountrySelectInput",
    "numberTextInput",
    "mobileFormSubmitButton"
  ],

  formMemberEditMobileNumber: [
    "formMemberEditMobileNumber",
    "memberLocationGroup",
    "mobileCountrySelectInput",
    "numberTextInput",
    "mobileFormSubmitButton"
  ],

  memberLocationGroup: [
    "memberLocationGroup",
    "mobileCountrySelectInput",
    "numberTextInput"
  ],

  mobileCountrySelectInput: ["mobileCountrySelectInput"],
  numberTextInput: ["numberTextInput"],
  mobileFormSubmitButton: ["mobileFormSubmitButton"],
  sectionMemberSettingsAddress: [
    "sectionMemberSettingsAddress",
    "addressForm",
    "formMemberEditAddress",
    "addressTextInput",
    "addressLineTwoTextInput",
    "countrySelectInput",
    "citySelectInput",
    "label2",
    "stateTextInput",
    "postalCodeTextInput",
    "addressFormSubmitButton"
  ],

  addressForm: [
    "addressForm",
    "formMemberEditAddress",
    "addressTextInput",
    "addressLineTwoTextInput",
    "countrySelectInput",
    "citySelectInput",
    "label2",
    "stateTextInput",
    "postalCodeTextInput",
    "addressFormSubmitButton"
  ],

  formMemberEditAddress: [
    "formMemberEditAddress",
    "addressTextInput",
    "addressLineTwoTextInput",
    "countrySelectInput",
    "citySelectInput",
    "label2",
    "stateTextInput",
    "postalCodeTextInput",
    "addressFormSubmitButton"
  ],

  addressTextInput: ["addressTextInput"],
  addressLineTwoTextInput: ["addressLineTwoTextInput"],
  countrySelectInput: ["countrySelectInput"],
  citySelectInput: ["citySelectInput", "label2"],
  label2: ["label2"],
  stateTextInput: ["stateTextInput"],
  postalCodeTextInput: ["postalCodeTextInput"],
  addressFormSubmitButton: ["addressFormSubmitButton"],
  notificationsForm: ["notificationsForm", "notificationSettingsForm"],
  notificationSettingsForm: ["notificationSettingsForm"],
  sectionMemberSettingsDeleteAccount: [
    "sectionMemberSettingsDeleteAccount",
    "sectionMemberDeleteAccount",
    "deleteAccountButton"
  ],

  sectionMemberDeleteAccount: [
    "sectionMemberDeleteAccount",
    "deleteAccountButton"
  ],

  deleteAccountButton: ["deleteAccountButton"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditmembersettings__ArgProps,
      internalVariantPropNames: PlasmicEditmembersettings__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicEditmembersettings__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditmembersettings";
  } else {
    func.displayName = `PlasmicEditmembersettings.${nodeName}`;
  }
  return func;
}

export const PlasmicEditmembersettings = Object.assign(
  // Top-level PlasmicEditmembersettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarMemberEdit: makeNodeComponent("navbarMemberEdit"),
    sectionMemberSettingsEmail: makeNodeComponent("sectionMemberSettingsEmail"),
    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    emailForm: makeNodeComponent("emailForm"),
    formMemberEditEmail: makeNodeComponent("formMemberEditEmail"),
    emailTextInput: makeNodeComponent("emailTextInput"),
    emailFormSubmitButton: makeNodeComponent("emailFormSubmitButton"),
    sectionMemberSettingsPasswordReset: makeNodeComponent(
      "sectionMemberSettingsPasswordReset"
    ),

    sectionMemberPasswordReset: makeNodeComponent("sectionMemberPasswordReset"),
    passwordResetButton: makeNodeComponent("passwordResetButton"),
    sectionMemberSettingsLoginConnections: makeNodeComponent(
      "sectionMemberSettingsLoginConnections"
    ),

    formContext: makeNodeComponent("formContext"),
    sectionMemberLoginConnections: makeNodeComponent(
      "sectionMemberLoginConnections"
    ),

    inputGroupMemberLoginSocial: makeNodeComponent(
      "inputGroupMemberLoginSocial"
    ),

    googleSwitchInput: makeNodeComponent("googleSwitchInput"),
    facebookSwitchInput: makeNodeComponent("facebookSwitchInput"),
    twitterSwitchInput: makeNodeComponent("twitterSwitchInput"),
    linkedInSwitchInput: makeNodeComponent("linkedInSwitchInput"),
    githubSwitchInput: makeNodeComponent("githubSwitchInput"),
    sectionMemberMobileNumber: makeNodeComponent("sectionMemberMobileNumber"),
    mobileForm: makeNodeComponent("mobileForm"),
    formMemberEditMobileNumber: makeNodeComponent("formMemberEditMobileNumber"),
    memberLocationGroup: makeNodeComponent("memberLocationGroup"),
    mobileCountrySelectInput: makeNodeComponent("mobileCountrySelectInput"),
    numberTextInput: makeNodeComponent("numberTextInput"),
    mobileFormSubmitButton: makeNodeComponent("mobileFormSubmitButton"),
    sectionMemberSettingsAddress: makeNodeComponent(
      "sectionMemberSettingsAddress"
    ),

    addressForm: makeNodeComponent("addressForm"),
    formMemberEditAddress: makeNodeComponent("formMemberEditAddress"),
    addressTextInput: makeNodeComponent("addressTextInput"),
    addressLineTwoTextInput: makeNodeComponent("addressLineTwoTextInput"),
    countrySelectInput: makeNodeComponent("countrySelectInput"),
    citySelectInput: makeNodeComponent("citySelectInput"),
    label2: makeNodeComponent("label2"),
    stateTextInput: makeNodeComponent("stateTextInput"),
    postalCodeTextInput: makeNodeComponent("postalCodeTextInput"),
    addressFormSubmitButton: makeNodeComponent("addressFormSubmitButton"),
    notificationsForm: makeNodeComponent("notificationsForm"),
    notificationSettingsForm: makeNodeComponent("notificationSettingsForm"),
    sectionMemberSettingsDeleteAccount: makeNodeComponent(
      "sectionMemberSettingsDeleteAccount"
    ),

    sectionMemberDeleteAccount: makeNodeComponent("sectionMemberDeleteAccount"),
    deleteAccountButton: makeNodeComponent("deleteAccountButton"),
    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicEditmembersettings
    internalVariantProps: PlasmicEditmembersettings__VariantProps,
    internalArgProps: PlasmicEditmembersettings__ArgProps
  }
);

export default PlasmicEditmembersettings;
/* prettier-ignore-end */
