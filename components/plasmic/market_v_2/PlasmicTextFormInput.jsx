// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Hp_zc6XLro
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicTextFormInput.module.css"; // plasmic-import: Hp_zc6XLro/css

export const PlasmicTextFormInput__VariantProps = new Array("label", "size");

export const PlasmicTextFormInput__ArgProps = new Array(
  "labelHeadline",
  "inputText"
);

function PlasmicTextFormInput__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__label]: hasVariant(variants, "label", "label"),
        [sty.root__size__180]: hasVariant(variants, "size", "_180"),
        [sty.root__size__360]: hasVariant(variants, "size", "_360"),
        [sty.root__size__380]: hasVariant(variants, "size", "_380"),
        [sty.root__size_medium]: hasVariant(variants, "size", "medium")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__label]: hasVariant(variants, "label", "label"),
          [sty.parent__size__180]: hasVariant(variants, "size", "_180"),
          [sty.parent__size__270]: hasVariant(variants, "size", "_270"),
          [sty.parent__size__360]: hasVariant(variants, "size", "_360"),
          [sty.parent__size__380]: hasVariant(variants, "size", "_380"),
          [sty.parent__size__540]: hasVariant(variants, "size", "_540"),
          [sty.parent__size_medium]: hasVariant(variants, "size", "medium")
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.box___9HmTa, {
            [sty.box__label___9HmTapXfZp]: hasVariant(
              variants,
              "label",
              "label"
            ),

            [sty.box__size__180___9HmTaYhe1R]: hasVariant(
              variants,
              "size",
              "_180"
            ),

            [sty.box__size__270___9HmTatZir1]: hasVariant(
              variants,
              "size",
              "_270"
            ),

            [sty.box__size__380___9HmTajPz7F]: hasVariant(
              variants,
              "size",
              "_380"
            ),

            [sty.box__size__540___9HmTaoW9K]: hasVariant(
              variants,
              "size",
              "_540"
            ),

            [sty.box__size_medium___9HmTaB5Hz2]: hasVariant(
              variants,
              "size",
              "medium"
            )
          })}
        >
          {(hasVariant(variants, "label", "label") ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: "Headline",
                value: args.labelHeadline,
                className: classNames(sty.slotLabelHeadline, {
                  [sty.slotLabelHeadline__label]: hasVariant(
                    variants,
                    "label",
                    "label"
                  ),

                  [sty.slotLabelHeadline__size__180]: hasVariant(
                    variants,
                    "size",
                    "_180"
                  ),

                  [sty.slotLabelHeadline__size__270]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  ),

                  [sty.slotLabelHeadline__size__380]: hasVariant(
                    variants,
                    "size",
                    "_380"
                  ),

                  [sty.slotLabelHeadline__size__540]: hasVariant(
                    variants,
                    "size",
                    "_540"
                  )
                })
              })
            : null}
        </div>

        <div
          className={classNames(defaultcss.all, sty.box__xIVtn, {
            [sty.box__size__180__xIVtnYhe1R]: hasVariant(
              variants,
              "size",
              "_180"
            ),

            [sty.box__size__270__xIVtntZir1]: hasVariant(
              variants,
              "size",
              "_270"
            ),

            [sty.box__size__360__xIVtnIJwg]: hasVariant(
              variants,
              "size",
              "_360"
            ),

            [sty.box__size__380__xIVtnjPz7F]: hasVariant(
              variants,
              "size",
              "_380"
            ),

            [sty.box__size_medium__xIVtnB5Hz2]: hasVariant(
              variants,
              "size",
              "medium"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <input
                className={classNames(defaultcss.input, sty.textbox__peJSr)}
                placeholder={"enter text"}
                size={1}
                type={"text"}
                value={""}
              />
            ),

            value: args.inputText,
            className: classNames(sty.slotInputText, {
              [sty.slotInputText__size__180]: hasVariant(
                variants,
                "size",
                "_180"
              ),

              [sty.slotInputText__size__270]: hasVariant(
                variants,
                "size",
                "_270"
              ),

              [sty.slotInputText__size__380]: hasVariant(
                variants,
                "size",
                "_380"
              ),

              [sty.slotInputText__size__540]: hasVariant(
                variants,
                "size",
                "_540"
              ),

              [sty.slotInputText__size_medium]: hasVariant(
                variants,
                "size",
                "medium"
              )
            })
          })}
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "parent"],
  parent: ["parent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextFormInput__ArgProps,
      internalVariantPropNames: PlasmicTextFormInput__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTextFormInput__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextFormInput";
  } else {
    func.displayName = `PlasmicTextFormInput.${nodeName}`;
  }
  return func;
}

export const PlasmicTextFormInput = Object.assign(
  // Top-level PlasmicTextFormInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    // Metadata about props expected for PlasmicTextFormInput
    internalVariantProps: PlasmicTextFormInput__VariantProps,
    internalArgProps: PlasmicTextFormInput__ArgProps
  }
);

export default PlasmicTextFormInput;
/* prettier-ignore-end */
