// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: b7t7JoTYk7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPanelButtonMenuItem.module.css"; // plasmic-import: b7t7JoTYk7/css

export const PlasmicPanelButtonMenuItem__VariantProps = new Array();

export const PlasmicPanelButtonMenuItem__ArgProps = new Array(
  "subheadText",
  "headlineText"
);

function PlasmicPanelButtonMenuItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.parent
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"textParent"}
        data-plasmic-override={overrides.textParent}
        hasGap={true}
        className={classNames(defaultcss.all, projectcss.all, sty.textParent)}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__a3XqS
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Headline text",
            value: args.headlineText,
            className: classNames(sty.slotTargetHeadlineText)
          })}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__scfLh
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Sub head text",
            value: args.subheadText,
            className: classNames(sty.slotTargetSubheadText)
          })}
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  parent: ["parent", "textParent"],
  textParent: ["textParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelButtonMenuItem__ArgProps,
      internalVariantPropNames: PlasmicPanelButtonMenuItem__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPanelButtonMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicPanelButtonMenuItem";
  } else {
    func.displayName = `PlasmicPanelButtonMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelButtonMenuItem = Object.assign(
  // Top-level PlasmicPanelButtonMenuItem renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    textParent: makeNodeComponent("textParent"),
    // Metadata about props expected for PlasmicPanelButtonMenuItem
    internalVariantProps: PlasmicPanelButtonMenuItem__VariantProps,
    internalArgProps: PlasmicPanelButtonMenuItem__ArgProps
  }
);

export default PlasmicPanelButtonMenuItem;
/* prettier-ignore-end */
