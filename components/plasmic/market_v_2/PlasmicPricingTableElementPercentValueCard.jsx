// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: _pXR7Qf3J2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPricingTableElementPercentValueCard.module.css"; // plasmic-import: _pXR7Qf3J2/css
import Icon122Icon from "./icons/PlasmicIcon__Icon122"; // plasmic-import: 5y-W1ac1tp/icon

export const PlasmicPricingTableElementPercentValueCard__VariantProps =
  new Array();

export const PlasmicPricingTableElementPercentValueCard__ArgProps = new Array(
  "featureValuePropText",
  "percent",
  "numberValue",
  "svgIcon"
);

function PlasmicPricingTableElementPercentValueCard__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"svgIconParent"}
        data-plasmic-override={overrides.svgIconParent}
        className={classNames(defaultcss.all, sty.svgIconParent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Icon122Icon
              className={classNames(defaultcss.all, sty.svg__hCJgK)}
              role={"img"}
            />
          ),

          value: args.svgIcon
        })}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"numberValuePercentParent"}
        data-plasmic-override={overrides.numberValuePercentParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.numberValuePercentParent)}
      >
        <div
          data-plasmic-name={"numberValueParent"}
          data-plasmic-override={overrides.numberValueParent}
          className={classNames(defaultcss.all, sty.numberValueParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "5",
            value: args.numberValue,
            className: classNames(sty.slotNumberValue)
          })}
        </div>

        <div
          data-plasmic-name={"percentParent"}
          data-plasmic-override={overrides.percentParent}
          className={classNames(defaultcss.all, sty.percentParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "%",
            value: args.percent,
            className: classNames(sty.slotPercent)
          })}
        </div>
      </p.Stack>

      <div
        data-plasmic-name={"featureValuePropTextParent"}
        data-plasmic-override={overrides.featureValuePropTextParent}
        className={classNames(defaultcss.all, sty.featureValuePropTextParent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Service rate on earned income",
          value: args.featureValuePropText,
          className: classNames(sty.slotFeatureValuePropText)
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "svgIconParent",
    "numberValuePercentParent",
    "numberValueParent",
    "percentParent",
    "featureValuePropTextParent"
  ],

  svgIconParent: ["svgIconParent"],
  numberValuePercentParent: [
    "numberValuePercentParent",
    "numberValueParent",
    "percentParent"
  ],

  numberValueParent: ["numberValueParent"],
  percentParent: ["percentParent"],
  featureValuePropTextParent: ["featureValuePropTextParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames:
        PlasmicPricingTableElementPercentValueCard__ArgProps,
      internalVariantPropNames:
        PlasmicPricingTableElementPercentValueCard__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPricingTableElementPercentValueCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingTableElementPercentValueCard";
  } else {
    func.displayName = `PlasmicPricingTableElementPercentValueCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingTableElementPercentValueCard = Object.assign(
  // Top-level PlasmicPricingTableElementPercentValueCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svgIconParent: makeNodeComponent("svgIconParent"),
    numberValuePercentParent: makeNodeComponent("numberValuePercentParent"),
    numberValueParent: makeNodeComponent("numberValueParent"),
    percentParent: makeNodeComponent("percentParent"),
    featureValuePropTextParent: makeNodeComponent("featureValuePropTextParent"),
    // Metadata about props expected for PlasmicPricingTableElementPercentValueCard
    internalVariantProps:
      PlasmicPricingTableElementPercentValueCard__VariantProps,
    internalArgProps: PlasmicPricingTableElementPercentValueCard__ArgProps
  }
);

export default PlasmicPricingTableElementPercentValueCard;
/* prettier-ignore-end */
