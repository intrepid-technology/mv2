// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: pCEmHN-z0K
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: pP9c6XTFzc/component
import Sidebar from "../../Sidebar"; // plasmic-import: WJhSPQRdlH/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import { useLayout } from "./PlasmicGlobalVariant__Layout"; // plasmic-import: yRz57WAHKe/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicLayout.module.css"; // plasmic-import: pCEmHN-z0K/css

export const PlasmicLayout__VariantProps = new Array();

export const PlasmicLayout__ArgProps = new Array("main");

function PlasmicLayout__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    layout: useLayout()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Navbar
        data-plasmic-name={"navbar"}
        data-plasmic-override={overrides.navbar}
        auth={"auth"}
        className={classNames("__wab_instance", sty.navbar, {
          [sty.navbar__global_layout_sidebarOpen]: hasVariant(
            globalVariants,
            "layout",
            "sidebarOpen"
          )
        })}
      />

      {(hasVariant(globalVariants, "layout", "sidebarOpen") ? true : true) ? (
        <Sidebar
          data-plasmic-name={"sidebar"}
          data-plasmic-override={overrides.sidebar}
          className={classNames("__wab_instance", sty.sidebar, {
            [sty.sidebar__global_layout_sidebarOpen]: hasVariant(
              globalVariants,
              "layout",
              "sidebarOpen"
            )
          })}
        />
      ) : null}

      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(defaultcss.all, sty.body, {
          [sty.body__global_layout_sidebarOpen]: hasVariant(
            globalVariants,
            "layout",
            "sidebarOpen"
          )
        })}
      >
        <div
          data-plasmic-name={"main"}
          data-plasmic-override={overrides.main}
          className={classNames(defaultcss.all, sty.main, {
            [sty.main__global_layout_sidebarOpen]: hasVariant(
              globalVariants,
              "layout",
              "sidebarOpen"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.main
          })}

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "navbar", "sidebar", "body", "main", "footerB"],
  navbar: ["navbar"],
  sidebar: ["sidebar"],
  body: ["body", "main", "footerB"],
  main: ["main", "footerB"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLayout__ArgProps,
      internalVariantPropNames: PlasmicLayout__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicLayout__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayout";
  } else {
    func.displayName = `PlasmicLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicLayout = Object.assign(
  // Top-level PlasmicLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    sidebar: makeNodeComponent("sidebar"),
    body: makeNodeComponent("body"),
    main: makeNodeComponent("main"),
    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicLayout
    internalVariantProps: PlasmicLayout__VariantProps,
    internalArgProps: PlasmicLayout__ArgProps
  }
);

export default PlasmicLayout;
/* prettier-ignore-end */
