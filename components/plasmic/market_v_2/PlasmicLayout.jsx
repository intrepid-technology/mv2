// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: pCEmHN-z0K
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SidebarV2 from "../../SidebarV2"; // plasmic-import: cjK2bQuz6A3/component
import Button from "../../Button"; // plasmic-import: ftJnovScMuV/component
import NavbarUserAdmin from "../../NavbarUserAdmin"; // plasmic-import: ZMyXOaiDBH_/component
import PageBreadcrumbs from "../../PageBreadcrumbs"; // plasmic-import: ZTbdEO5NC7/component
import PageTabNavigations from "../../PageTabNavigations"; // plasmic-import: 8FwFZYKbmK/component
import Tab from "../../Tab"; // plasmic-import: tCiyOEgIeVL/component
import PageScrollNavigations from "../../PageScrollNavigations"; // plasmic-import: 4xruSD_IDH/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicLayout.module.css"; // plasmic-import: pCEmHN-z0K/css
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: naG0WWoBul/icon

export const PlasmicLayout__VariantProps = new Array("contentOnly");

export const PlasmicLayout__ArgProps = new Array(
  "main",
  "tabNavigationWrapper",
  "breadcrumbsWrapper",
  "scrollNavigationWrapper",
  "pageHeading"
);

function PlasmicLayout__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <SidebarV2
        data-plasmic-name={"sidebarV2"}
        data-plasmic-override={overrides.sidebarV2}
        className={classNames("__wab_instance", sty.sidebarV2)}
      />

      {(hasVariant(variants, "contentOnly", "contentOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"navigationWrapper"}
          data-plasmic-override={overrides.navigationWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.navigationWrapper, {
            [sty.navigationWrapper__contentOnly]: hasVariant(
              variants,
              "contentOnly",
              "contentOnly"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ykgkb)}
            >
              <div
                data-plasmic-name={"navBackButtonWrapper"}
                data-plasmic-override={overrides.navBackButtonWrapper}
                className={classNames(projectcss.all, sty.navBackButtonWrapper)}
              >
                <Button
                  data-plasmic-name={"navBackButton"}
                  data-plasmic-override={overrides.navBackButton}
                  className={classNames("__wab_instance", sty.navBackButton)}
                  hasShadow={true}
                  noPadding={true}
                  rounded={true}
                  type={"secondary"}
                >
                  <Icon43Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__gbuVt)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Enter some text",
                  value: args.pageHeading,
                  className: classNames(sty.slotTargetPageHeading)
                })}
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__gSmZe)}>
              <NavbarUserAdmin
                data-plasmic-name={"navbarUserAdmin"}
                data-plasmic-override={overrides.navbarUserAdmin}
                className={classNames("__wab_instance", sty.navbarUserAdmin)}
              />
            </div>
          </p.Stack>

          {(
            hasVariant(variants, "contentOnly", "contentOnly") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"breadcrumbs"}
              data-plasmic-override={overrides.breadcrumbs}
              hasGap={true}
              className={classNames(projectcss.all, sty.breadcrumbs, {
                [sty.breadcrumbs__contentOnly]: hasVariant(
                  variants,
                  "contentOnly",
                  "contentOnly"
                )
              })}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"breadcrumbsWrapper"}
                data-plasmic-override={overrides.breadcrumbsWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.breadcrumbsWrapper)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <PageBreadcrumbs
                      className={classNames(
                        "__wab_instance",
                        sty.pageBreadcrumbs___3DjXg
                      )}
                    />
                  ),

                  value: args.breadcrumbsWrapper
                })}
              </p.Stack>
            </p.Stack>
          ) : null}
          {(
            hasVariant(variants, "contentOnly", "contentOnly") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"tabNavigation"}
              data-plasmic-override={overrides.tabNavigation}
              hasGap={true}
              className={classNames(projectcss.all, sty.tabNavigation, {
                [sty.tabNavigation__contentOnly]: hasVariant(
                  variants,
                  "contentOnly",
                  "contentOnly"
                )
              })}
            >
              <div
                data-plasmic-name={"tabNavigationWrapper"}
                data-plasmic-override={overrides.tabNavigationWrapper}
                className={classNames(projectcss.all, sty.tabNavigationWrapper)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <PageTabNavigations
                      className={classNames(
                        "__wab_instance",
                        sty.pageTabNavigations__eko8L
                      )}
                    >
                      <Tab
                        activeBorder={"bottom"}
                        className={classNames("__wab_instance", sty.tab___2XeM)}
                        label={"Tab 1"}
                        state={"selected"}
                      />

                      <Tab
                        className={classNames("__wab_instance", sty.tab__nnupj)}
                        label={"Tab 2"}
                      />

                      <Tab
                        className={classNames("__wab_instance", sty.tab__iExMf)}
                        label={"Tab 3"}
                      />
                    </PageTabNavigations>
                  ),

                  value: args.tabNavigationWrapper
                })}
              </div>
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "contentOnly", "contentOnly") ? false : true) ? (
        <div
          data-plasmic-name={"scrollNavigationWrapper"}
          data-plasmic-override={overrides.scrollNavigationWrapper}
          className={classNames(projectcss.all, sty.scrollNavigationWrapper, {
            [sty.scrollNavigationWrapper__contentOnly]: hasVariant(
              variants,
              "contentOnly",
              "contentOnly"
            )
          })}
        >
          <div
            data-plasmic-name={"scrollNavigation"}
            data-plasmic-override={overrides.scrollNavigation}
            className={classNames(projectcss.all, sty.scrollNavigation)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <PageScrollNavigations
                  className={classNames(
                    "__wab_instance",
                    sty.pageScrollNavigations__eBwom
                  )}
                >
                  <Tab
                    activeBorder={"left"}
                    className={classNames("__wab_instance", sty.tab__qIx6T)}
                    label={"Section 1"}
                    state={"selected"}
                  />

                  <Tab
                    className={classNames("__wab_instance", sty.tab___4QAdV)}
                    label={"Section 2"}
                  />

                  <Tab
                    className={classNames("__wab_instance", sty.tab___4Ahss)}
                    label={"Section 3"}
                  />
                </PageScrollNavigations>
              ),

              value: args.scrollNavigationWrapper
            })}
          </div>
        </div>
      ) : null}

      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body)}
      >
        <div
          data-plasmic-name={"main"}
          data-plasmic-override={overrides.main}
          className={classNames(projectcss.all, sty.main, {
            [sty.main__contentOnly]: hasVariant(
              variants,
              "contentOnly",
              "contentOnly"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"mainContentWrapper"}
            data-plasmic-override={overrides.mainContentWrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.mainContentWrapper, {
              [sty.mainContentWrapper__contentOnly]: hasVariant(
                variants,
                "contentOnly",
                "contentOnly"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.main
            })}
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebarV2",
    "navigationWrapper",
    "header",
    "navBackButtonWrapper",
    "navBackButton",
    "svg",
    "navbarUserAdmin",
    "breadcrumbs",
    "breadcrumbsWrapper",
    "tabNavigation",
    "tabNavigationWrapper",
    "scrollNavigationWrapper",
    "scrollNavigation",
    "body",
    "main",
    "mainContentWrapper",
    "footerB"
  ],

  sidebarV2: ["sidebarV2"],
  navigationWrapper: [
    "navigationWrapper",
    "header",
    "navBackButtonWrapper",
    "navBackButton",
    "svg",
    "navbarUserAdmin",
    "breadcrumbs",
    "breadcrumbsWrapper",
    "tabNavigation",
    "tabNavigationWrapper"
  ],

  header: [
    "header",
    "navBackButtonWrapper",
    "navBackButton",
    "svg",
    "navbarUserAdmin"
  ],

  navBackButtonWrapper: ["navBackButtonWrapper", "navBackButton", "svg"],
  navBackButton: ["navBackButton", "svg"],
  svg: ["svg"],
  navbarUserAdmin: ["navbarUserAdmin"],
  breadcrumbs: ["breadcrumbs", "breadcrumbsWrapper"],
  breadcrumbsWrapper: ["breadcrumbsWrapper"],
  tabNavigation: ["tabNavigation", "tabNavigationWrapper"],
  tabNavigationWrapper: ["tabNavigationWrapper"],
  scrollNavigationWrapper: ["scrollNavigationWrapper", "scrollNavigation"],
  scrollNavigation: ["scrollNavigation"],
  body: ["body", "main", "mainContentWrapper", "footerB"],
  main: ["main", "mainContentWrapper", "footerB"],
  mainContentWrapper: ["mainContentWrapper"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLayout__ArgProps,
      internalVariantPropNames: PlasmicLayout__VariantProps
    });

    return PlasmicLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayout";
  } else {
    func.displayName = `PlasmicLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicLayout = Object.assign(
  // Top-level PlasmicLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebarV2: makeNodeComponent("sidebarV2"),
    navigationWrapper: makeNodeComponent("navigationWrapper"),
    header: makeNodeComponent("header"),
    navBackButtonWrapper: makeNodeComponent("navBackButtonWrapper"),
    navBackButton: makeNodeComponent("navBackButton"),
    svg: makeNodeComponent("svg"),
    navbarUserAdmin: makeNodeComponent("navbarUserAdmin"),
    breadcrumbs: makeNodeComponent("breadcrumbs"),
    breadcrumbsWrapper: makeNodeComponent("breadcrumbsWrapper"),
    tabNavigation: makeNodeComponent("tabNavigation"),
    tabNavigationWrapper: makeNodeComponent("tabNavigationWrapper"),
    scrollNavigationWrapper: makeNodeComponent("scrollNavigationWrapper"),
    scrollNavigation: makeNodeComponent("scrollNavigation"),
    body: makeNodeComponent("body"),
    main: makeNodeComponent("main"),
    mainContentWrapper: makeNodeComponent("mainContentWrapper"),
    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicLayout
    internalVariantProps: PlasmicLayout__VariantProps,
    internalArgProps: PlasmicLayout__ArgProps
  }
);

export default PlasmicLayout;
/* prettier-ignore-end */
