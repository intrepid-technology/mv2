// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: JsYhtV8o3HC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import BadgeCommunityRating from "../../BadgeCommunityRating"; // plasmic-import: 0Y8M1lpCIf/component
import BadgeVerification from "../../BadgeVerification"; // plasmic-import: _M5uzrbjQp/component
import TagMemberC from "../../TagMemberC"; // plasmic-import: CybzTEvXYq/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSideBarCommunityStats.module.css"; // plasmic-import: JsYhtV8o3HC/css

export const PlasmicSideBarCommunityStats__VariantProps = new Array();

export const PlasmicSideBarCommunityStats__ArgProps = new Array(
  "elementUserbadges",
  "userTag"
);

function PlasmicSideBarCommunityStats__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box___2OV0G)}
      >
        <div
          data-plasmic-name={"elementHeadline"}
          data-plasmic-override={overrides.elementHeadline}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.elementHeadline
          )}
        >
          {"Community"}
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserbadges"}
          data-plasmic-override={overrides.elementUserbadges}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementUserbadges)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <BadgeCommunityRating
                  className={classNames(
                    "__wab_instance",
                    sty.badgeCommunityRating__tagqX
                  )}
                />

                <BadgeVerification
                  className={classNames(
                    "__wab_instance",
                    sty.badgeVerification__jz8Ki
                  )}
                />
              </React.Fragment>
            ),

            value: args.elementUserbadges
          })}

          {p.renderPlasmicSlot({
            defaultContents: (
              <TagMemberC
                className={classNames("__wab_instance", sty.tagMemberC__vBdfP)}
              />
            ),

            value: args.userTag
          })}
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"elementUserSocialFollowing"}
        data-plasmic-override={overrides.elementUserSocialFollowing}
        hasGap={true}
        className={classNames(defaultcss.all, sty.elementUserSocialFollowing)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"followingParent"}
          data-plasmic-override={overrides.followingParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.followingParent)}
        >
          <div
            data-plasmic-name={"followingCountNumber"}
            data-plasmic-override={overrides.followingCountNumber}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.followingCountNumber
            )}
          >
            {"-"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__ehvI9
            )}
          >
            {"Members"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"followersParent"}
          data-plasmic-override={overrides.followersParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.followersParent)}
        >
          <div
            data-plasmic-name={"followerCountNumber"}
            data-plasmic-override={overrides.followerCountNumber}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.followerCountNumber
            )}
          >
            {"-"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__ii48V
            )}
          >
            {"Partners"}
          </div>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"elementUserSocialFollowing2"}
        data-plasmic-override={overrides.elementUserSocialFollowing2}
        hasGap={true}
        className={classNames(defaultcss.all, sty.elementUserSocialFollowing2)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"followingParent2"}
          data-plasmic-override={overrides.followingParent2}
          hasGap={true}
          className={classNames(defaultcss.all, sty.followingParent2)}
        >
          <div
            data-plasmic-name={"followingCountNumber2"}
            data-plasmic-override={overrides.followingCountNumber2}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.followingCountNumber2
            )}
          >
            {"-"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__xOZjq
            )}
          >
            {"Followers"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"followersParent2"}
          data-plasmic-override={overrides.followersParent2}
          hasGap={true}
          className={classNames(defaultcss.all, sty.followersParent2)}
        >
          <div
            data-plasmic-name={"followerCountNumber2"}
            data-plasmic-override={overrides.followerCountNumber2}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.followerCountNumber2
            )}
          >
            {"-"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__qqpfd
            )}
          >
            {"Following"}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "elementHeadline",
    "elementUserbadges",
    "elementUserSocialFollowing",
    "followingParent",
    "followingCountNumber",
    "followersParent",
    "followerCountNumber",
    "elementUserSocialFollowing2",
    "followingParent2",
    "followingCountNumber2",
    "followersParent2",
    "followerCountNumber2"
  ],

  elementHeadline: ["elementHeadline"],
  elementUserbadges: ["elementUserbadges"],
  elementUserSocialFollowing: [
    "elementUserSocialFollowing",
    "followingParent",
    "followingCountNumber",
    "followersParent",
    "followerCountNumber"
  ],

  followingParent: ["followingParent", "followingCountNumber"],
  followingCountNumber: ["followingCountNumber"],
  followersParent: ["followersParent", "followerCountNumber"],
  followerCountNumber: ["followerCountNumber"],
  elementUserSocialFollowing2: [
    "elementUserSocialFollowing2",
    "followingParent2",
    "followingCountNumber2",
    "followersParent2",
    "followerCountNumber2"
  ],

  followingParent2: ["followingParent2", "followingCountNumber2"],
  followingCountNumber2: ["followingCountNumber2"],
  followersParent2: ["followersParent2", "followerCountNumber2"],
  followerCountNumber2: ["followerCountNumber2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideBarCommunityStats__ArgProps,
      internalVariantPropNames: PlasmicSideBarCommunityStats__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSideBarCommunityStats__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBarCommunityStats";
  } else {
    func.displayName = `PlasmicSideBarCommunityStats.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBarCommunityStats = Object.assign(
  // Top-level PlasmicSideBarCommunityStats renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    elementHeadline: makeNodeComponent("elementHeadline"),
    elementUserbadges: makeNodeComponent("elementUserbadges"),
    elementUserSocialFollowing: makeNodeComponent("elementUserSocialFollowing"),
    followingParent: makeNodeComponent("followingParent"),
    followingCountNumber: makeNodeComponent("followingCountNumber"),
    followersParent: makeNodeComponent("followersParent"),
    followerCountNumber: makeNodeComponent("followerCountNumber"),
    elementUserSocialFollowing2: makeNodeComponent(
      "elementUserSocialFollowing2"
    ),

    followingParent2: makeNodeComponent("followingParent2"),
    followingCountNumber2: makeNodeComponent("followingCountNumber2"),
    followersParent2: makeNodeComponent("followersParent2"),
    followerCountNumber2: makeNodeComponent("followerCountNumber2"),
    // Metadata about props expected for PlasmicSideBarCommunityStats
    internalVariantProps: PlasmicSideBarCommunityStats__VariantProps,
    internalArgProps: PlasmicSideBarCommunityStats__ArgProps
  }
);

export default PlasmicSideBarCommunityStats;
/* prettier-ignore-end */
