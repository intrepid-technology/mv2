// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: JsYhtV8o3HC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: e_QdjWvrde/component
import TagMemberD from "../../TagMemberD"; // plasmic-import: Ixqb_1Xdrz/component
import TagPartnerD from "../../TagPartnerD"; // plasmic-import: cHSOn6vPGV/component
import BadgeVerification from "../../BadgeVerification"; // plasmic-import: _M5uzrbjQp/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSideBarCommunityStats.module.css"; // plasmic-import: JsYhtV8o3HC/css

export const PlasmicSideBarCommunityStats__VariantProps = new Array("user");

export const PlasmicSideBarCommunityStats__ArgProps = new Array();

function PlasmicSideBarCommunityStats__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__user_member]: hasVariant(variants, "user", "member"),
        [sty.root__user_partner]: hasVariant(variants, "user", "partner")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"headlineParent"}
        data-plasmic-override={overrides.headlineParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.headlineParent)}
      >
        <div
          data-plasmic-name={"headlineCommunity"}
          data-plasmic-override={overrides.headlineCommunity}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.headlineCommunity,
            {
              [sty.headlineCommunity__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),

              [sty.headlineCommunity__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          {"Community"}
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserbadges"}
          data-plasmic-override={overrides.elementUserbadges}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementUserbadges, {
            [sty.elementUserbadges__user_partner]: hasVariant(
              variants,
              "user",
              "partner"
            )
          })}
        >
          <RatingDisplayDetail
            data-plasmic-name={"ratingDisplayDetail"}
            data-plasmic-override={overrides.ratingDisplayDetail}
            className={classNames("__wab_instance", sty.ratingDisplayDetail)}
            size={"_16"}
          />

          {(hasVariant(variants, "user", "partner") ? false : true) ? (
            <TagMemberD
              data-plasmic-name={"tagMemberD"}
              data-plasmic-override={overrides.tagMemberD}
              className={classNames("__wab_instance", sty.tagMemberD, {
                [sty.tagMemberD__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                ),

                [sty.tagMemberD__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              })}
            />
          ) : null}
          {(hasVariant(variants, "user", "partner") ? true : false) ? (
            <TagPartnerD
              data-plasmic-name={"tagPartnerD"}
              data-plasmic-override={overrides.tagPartnerD}
              className={classNames("__wab_instance", sty.tagPartnerD, {
                [sty.tagPartnerD__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              })}
            />
          ) : null}

          <BadgeVerification
            data-plasmic-name={"badgeVerification"}
            data-plasmic-override={overrides.badgeVerification}
            className={classNames("__wab_instance", sty.badgeVerification)}
          />
        </p.Stack>
      </p.Stack>

      {(
        hasVariant(variants, "user", "partner")
          ? false
          : hasVariant(variants, "user", "member")
          ? false
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserSocialFollowingA"}
          data-plasmic-override={overrides.elementUserSocialFollowingA}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementUserSocialFollowingA,
            {
              [sty.elementUserSocialFollowingA__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),

              [sty.elementUserSocialFollowingA__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"followingParent2"}
            data-plasmic-override={overrides.followingParent2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.followingParent2, {
              [sty.followingParent2__user_member]: hasVariant(
                variants,
                "user",
                "member"
              )
            })}
          >
            <div
              data-plasmic-name={"followersNumberCount"}
              data-plasmic-override={overrides.followersNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.followersNumberCount
              )}
            >
              {"-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__xOZjq
              )}
            >
              {"Followers"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"followersParent2"}
            data-plasmic-override={overrides.followersParent2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.followersParent2)}
          >
            <div
              data-plasmic-name={"followingNumberCount"}
              data-plasmic-override={overrides.followingNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.followingNumberCount
              )}
            >
              {"-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__qqpfd,
                {
                  [sty.box__user_member__qqpfdDUag]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "Teams" : "Following"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "user", "member") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementMemberSubscriptionsLists"}
          data-plasmic-override={overrides.elementMemberSubscriptionsLists}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementMemberSubscriptionsLists,
            {
              [sty.elementMemberSubscriptionsLists__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),

              [sty.elementMemberSubscriptionsLists__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"memberSubscriptionCountParent"}
            data-plasmic-override={overrides.memberSubscriptionCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.memberSubscriptionCountParent,
              {
                [sty.memberSubscriptionCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"memberSubscriptionNumberCount"}
              data-plasmic-override={overrides.memberSubscriptionNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberSubscriptionNumberCount,
                {
                  [sty.memberSubscriptionNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.memberSubscriptionNumberCount__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "#####" : "-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ryhCi,
                {
                  [sty.box__user_member__ryhCiDUag]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member")
                ? "Subscriptions"
                : "Members"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"memberListsCountParent"}
            data-plasmic-override={overrides.memberListsCountParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.memberListsCountParent, {
              [sty.memberListsCountParent__user_member]: hasVariant(
                variants,
                "user",
                "member"
              )
            })}
          >
            <div
              data-plasmic-name={"memberListNumberCount"}
              data-plasmic-override={overrides.memberListNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberListNumberCount,
                {
                  [sty.memberListNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "#####" : "-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__uRoh2,
                {
                  [sty.box__user_member__uRoh2DUag]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "Lists" : "Partners"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "user", "member") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementMemberFollowersTeams"}
          data-plasmic-override={overrides.elementMemberFollowersTeams}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementMemberFollowersTeams,
            {
              [sty.elementMemberFollowersTeams__user_member]: hasVariant(
                variants,
                "user",
                "member"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"memberConnectionCountParent"}
            data-plasmic-override={overrides.memberConnectionCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.memberConnectionCountParent,
              {
                [sty.memberConnectionCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"memberConnectionNumberCount"}
              data-plasmic-override={overrides.memberConnectionNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberConnectionNumberCount,
                {
                  [sty.memberConnectionNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "#####" : "-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__vfmsc,
                {
                  [sty.box__user_member__vfmscDUag]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "Teams" : "Connections"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"memberFollowersCountParent"}
            data-plasmic-override={overrides.memberFollowersCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.memberFollowersCountParent,
              {
                [sty.memberFollowersCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"memberfollowersNumberCount"}
              data-plasmic-override={overrides.memberfollowersNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberfollowersNumberCount,
                {
                  [sty.memberfollowersNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "#####" : "-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__xrkqa,
                {
                  [sty.box__user_member__xrkqaDUag]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {"Followers"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "user", "partner")
          ? false
          : hasVariant(variants, "user", "member")
          ? false
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserSocialFollowingB"}
          data-plasmic-override={overrides.elementUserSocialFollowingB}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementUserSocialFollowingB,
            {
              [sty.elementUserSocialFollowingB__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),

              [sty.elementUserSocialFollowingB__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"followingParent"}
            data-plasmic-override={overrides.followingParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.followingParent)}
          >
            <div
              data-plasmic-name={"memberNumberCount"}
              data-plasmic-override={overrides.memberNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberNumberCount
              )}
            >
              {"-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ehvI9,
                {
                  [sty.box__user_member__ehvI9DUag]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member")
                ? "Subscriptions"
                : "Members"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"followersParent"}
            data-plasmic-override={overrides.followersParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.followersParent, {
              [sty.followersParent__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),

              [sty.followersParent__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            })}
          >
            <div
              data-plasmic-name={"partnerNumberCount"}
              data-plasmic-override={overrides.partnerNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerNumberCount
              )}
            >
              {"-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ii48V,
                {
                  [sty.box__user_member__ii48VDUag]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "Lists" : "Partners"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "user", "partner")
          ? true
          : hasVariant(variants, "user", "member")
          ? false
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementPartnerSubscriberReviewsParent"}
          data-plasmic-override={
            overrides.elementPartnerSubscriberReviewsParent
          }
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementPartnerSubscriberReviewsParent,
            {
              [sty.elementPartnerSubscriberReviewsParent__user_member]:
                hasVariant(variants, "user", "member"),
              [sty.elementPartnerSubscriberReviewsParent__user_partner]:
                hasVariant(variants, "user", "partner")
            }
          )}
        >
          {(hasVariant(variants, "user", "member") ? false : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"partnerSubscriberCountParent"}
              data-plasmic-override={overrides.partnerSubscriberCountParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.partnerSubscriberCountParent,
                {
                  [sty.partnerSubscriberCountParent__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.partnerSubscriberCountParent__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              <div
                data-plasmic-name={"partnerSubscribersNumberCount"}
                data-plasmic-override={overrides.partnerSubscribersNumberCount}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.partnerSubscribersNumberCount,
                  {
                    [sty.partnerSubscribersNumberCount__user_member]:
                      hasVariant(variants, "user", "member"),
                    [sty.partnerSubscribersNumberCount__user_partner]:
                      hasVariant(variants, "user", "partner")
                  }
                )}
              >
                {hasVariant(variants, "user", "partner") ? "#####" : "-"}
              </div>

              <div
                data-plasmic-name={"partnerSubscribersText"}
                data-plasmic-override={overrides.partnerSubscribersText}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.partnerSubscribersText,
                  {
                    [sty.partnerSubscribersText__user_member]: hasVariant(
                      variants,
                      "user",
                      "member"
                    ),

                    [sty.partnerSubscribersText__user_partner]: hasVariant(
                      variants,
                      "user",
                      "partner"
                    )
                  }
                )}
              >
                {hasVariant(variants, "user", "partner")
                  ? "Subscribers"
                  : "Followers"}
              </div>
            </p.Stack>
          ) : null}
          {(hasVariant(variants, "user", "member") ? false : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"partnerTeamReviewCountParent"}
              data-plasmic-override={overrides.partnerTeamReviewCountParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.partnerTeamReviewCountParent,
                {
                  [sty.partnerTeamReviewCountParent__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.partnerTeamReviewCountParent__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              <div
                data-plasmic-name={"partnerReviewsNumberCount"}
                data-plasmic-override={overrides.partnerReviewsNumberCount}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.partnerReviewsNumberCount,
                  {
                    [sty.partnerReviewsNumberCount__user_member]: hasVariant(
                      variants,
                      "user",
                      "member"
                    ),

                    [sty.partnerReviewsNumberCount__user_partner]: hasVariant(
                      variants,
                      "user",
                      "partner"
                    )
                  }
                )}
              >
                {hasVariant(variants, "user", "partner") ? "#####" : "-"}
              </div>

              <div
                data-plasmic-name={"partnerReviewsText"}
                data-plasmic-override={overrides.partnerReviewsText}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.partnerReviewsText,
                  {
                    [sty.partnerReviewsText__user_member]: hasVariant(
                      variants,
                      "user",
                      "member"
                    ),

                    [sty.partnerReviewsText__user_partner]: hasVariant(
                      variants,
                      "user",
                      "partner"
                    )
                  }
                )}
              >
                {hasVariant(variants, "user", "partner")
                  ? "Reviews"
                  : hasVariant(variants, "user", "member")
                  ? "Teams"
                  : "Following"}
              </div>
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "user", "partner")
          ? true
          : hasVariant(variants, "user", "member")
          ? false
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserFollowersTeams3"}
          data-plasmic-override={overrides.elementUserFollowersTeams3}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementUserFollowersTeams3,
            {
              [sty.elementUserFollowersTeams3__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),

              [sty.elementUserFollowersTeams3__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"partnerConnectionsCountParent"}
            data-plasmic-override={overrides.partnerConnectionsCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.partnerConnectionsCountParent,
              {
                [sty.partnerConnectionsCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                ),

                [sty.partnerConnectionsCountParent__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"partnerFollowingNumberCount"}
              data-plasmic-override={overrides.partnerFollowingNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerFollowingNumberCount,
                {
                  [sty.partnerFollowingNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.partnerFollowingNumberCount__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "partner") ? "#####" : "-"}
            </div>

            <div
              data-plasmic-name={"partnerConnectionsText"}
              data-plasmic-override={overrides.partnerConnectionsText}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerConnectionsText,
                {
                  [sty.partnerConnectionsText__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.partnerConnectionsText__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "partner")
                ? "Following"
                : hasVariant(variants, "user", "member")
                ? "Teams"
                : "Connections"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"partnerFollowersCountParent"}
            data-plasmic-override={overrides.partnerFollowersCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.partnerFollowersCountParent,
              {
                [sty.partnerFollowersCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                ),

                [sty.partnerFollowersCountParent__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"partnerfollowersNumberCount"}
              data-plasmic-override={overrides.partnerfollowersNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerfollowersNumberCount,
                {
                  [sty.partnerfollowersNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.partnerfollowersNumberCount__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "partner") ? "#####" : "-"}
            </div>

            <div
              data-plasmic-name={"partnerFollowersText"}
              data-plasmic-override={overrides.partnerFollowersText}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerFollowersText,
                {
                  [sty.partnerFollowersText__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.partnerFollowersText__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "partner")
                ? "Followers"
                : "Followers"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "headlineParent",
    "headlineCommunity",
    "elementUserbadges",
    "ratingDisplayDetail",
    "tagMemberD",
    "tagPartnerD",
    "badgeVerification",
    "elementUserSocialFollowingA",
    "followingParent2",
    "followersNumberCount",
    "followersParent2",
    "followingNumberCount",
    "elementMemberSubscriptionsLists",
    "memberSubscriptionCountParent",
    "memberSubscriptionNumberCount",
    "memberListsCountParent",
    "memberListNumberCount",
    "elementMemberFollowersTeams",
    "memberConnectionCountParent",
    "memberConnectionNumberCount",
    "memberFollowersCountParent",
    "memberfollowersNumberCount",
    "elementUserSocialFollowingB",
    "followingParent",
    "memberNumberCount",
    "followersParent",
    "partnerNumberCount",
    "elementPartnerSubscriberReviewsParent",
    "partnerSubscriberCountParent",
    "partnerSubscribersNumberCount",
    "partnerSubscribersText",
    "partnerTeamReviewCountParent",
    "partnerReviewsNumberCount",
    "partnerReviewsText",
    "elementUserFollowersTeams3",
    "partnerConnectionsCountParent",
    "partnerFollowingNumberCount",
    "partnerConnectionsText",
    "partnerFollowersCountParent",
    "partnerfollowersNumberCount",
    "partnerFollowersText"
  ],

  headlineParent: [
    "headlineParent",
    "headlineCommunity",
    "elementUserbadges",
    "ratingDisplayDetail",
    "tagMemberD",
    "tagPartnerD",
    "badgeVerification"
  ],

  headlineCommunity: ["headlineCommunity"],
  elementUserbadges: [
    "elementUserbadges",
    "ratingDisplayDetail",
    "tagMemberD",
    "tagPartnerD",
    "badgeVerification"
  ],

  ratingDisplayDetail: ["ratingDisplayDetail"],
  tagMemberD: ["tagMemberD"],
  tagPartnerD: ["tagPartnerD"],
  badgeVerification: ["badgeVerification"],
  elementUserSocialFollowingA: [
    "elementUserSocialFollowingA",
    "followingParent2",
    "followersNumberCount",
    "followersParent2",
    "followingNumberCount"
  ],

  followingParent2: ["followingParent2", "followersNumberCount"],
  followersNumberCount: ["followersNumberCount"],
  followersParent2: ["followersParent2", "followingNumberCount"],
  followingNumberCount: ["followingNumberCount"],
  elementMemberSubscriptionsLists: [
    "elementMemberSubscriptionsLists",
    "memberSubscriptionCountParent",
    "memberSubscriptionNumberCount",
    "memberListsCountParent",
    "memberListNumberCount"
  ],

  memberSubscriptionCountParent: [
    "memberSubscriptionCountParent",
    "memberSubscriptionNumberCount"
  ],

  memberSubscriptionNumberCount: ["memberSubscriptionNumberCount"],
  memberListsCountParent: ["memberListsCountParent", "memberListNumberCount"],
  memberListNumberCount: ["memberListNumberCount"],
  elementMemberFollowersTeams: [
    "elementMemberFollowersTeams",
    "memberConnectionCountParent",
    "memberConnectionNumberCount",
    "memberFollowersCountParent",
    "memberfollowersNumberCount"
  ],

  memberConnectionCountParent: [
    "memberConnectionCountParent",
    "memberConnectionNumberCount"
  ],

  memberConnectionNumberCount: ["memberConnectionNumberCount"],
  memberFollowersCountParent: [
    "memberFollowersCountParent",
    "memberfollowersNumberCount"
  ],

  memberfollowersNumberCount: ["memberfollowersNumberCount"],
  elementUserSocialFollowingB: [
    "elementUserSocialFollowingB",
    "followingParent",
    "memberNumberCount",
    "followersParent",
    "partnerNumberCount"
  ],

  followingParent: ["followingParent", "memberNumberCount"],
  memberNumberCount: ["memberNumberCount"],
  followersParent: ["followersParent", "partnerNumberCount"],
  partnerNumberCount: ["partnerNumberCount"],
  elementPartnerSubscriberReviewsParent: [
    "elementPartnerSubscriberReviewsParent",
    "partnerSubscriberCountParent",
    "partnerSubscribersNumberCount",
    "partnerSubscribersText",
    "partnerTeamReviewCountParent",
    "partnerReviewsNumberCount",
    "partnerReviewsText"
  ],

  partnerSubscriberCountParent: [
    "partnerSubscriberCountParent",
    "partnerSubscribersNumberCount",
    "partnerSubscribersText"
  ],

  partnerSubscribersNumberCount: ["partnerSubscribersNumberCount"],
  partnerSubscribersText: ["partnerSubscribersText"],
  partnerTeamReviewCountParent: [
    "partnerTeamReviewCountParent",
    "partnerReviewsNumberCount",
    "partnerReviewsText"
  ],

  partnerReviewsNumberCount: ["partnerReviewsNumberCount"],
  partnerReviewsText: ["partnerReviewsText"],
  elementUserFollowersTeams3: [
    "elementUserFollowersTeams3",
    "partnerConnectionsCountParent",
    "partnerFollowingNumberCount",
    "partnerConnectionsText",
    "partnerFollowersCountParent",
    "partnerfollowersNumberCount",
    "partnerFollowersText"
  ],

  partnerConnectionsCountParent: [
    "partnerConnectionsCountParent",
    "partnerFollowingNumberCount",
    "partnerConnectionsText"
  ],

  partnerFollowingNumberCount: ["partnerFollowingNumberCount"],
  partnerConnectionsText: ["partnerConnectionsText"],
  partnerFollowersCountParent: [
    "partnerFollowersCountParent",
    "partnerfollowersNumberCount",
    "partnerFollowersText"
  ],

  partnerfollowersNumberCount: ["partnerfollowersNumberCount"],
  partnerFollowersText: ["partnerFollowersText"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideBarCommunityStats__ArgProps,
      internalVariantPropNames: PlasmicSideBarCommunityStats__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSideBarCommunityStats__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBarCommunityStats";
  } else {
    func.displayName = `PlasmicSideBarCommunityStats.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBarCommunityStats = Object.assign(
  // Top-level PlasmicSideBarCommunityStats renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headlineParent: makeNodeComponent("headlineParent"),
    headlineCommunity: makeNodeComponent("headlineCommunity"),
    elementUserbadges: makeNodeComponent("elementUserbadges"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),
    tagMemberD: makeNodeComponent("tagMemberD"),
    tagPartnerD: makeNodeComponent("tagPartnerD"),
    badgeVerification: makeNodeComponent("badgeVerification"),
    elementUserSocialFollowingA: makeNodeComponent(
      "elementUserSocialFollowingA"
    ),

    followingParent2: makeNodeComponent("followingParent2"),
    followersNumberCount: makeNodeComponent("followersNumberCount"),
    followersParent2: makeNodeComponent("followersParent2"),
    followingNumberCount: makeNodeComponent("followingNumberCount"),
    elementMemberSubscriptionsLists: makeNodeComponent(
      "elementMemberSubscriptionsLists"
    ),

    memberSubscriptionCountParent: makeNodeComponent(
      "memberSubscriptionCountParent"
    ),

    memberSubscriptionNumberCount: makeNodeComponent(
      "memberSubscriptionNumberCount"
    ),

    memberListsCountParent: makeNodeComponent("memberListsCountParent"),
    memberListNumberCount: makeNodeComponent("memberListNumberCount"),
    elementMemberFollowersTeams: makeNodeComponent(
      "elementMemberFollowersTeams"
    ),

    memberConnectionCountParent: makeNodeComponent(
      "memberConnectionCountParent"
    ),

    memberConnectionNumberCount: makeNodeComponent(
      "memberConnectionNumberCount"
    ),

    memberFollowersCountParent: makeNodeComponent("memberFollowersCountParent"),
    memberfollowersNumberCount: makeNodeComponent("memberfollowersNumberCount"),
    elementUserSocialFollowingB: makeNodeComponent(
      "elementUserSocialFollowingB"
    ),

    followingParent: makeNodeComponent("followingParent"),
    memberNumberCount: makeNodeComponent("memberNumberCount"),
    followersParent: makeNodeComponent("followersParent"),
    partnerNumberCount: makeNodeComponent("partnerNumberCount"),
    elementPartnerSubscriberReviewsParent: makeNodeComponent(
      "elementPartnerSubscriberReviewsParent"
    ),

    partnerSubscriberCountParent: makeNodeComponent(
      "partnerSubscriberCountParent"
    ),

    partnerSubscribersNumberCount: makeNodeComponent(
      "partnerSubscribersNumberCount"
    ),

    partnerSubscribersText: makeNodeComponent("partnerSubscribersText"),
    partnerTeamReviewCountParent: makeNodeComponent(
      "partnerTeamReviewCountParent"
    ),

    partnerReviewsNumberCount: makeNodeComponent("partnerReviewsNumberCount"),
    partnerReviewsText: makeNodeComponent("partnerReviewsText"),
    elementUserFollowersTeams3: makeNodeComponent("elementUserFollowersTeams3"),
    partnerConnectionsCountParent: makeNodeComponent(
      "partnerConnectionsCountParent"
    ),

    partnerFollowingNumberCount: makeNodeComponent(
      "partnerFollowingNumberCount"
    ),

    partnerConnectionsText: makeNodeComponent("partnerConnectionsText"),
    partnerFollowersCountParent: makeNodeComponent(
      "partnerFollowersCountParent"
    ),

    partnerfollowersNumberCount: makeNodeComponent(
      "partnerfollowersNumberCount"
    ),

    partnerFollowersText: makeNodeComponent("partnerFollowersText"),
    // Metadata about props expected for PlasmicSideBarCommunityStats
    internalVariantProps: PlasmicSideBarCommunityStats__VariantProps,
    internalArgProps: PlasmicSideBarCommunityStats__ArgProps
  }
);

export default PlasmicSideBarCommunityStats;
/* prettier-ignore-end */
