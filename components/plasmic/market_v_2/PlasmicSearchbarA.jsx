// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: MorSLptejY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSearchbarA.module.css"; // plasmic-import: MorSLptejY/css
import Icon174Icon from "./icons/PlasmicIcon__Icon174"; // plasmic-import: yq36rktOQq/icon

export const PlasmicSearchbarA__VariantProps = new Array("width", "height");

export const PlasmicSearchbarA__ArgProps = new Array("children");

function PlasmicSearchbarA__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__height__36]: hasVariant(variants, "height", "_36"),
        [sty.root__height__40]: hasVariant(variants, "height", "_40"),
        [sty.root__width__180]: hasVariant(variants, "width", "_180"),
        [sty.root__width__270]: hasVariant(variants, "width", "_270"),
        [sty.root__width__360]: hasVariant(variants, "width", "_360")
      })}
    >
      <div
        data-plasmic-name={"searchSvgbg"}
        data-plasmic-override={overrides.searchSvgbg}
        className={classNames(defaultcss.all, sty.searchSvgbg, {
          [sty.searchSvgbg__height__36]: hasVariant(variants, "height", "_36"),
          [sty.searchSvgbg__height__40]: hasVariant(variants, "height", "_40"),
          [sty.searchSvgbg__width__180]: hasVariant(variants, "width", "_180"),
          [sty.searchSvgbg__width__270]: hasVariant(variants, "width", "_270"),
          [sty.searchSvgbg__width__360]: hasVariant(variants, "width", "_360")
        })}
      >
        <Icon174Icon
          data-plasmic-name={"searchSvg"}
          data-plasmic-override={overrides.searchSvg}
          className={classNames(defaultcss.all, sty.searchSvg, {
            [sty.searchSvg__height__36]: hasVariant(variants, "height", "_36"),
            [sty.searchSvg__height__40]: hasVariant(variants, "height", "_40")
          })}
          role={"img"}
        />
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"searchBox"}
        data-plasmic-override={overrides.searchBox}
        hasGap={true}
        className={classNames(defaultcss.all, sty.searchBox)}
      >
        <div
          data-plasmic-name={"box"}
          data-plasmic-override={overrides.box}
          className={classNames(defaultcss.all, sty.box, {
            [sty.box__width__180]: hasVariant(variants, "width", "_180"),
            [sty.box__width__270]: hasVariant(variants, "width", "_270"),
            [sty.box__width__360]: hasVariant(variants, "width", "_360")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <input
                className={classNames(defaultcss.input, sty.textbox__bP0Fo)}
                placeholder={""}
                size={1}
                type={"text"}
                value={"Search..."}
              />
            ),

            value: args.children
          })}
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "searchSvgbg", "searchSvg", "searchBox", "box"],
  searchSvgbg: ["searchSvgbg", "searchSvg"],
  searchSvg: ["searchSvg"],
  searchBox: ["searchBox", "box"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearchbarA__ArgProps,
      internalVariantPropNames: PlasmicSearchbarA__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSearchbarA__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchbarA";
  } else {
    func.displayName = `PlasmicSearchbarA.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchbarA = Object.assign(
  // Top-level PlasmicSearchbarA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    searchSvgbg: makeNodeComponent("searchSvgbg"),
    searchSvg: makeNodeComponent("searchSvg"),
    searchBox: makeNodeComponent("searchBox"),
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicSearchbarA
    internalVariantProps: PlasmicSearchbarA__VariantProps,
    internalArgProps: PlasmicSearchbarA__ArgProps
  }
);

export default PlasmicSearchbarA;
/* prettier-ignore-end */
