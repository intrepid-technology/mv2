// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: lzmL0Hrb1xO
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputFormCardPrimary from "../../InputFormCardPrimary"; // plasmic-import: 7K8uSXduxTH/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicBusinessDescription.module.css"; // plasmic-import: lzmL0Hrb1xO/css

export const PlasmicBusinessDescription__VariantProps = new Array();

export const PlasmicBusinessDescription__ArgProps = new Array();

function PlasmicBusinessDescription__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style global jsx>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__tsI8N)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__a6Rzy)}
            >
              <InputFormCardPrimary
                data-plasmic-name={"companyDeescriptionCard"}
                data-plasmic-override={overrides.companyDeescriptionCard}
                button={"button"}
                className={classNames(
                  "__wab_instance",
                  sty.companyDeescriptionCard
                )}
                description={"150 characters maximum."}
                headline={"Company description"}
                multiLineText={"multiLineText"}
                subDescription={"subDescription"}
                subHead={"Overview description of your company or team."}
              >
                <textarea
                  className={classNames(
                    defaultcss.textarea,
                    sty.textarea__ck2XP
                  )}
                  value={"Describe your company or team"}
                />
              </InputFormCardPrimary>

              <InputFormCardPrimary
                data-plasmic-name={"companyTaglineCard"}
                data-plasmic-override={overrides.companyTaglineCard}
                button={"button"}
                className={classNames("__wab_instance", sty.companyTaglineCard)}
                description={"70 characters maximum."}
                headline={"Company tag-line"}
                singleLineText={"singleLineText"}
                singleLineTextContainer={
                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox)}
                    placeholder={"Some placeholder"}
                    size={1}
                    type={"text"}
                    value={"Enter a short description"}
                  />
                }
                subDescription={"subDescription"}
                subHead={"Short description of your company or team"}
              >
                <textarea
                  className={classNames(
                    defaultcss.textarea,
                    sty.textarea__xoENx
                  )}
                  value={"Describe yourself...."}
                />
              </InputFormCardPrimary>

              <InputFormCardPrimary
                data-plasmic-name={"companyLocationCard"}
                data-plasmic-override={overrides.companyLocationCard}
                button={"button"}
                className={classNames(
                  "__wab_instance",
                  sty.companyLocationCard
                )}
                description={
                  "Helps with matching you to the right partners & members"
                }
                headline={"Company location"}
                inputType={"dropdownText"}
                subDescription={"subDescription"}
                subHead={
                  "Please enter the Country and City of your company or team's location."
                }
              />

              <InputFormCardPrimary
                data-plasmic-name={"companyLanguagesCard"}
                data-plasmic-override={overrides.companyLanguagesCard}
                button={"button"}
                className={classNames(
                  "__wab_instance",
                  sty.companyLanguagesCard
                )}
                description={
                  "Helps with matching you to the right partners & members"
                }
                descriptionA={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__x9Mbe
                    )}
                  >
                    {"Description"}
                  </div>
                }
                descriptionB={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__hGGmu
                    )}
                  >
                    {"Description"}
                  </div>
                }
                headline={"Company languages"}
                inputType={"dropdownDropdown"}
                subDescription={"subDescription"}
                subHead={"Enter the languages you speak at your company"}
              />
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "companyDeescriptionCard",
    "companyTaglineCard",
    "textbox",
    "companyLocationCard",
    "companyLanguagesCard"
  ],

  companyDeescriptionCard: ["companyDeescriptionCard"],
  companyTaglineCard: ["companyTaglineCard", "textbox"],
  textbox: ["textbox"],
  companyLocationCard: ["companyLocationCard"],
  companyLanguagesCard: ["companyLanguagesCard"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBusinessDescription__ArgProps,
      internalVariantPropNames: PlasmicBusinessDescription__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicBusinessDescription__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBusinessDescription";
  } else {
    func.displayName = `PlasmicBusinessDescription.${nodeName}`;
  }
  return func;
}

export const PlasmicBusinessDescription = Object.assign(
  // Top-level PlasmicBusinessDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    companyDeescriptionCard: makeNodeComponent("companyDeescriptionCard"),
    companyTaglineCard: makeNodeComponent("companyTaglineCard"),
    textbox: makeNodeComponent("textbox"),
    companyLocationCard: makeNodeComponent("companyLocationCard"),
    companyLanguagesCard: makeNodeComponent("companyLanguagesCard"),
    // Metadata about props expected for PlasmicBusinessDescription
    internalVariantProps: PlasmicBusinessDescription__VariantProps,
    internalArgProps: PlasmicBusinessDescription__ArgProps
  }
);

export default PlasmicBusinessDescription;
/* prettier-ignore-end */
