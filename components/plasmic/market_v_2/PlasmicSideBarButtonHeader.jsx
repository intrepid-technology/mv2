// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: l8x-1W9kbZ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SideBarButtonNewListing from "../../SideBarButtonNewListing"; // plasmic-import: dNsNyn-hp9/component
import SideBarButtonPowerUp from "../../SideBarButtonPowerUp"; // plasmic-import: cwyuvAY7ua/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSideBarButtonHeader.module.css"; // plasmic-import: l8x-1W9kbZ/css

export const PlasmicSideBarButtonHeader__VariantProps = new Array();

export const PlasmicSideBarButtonHeader__ArgProps = new Array();

function PlasmicSideBarButtonHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <SideBarButtonNewListing
        data-plasmic-name={"sideBarButtonNewListing"}
        data-plasmic-override={overrides.sideBarButtonNewListing}
        className={classNames("__wab_instance", sty.sideBarButtonNewListing)}
        trigger={"side-barListingButtonDropdown"}
      />

      <SideBarButtonPowerUp
        data-plasmic-name={"sideBarButtonPowerUp"}
        data-plasmic-override={overrides.sideBarButtonPowerUp}
        className={classNames("__wab_instance", sty.sideBarButtonPowerUp)}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "sideBarButtonNewListing", "sideBarButtonPowerUp"],
  sideBarButtonNewListing: ["sideBarButtonNewListing"],
  sideBarButtonPowerUp: ["sideBarButtonPowerUp"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideBarButtonHeader__ArgProps,
      internalVariantPropNames: PlasmicSideBarButtonHeader__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSideBarButtonHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBarButtonHeader";
  } else {
    func.displayName = `PlasmicSideBarButtonHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBarButtonHeader = Object.assign(
  // Top-level PlasmicSideBarButtonHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideBarButtonNewListing: makeNodeComponent("sideBarButtonNewListing"),
    sideBarButtonPowerUp: makeNodeComponent("sideBarButtonPowerUp"),
    // Metadata about props expected for PlasmicSideBarButtonHeader
    internalVariantProps: PlasmicSideBarButtonHeader__VariantProps,
    internalArgProps: PlasmicSideBarButtonHeader__ArgProps
  }
);

export default PlasmicSideBarButtonHeader;
/* prettier-ignore-end */
