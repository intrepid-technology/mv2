// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: WrChxyxJaSh
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarServiceListing from "../../NavbarServiceListing"; // plasmic-import: PUBVQZa84u/component
import ProgressBar from "../../ProgressBar"; // plasmic-import: jFfoBtNGGG/component
import CardQuestionServiceListing from "../../CardQuestionServiceListing"; // plasmic-import: hAog-BJq-d/component
import TextInput from "../../TextInput"; // plasmic-import: Ss3X7VAgr4Y/component
import ToolTipServiceListing from "../../ToolTipServiceListing"; // plasmic-import: GDvJTAih6h/component
import NativeSelectInput from "../../NativeSelectInput"; // plasmic-import: 6rjTfqGTn_/component
import ArrayInputFields from "../../ArrayInputFields"; // plasmic-import: GNcqDwksoT/component
import MultiSelectInput from "../../MultiSelectInput"; // plasmic-import: hjWInH_vco/component
import ConditionalField from "../../ConditionalField"; // plasmic-import: umGRdihMyi/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicServicelistingdelivery.module.css"; // plasmic-import: WrChxyxJaSh/css

export const PlasmicServicelistingdelivery__VariantProps = new Array();

export const PlasmicServicelistingdelivery__ArgProps = new Array();

function PlasmicServicelistingdelivery__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"serviceListingNavbar"}
            data-plasmic-override={overrides.serviceListingNavbar}
            className={classNames(projectcss.all, sty.serviceListingNavbar)}
          >
            <NavbarServiceListing
              data-plasmic-name={"navbarServiceListing"}
              data-plasmic-override={overrides.navbarServiceListing}
              backButtonDestination={"/service/listing/image"}
              className={classNames("__wab_instance", sty.navbarServiceListing)}
              nextButtonDestination={"/service/listing/confirmation"}
            >
              {"Delivery"}
            </NavbarServiceListing>

            <ProgressBar
              data-plasmic-name={"progressBar"}
              data-plasmic-override={overrides.progressBar}
              className={classNames("__wab_instance", sty.progressBar)}
              progress={"_90"}
            />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7Frla)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionTimeBlock"}
              data-plasmic-override={overrides.questionTimeBlock}
              hasGap={true}
              className={classNames(projectcss.all, sty.questionTimeBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__j01DZ
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mbL5D
                    )}
                  >
                    {"Step 4"}
                  </div>
                }
                slot2={"Enter a number, in days, between 1 and 90."}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p8Gw
                  )}
                >
                  {"How much time is required to deliver your service?"}
                </div>
              </CardQuestionServiceListing>

              <TextInput
                data-plasmic-name={"deliveryTimeInput"}
                data-plasmic-override={overrides.deliveryTimeInput}
                adornment={["end"]}
                className={classNames("__wab_instance", sty.deliveryTimeInput)}
                endAdornment={"Days"}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__aun4I
              )}
              slot={"Delivery term or timeline"}
            >
              {
                "Selecting accurate categories helps Members know what to expect when it comes to format, features, outcomes, and level of service they'll receive when creating digital products with you, or your team."
              }
            </ToolTipServiceListing>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hOc5O)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionMeetingBlock"}
              data-plasmic-override={overrides.questionMeetingBlock}
              hasGap={true}
              className={classNames(projectcss.all, sty.questionMeetingBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__e0X2Y
                )}
                overline={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__snn5
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={"1 to 10 meetings per project, or chose unlimited"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g7Rsl
                  )}
                >
                  {"How many meetings will you offer your client?"}
                </div>
              </CardQuestionServiceListing>

              <NativeSelectInput
                data-plasmic-name={"meetingsSelectInput"}
                data-plasmic-override={overrides.meetingsSelectInput}
                className={classNames(
                  "__wab_instance",
                  sty.meetingsSelectInput
                )}
                hideLabel={true}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__zq9Sw
              )}
              slot={"Meetings & communication"}
            >
              {
                "Selecting accurate categories helps Members know what to expect when it comes to format, features, outcomes, and level of service they'll receive when creating digital products with you, or your team."
              }
            </ToolTipServiceListing>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xvZpR)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionRevisionBlock"}
              data-plasmic-override={overrides.questionRevisionBlock}
              hasGap={true}
              className={classNames(projectcss.all, sty.questionRevisionBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing___0MQxG
                )}
                overline={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wBaev
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={"1 to 10 revisions per project, or chose unlimited"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__by8Qo
                  )}
                >
                  {"How many revisions will you offer your client?"}
                </div>
              </CardQuestionServiceListing>

              <NativeSelectInput
                data-plasmic-name={"revisionsSelectInput"}
                data-plasmic-override={overrides.revisionsSelectInput}
                className={classNames(
                  "__wab_instance",
                  sty.revisionsSelectInput
                )}
                hideLabel={true}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__pCBf5
              )}
              slot={"Revisions & service design"}
            >
              {
                "Describe the key steps/process involved to deliver your service to the client.Provide a detailed, step-by-step overview or outline on how a project will progress.The process you use to deliver your service, provides insight to the client on the level of service you offer, and the details of the experience you provide to deliver the desired outcome."
              }
            </ToolTipServiceListing>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0GvGm)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionRequirementBlock"}
              data-plasmic-override={overrides.questionRequirementBlock}
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.questionRequirementBlock
              )}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rgSA)}
              >
                <CardQuestionServiceListing
                  className={classNames(
                    "__wab_instance",
                    sty.cardQuestionServiceListing__rlNOv
                  )}
                  overline={true}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gBqE8
                      )}
                    >
                      {"Step 2"}
                    </div>
                  }
                  slot2={"Select all that apply"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__py2Sc
                    )}
                  >
                    {
                      "What do you require from the client to start your service?"
                    }
                  </div>
                </CardQuestionServiceListing>
              </p.Stack>

              <ArrayInputFields
                data-plasmic-name={"deliveryRequirementsArrayFields"}
                data-plasmic-override={
                  overrides.deliveryRequirementsArrayFields
                }
                className={classNames(
                  "__wab_instance",
                  sty.deliveryRequirementsArrayFields
                )}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__tvl2H
              )}
              slot={"Required client assets"}
            >
              {
                "For clarity and positive results, outline what you need the client to provide before you can start your service.\n"
              }
            </ToolTipServiceListing>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hXiOg)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionFormatBlock"}
              data-plasmic-override={overrides.questionFormatBlock}
              hasGap={true}
              className={classNames(projectcss.all, sty.questionFormatBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__ya0N9
                )}
                overline={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d40N6
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={"Search and select up to 5 formats."}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zmCp2
                  )}
                >
                  {"What format(s) will you provide the client?"}
                </div>
              </CardQuestionServiceListing>

              <MultiSelectInput
                data-plasmic-name={"deliveryFormatsMultiSelectInput"}
                data-plasmic-override={
                  overrides.deliveryFormatsMultiSelectInput
                }
                className={classNames(
                  "__wab_instance",
                  sty.deliveryFormatsMultiSelectInput
                )}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__aL5Ga
              )}
              slot={"File formats for deliverables"}
            >
              {
                "For clarity and positive results, outline what you need the client to provide before you can start your service.\n"
              }
            </ToolTipServiceListing>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__owyrn)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionFormatBlock2"}
              data-plasmic-override={overrides.questionFormatBlock2}
              hasGap={true}
              className={classNames(projectcss.all, sty.questionFormatBlock2)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing___3B5Lq
                )}
                overline={true}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__auLLg
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={" "}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ptyE
                  )}
                >
                  {"Do you cost your service per hour, or as a flat fee?"}
                </div>
              </CardQuestionServiceListing>

              <NativeSelectInput
                data-plasmic-name={"serviceCostTypeSelectInput"}
                data-plasmic-override={overrides.serviceCostTypeSelectInput}
                className={classNames(
                  "__wab_instance",
                  sty.serviceCostTypeSelectInput
                )}
                hideLabel={true}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__s3KcI
              )}
              slot={"Service Costing"}
            >
              {
                "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qu\n"
              }
            </ToolTipServiceListing>
          </p.Stack>

          <ConditionalField
            data-plasmic-name={"hourlyRateConditionalField"}
            data-plasmic-override={overrides.hourlyRateConditionalField}
            checkType={"EQUAL"}
            className={classNames(
              "__wab_instance",
              sty.hourlyRateConditionalField
            )}
            conditionValue={"Per Hour"}
            name={"label"}
            valueType={"object"}
            visibleIf={true}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pKhw)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"questionFormatBlock3"}
                data-plasmic-override={overrides.questionFormatBlock3}
                hasGap={true}
                className={classNames(projectcss.all, sty.questionFormatBlock3)}
              >
                <CardQuestionServiceListing
                  className={classNames(
                    "__wab_instance",
                    sty.cardQuestionServiceListing__dm8L5
                  )}
                  overline={true}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cX8K
                      )}
                    >
                      {"Step 2"}
                    </div>
                  }
                  slot2={" "}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gTbwJ
                    )}
                  >
                    {"What is your hourly rate in USD?"}
                  </div>
                </CardQuestionServiceListing>

                <TextInput
                  data-plasmic-name={"hourlyRateInput"}
                  data-plasmic-override={overrides.hourlyRateInput}
                  adornment={["start"]}
                  className={classNames("__wab_instance", sty.hourlyRateInput)}
                  placeholder={"Hourly Rate"}
                  startAdornment={"USD "}
                />
              </p.Stack>
            </p.Stack>
          </ConditionalField>

          <ConditionalField
            data-plasmic-name={"flatRateConditionalField"}
            data-plasmic-override={overrides.flatRateConditionalField}
            checkType={"EQUAL"}
            className={classNames(
              "__wab_instance",
              sty.flatRateConditionalField
            )}
            conditionValue={"Flat Fee"}
            name={"label"}
            valueType={"object"}
            visibleIf={true}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2LwcL)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"questionFormatBlock4"}
                data-plasmic-override={overrides.questionFormatBlock4}
                hasGap={true}
                className={classNames(projectcss.all, sty.questionFormatBlock4)}
              >
                <CardQuestionServiceListing
                  className={classNames(
                    "__wab_instance",
                    sty.cardQuestionServiceListing__gx2EL
                  )}
                  overline={true}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8L8Xs
                      )}
                    >
                      {"Step 2"}
                    </div>
                  }
                  slot2={" "}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__me65B
                    )}
                  >
                    {"What is your flat fee rate in USD for this service?"}
                  </div>
                </CardQuestionServiceListing>

                <TextInput
                  data-plasmic-name={"flatRateInput"}
                  data-plasmic-override={overrides.flatRateInput}
                  adornment={["start"]}
                  className={classNames("__wab_instance", sty.flatRateInput)}
                  placeholder={"Flat Fee"}
                  startAdornment={"USD "}
                />
              </p.Stack>
            </p.Stack>
          </ConditionalField>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar",
    "questionTimeBlock",
    "deliveryTimeInput",
    "questionMeetingBlock",
    "meetingsSelectInput",
    "questionRevisionBlock",
    "revisionsSelectInput",
    "questionRequirementBlock",
    "deliveryRequirementsArrayFields",
    "questionFormatBlock",
    "deliveryFormatsMultiSelectInput",
    "questionFormatBlock2",
    "serviceCostTypeSelectInput",
    "hourlyRateConditionalField",
    "questionFormatBlock3",
    "hourlyRateInput",
    "flatRateConditionalField",
    "questionFormatBlock4",
    "flatRateInput"
  ],

  serviceListingNavbar: [
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar"
  ],

  navbarServiceListing: ["navbarServiceListing"],
  progressBar: ["progressBar"],
  questionTimeBlock: ["questionTimeBlock", "deliveryTimeInput"],
  deliveryTimeInput: ["deliveryTimeInput"],
  questionMeetingBlock: ["questionMeetingBlock", "meetingsSelectInput"],
  meetingsSelectInput: ["meetingsSelectInput"],
  questionRevisionBlock: ["questionRevisionBlock", "revisionsSelectInput"],
  revisionsSelectInput: ["revisionsSelectInput"],
  questionRequirementBlock: [
    "questionRequirementBlock",
    "deliveryRequirementsArrayFields"
  ],

  deliveryRequirementsArrayFields: ["deliveryRequirementsArrayFields"],
  questionFormatBlock: [
    "questionFormatBlock",
    "deliveryFormatsMultiSelectInput"
  ],

  deliveryFormatsMultiSelectInput: ["deliveryFormatsMultiSelectInput"],
  questionFormatBlock2: ["questionFormatBlock2", "serviceCostTypeSelectInput"],
  serviceCostTypeSelectInput: ["serviceCostTypeSelectInput"],
  hourlyRateConditionalField: [
    "hourlyRateConditionalField",
    "questionFormatBlock3",
    "hourlyRateInput"
  ],

  questionFormatBlock3: ["questionFormatBlock3", "hourlyRateInput"],
  hourlyRateInput: ["hourlyRateInput"],
  flatRateConditionalField: [
    "flatRateConditionalField",
    "questionFormatBlock4",
    "flatRateInput"
  ],

  questionFormatBlock4: ["questionFormatBlock4", "flatRateInput"],
  flatRateInput: ["flatRateInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServicelistingdelivery__ArgProps,
      internalVariantPropNames: PlasmicServicelistingdelivery__VariantProps
    });

    return PlasmicServicelistingdelivery__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServicelistingdelivery";
  } else {
    func.displayName = `PlasmicServicelistingdelivery.${nodeName}`;
  }
  return func;
}

export const PlasmicServicelistingdelivery = Object.assign(
  // Top-level PlasmicServicelistingdelivery renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    serviceListingNavbar: makeNodeComponent("serviceListingNavbar"),
    navbarServiceListing: makeNodeComponent("navbarServiceListing"),
    progressBar: makeNodeComponent("progressBar"),
    questionTimeBlock: makeNodeComponent("questionTimeBlock"),
    deliveryTimeInput: makeNodeComponent("deliveryTimeInput"),
    questionMeetingBlock: makeNodeComponent("questionMeetingBlock"),
    meetingsSelectInput: makeNodeComponent("meetingsSelectInput"),
    questionRevisionBlock: makeNodeComponent("questionRevisionBlock"),
    revisionsSelectInput: makeNodeComponent("revisionsSelectInput"),
    questionRequirementBlock: makeNodeComponent("questionRequirementBlock"),
    deliveryRequirementsArrayFields: makeNodeComponent(
      "deliveryRequirementsArrayFields"
    ),

    questionFormatBlock: makeNodeComponent("questionFormatBlock"),
    deliveryFormatsMultiSelectInput: makeNodeComponent(
      "deliveryFormatsMultiSelectInput"
    ),

    questionFormatBlock2: makeNodeComponent("questionFormatBlock2"),
    serviceCostTypeSelectInput: makeNodeComponent("serviceCostTypeSelectInput"),
    hourlyRateConditionalField: makeNodeComponent("hourlyRateConditionalField"),
    questionFormatBlock3: makeNodeComponent("questionFormatBlock3"),
    hourlyRateInput: makeNodeComponent("hourlyRateInput"),
    flatRateConditionalField: makeNodeComponent("flatRateConditionalField"),
    questionFormatBlock4: makeNodeComponent("questionFormatBlock4"),
    flatRateInput: makeNodeComponent("flatRateInput"),
    // Metadata about props expected for PlasmicServicelistingdelivery
    internalVariantProps: PlasmicServicelistingdelivery__VariantProps,
    internalArgProps: PlasmicServicelistingdelivery__ArgProps
  }
);

export default PlasmicServicelistingdelivery;
/* prettier-ignore-end */
