// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 6EfwvreoWT
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardLogIn from "../../CardLogIn"; // plasmic-import: wTVVybnMbI4/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSectionLogIn.module.css"; // plasmic-import: 6EfwvreoWT/css
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: naG0WWoBul/icon

export const PlasmicSectionLogIn__VariantProps = new Array();

export const PlasmicSectionLogIn__ArgProps = new Array();

function PlasmicSectionLogIn__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"loginHeadlineParent"}
        data-plasmic-override={overrides.loginHeadlineParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.loginHeadlineParent)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"loginHeadlineText"}
          data-plasmic-override={overrides.loginHeadlineText}
          hasGap={true}
          className={classNames(defaultcss.all, sty.loginHeadlineText)}
        >
          <p.PlasmicLink
            data-plasmic-name={"svgLinkDiv"}
            data-plasmic-override={overrides.svgLinkDiv}
            className={classNames(defaultcss.all, sty.svgLinkDiv)}
            component={Link}
            href={"/"}
            platform={"nextjs"}
          >
            <Icon43Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg)}
              role={"img"}
            />
          </p.PlasmicLink>

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text
            )}
          >
            {"Log in"}
          </div>
        </p.Stack>

        <CardLogIn
          data-plasmic-name={"cardLogIn"}
          data-plasmic-override={overrides.cardLogIn}
          className={classNames("__wab_instance", sty.cardLogIn)}
          size={"_360"}
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "loginHeadlineParent",
    "loginHeadlineText",
    "svgLinkDiv",
    "svg",
    "text",
    "cardLogIn"
  ],

  loginHeadlineParent: [
    "loginHeadlineParent",
    "loginHeadlineText",
    "svgLinkDiv",
    "svg",
    "text",
    "cardLogIn"
  ],

  loginHeadlineText: ["loginHeadlineText", "svgLinkDiv", "svg", "text"],
  svgLinkDiv: ["svgLinkDiv", "svg"],
  svg: ["svg"],
  text: ["text"],
  cardLogIn: ["cardLogIn"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionLogIn__ArgProps,
      internalVariantPropNames: PlasmicSectionLogIn__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSectionLogIn__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicSectionLogIn";
  } else {
    func.displayName = `PlasmicSectionLogIn.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionLogIn = Object.assign(
  // Top-level PlasmicSectionLogIn renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    loginHeadlineParent: makeNodeComponent("loginHeadlineParent"),
    loginHeadlineText: makeNodeComponent("loginHeadlineText"),
    svgLinkDiv: makeNodeComponent("svgLinkDiv"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    cardLogIn: makeNodeComponent("cardLogIn"),
    // Metadata about props expected for PlasmicSectionLogIn
    internalVariantProps: PlasmicSectionLogIn__VariantProps,
    internalArgProps: PlasmicSectionLogIn__ArgProps
  }
);

export default PlasmicSectionLogIn;
/* prettier-ignore-end */
