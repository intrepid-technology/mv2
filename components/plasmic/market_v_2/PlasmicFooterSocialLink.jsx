// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: uQNvf8Lt2Y
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicFooterSocialLink.module.css"; // plasmic-import: uQNvf8Lt2Y/css
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: EaVXobEXiy/icon

export const PlasmicFooterSocialLink__VariantProps = new Array("color");

export const PlasmicFooterSocialLink__ArgProps = new Array(
  "children",
  "destination"
);

function PlasmicFooterSocialLink__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_brand]: hasVariant(variants, "color", "brand"),
          [sty.rootcolor_dark]: hasVariant(variants, "color", "dark"),
          [sty.rootcolor_light]: hasVariant(variants, "color", "light")
        }
      )}
      component={Link}
      href={args.destination}
      platform={"nextjs"}
      target={"_blank"}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__dorQ)}
              role={"img"}
            />
          ),

          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolor_brand]: hasVariant(
              variants,
              "color",
              "brand"
            ),

            [sty.slotTargetChildrencolor_dark]: hasVariant(
              variants,
              "color",
              "dark"
            ),

            [sty.slotTargetChildrencolor_light]: hasVariant(
              variants,
              "color",
              "light"
            )
          })
        })}
      </div>
    </p.PlasmicLink>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterSocialLink__ArgProps,
      internalVariantPropNames: PlasmicFooterSocialLink__VariantProps
    });

    return PlasmicFooterSocialLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSocialLink";
  } else {
    func.displayName = `PlasmicFooterSocialLink.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSocialLink = Object.assign(
  // Top-level PlasmicFooterSocialLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicFooterSocialLink
    internalVariantProps: PlasmicFooterSocialLink__VariantProps,
    internalArgProps: PlasmicFooterSocialLink__ArgProps
  }
);

export default PlasmicFooterSocialLink;
/* prettier-ignore-end */
