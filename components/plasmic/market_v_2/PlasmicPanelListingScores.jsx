// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: mNo76Uc_Jdn
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPanelListingScores.module.css"; // plasmic-import: mNo76Uc_Jdn/css

export const PlasmicPanelListingScores__VariantProps = new Array();

export const PlasmicPanelListingScores__ArgProps = new Array();

function PlasmicPanelListingScores__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(defaultcss.all, projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"headline"}
          data-plasmic-override={overrides.headline}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.headline
          )}
        >
          {"Stats"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"listingStatsParent"}
        data-plasmic-override={overrides.listingStatsParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.listingStatsParent
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementListingCount"}
          data-plasmic-override={overrides.elementListingCount}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.elementListingCount
          )}
        >
          <div
            data-plasmic-name={"listingNumberParent"}
            data-plasmic-override={overrides.listingNumberParent}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.listingNumberParent
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__iCiP
              )}
            >
              {"XXXXX"}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__saOm
            )}
          >
            {"Listings"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementViewsCount"}
          data-plasmic-override={overrides.elementViewsCount}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.elementViewsCount
          )}
        >
          <div
            data-plasmic-name={"viewsNumberParent"}
            data-plasmic-override={overrides.viewsNumberParent}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.viewsNumberParent
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__ocmNw
              )}
            >
              {"XXXXX"}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__aNxVb
            )}
          >
            {"Views"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementReactsCount"}
          data-plasmic-override={overrides.elementReactsCount}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.elementReactsCount
          )}
        >
          <div
            data-plasmic-name={"reactsNumberParent"}
            data-plasmic-override={overrides.reactsNumberParent}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.reactsNumberParent
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__agzVt
              )}
            >
              {"XXXXX"}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__ud4Ep
            )}
          >
            {"Reacts"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementSavesCount"}
          data-plasmic-override={overrides.elementSavesCount}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.elementSavesCount
          )}
        >
          <div
            data-plasmic-name={"savesNumberParent"}
            data-plasmic-override={overrides.savesNumberParent}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.savesNumberParent
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__vsewK
              )}
            >
              {"XXXXX"}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__gkZEo
            )}
          >
            {"Saves"}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "headline",
    "listingStatsParent",
    "elementListingCount",
    "listingNumberParent",
    "elementViewsCount",
    "viewsNumberParent",
    "elementReactsCount",
    "reactsNumberParent",
    "elementSavesCount",
    "savesNumberParent"
  ],

  freeBox: ["freeBox", "headline"],
  headline: ["headline"],
  listingStatsParent: [
    "listingStatsParent",
    "elementListingCount",
    "listingNumberParent",
    "elementViewsCount",
    "viewsNumberParent",
    "elementReactsCount",
    "reactsNumberParent",
    "elementSavesCount",
    "savesNumberParent"
  ],

  elementListingCount: ["elementListingCount", "listingNumberParent"],
  listingNumberParent: ["listingNumberParent"],
  elementViewsCount: ["elementViewsCount", "viewsNumberParent"],
  viewsNumberParent: ["viewsNumberParent"],
  elementReactsCount: ["elementReactsCount", "reactsNumberParent"],
  reactsNumberParent: ["reactsNumberParent"],
  elementSavesCount: ["elementSavesCount", "savesNumberParent"],
  savesNumberParent: ["savesNumberParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelListingScores__ArgProps,
      internalVariantPropNames: PlasmicPanelListingScores__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPanelListingScores__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelListingScores";
  } else {
    func.displayName = `PlasmicPanelListingScores.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelListingScores = Object.assign(
  // Top-level PlasmicPanelListingScores renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    headline: makeNodeComponent("headline"),
    listingStatsParent: makeNodeComponent("listingStatsParent"),
    elementListingCount: makeNodeComponent("elementListingCount"),
    listingNumberParent: makeNodeComponent("listingNumberParent"),
    elementViewsCount: makeNodeComponent("elementViewsCount"),
    viewsNumberParent: makeNodeComponent("viewsNumberParent"),
    elementReactsCount: makeNodeComponent("elementReactsCount"),
    reactsNumberParent: makeNodeComponent("reactsNumberParent"),
    elementSavesCount: makeNodeComponent("elementSavesCount"),
    savesNumberParent: makeNodeComponent("savesNumberParent"),
    // Metadata about props expected for PlasmicPanelListingScores
    internalVariantProps: PlasmicPanelListingScores__VariantProps,
    internalArgProps: PlasmicPanelListingScores__ArgProps
  }
);

export default PlasmicPanelListingScores;
/* prettier-ignore-end */
