// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: PUBVQZa84u
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: ftJnovScMuV/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicNavbarServiceListing.module.css"; // plasmic-import: PUBVQZa84u/css

export const PlasmicNavbarServiceListing__VariantProps = new Array(
  "hideBack",
  "hideNext"
);

export const PlasmicNavbarServiceListing__ArgProps = new Array(
  "children",
  "nextButtonDestination",
  "backButtonDestination"
);

function PlasmicNavbarServiceListing__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        hasGap={true}
        className={classNames(projectcss.all, sty.container, {
          [sty.container__hideBack]: hasVariant(
            variants,
            "hideBack",
            "hideBack"
          ),

          [sty.container__hideNext]: hasVariant(
            variants,
            "hideNext",
            "hideNext"
          )
        })}
      >
        {(hasVariant(variants, "hideBack", "hideBack") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__whc4W, {
              [sty.freeBox__hideBack__whc4WIsZs5]: hasVariant(
                variants,
                "hideBack",
                "hideBack"
              )
            })}
          >
            {(hasVariant(variants, "hideBack", "hideBack") ? false : true) ? (
              <Button
                data-plasmic-name={"backButton"}
                data-plasmic-override={overrides.backButton}
                className={classNames("__wab_instance", sty.backButton, {
                  [sty.backButton__hideBack]: hasVariant(
                    variants,
                    "hideBack",
                    "hideBack"
                  )
                })}
                color={"brand"}
                destination={args.backButtonDestination}
                type={"light"}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {hasVariant(globalVariants, "screen", "iphone678")
                    ? "Back"
                    : hasVariant(globalVariants, "screen", "iphone678Plus")
                    ? "Back"
                    : "Back"}
                </div>
              </Button>
            ) : null}
          </div>
        ) : null}

        <div
          data-plasmic-name={"labelWrapper"}
          data-plasmic-override={overrides.labelWrapper}
          className={classNames(projectcss.all, sty.labelWrapper, {
            [sty.labelWrapper__hideBack]: hasVariant(
              variants,
              "hideBack",
              "hideBack"
            ),

            [sty.labelWrapper__hideNext]: hasVariant(
              variants,
              "hideNext",
              "hideNext"
            )
          })}
        >
          {(hasVariant(globalVariants, "screen", "iphone678Plus") ? true : true)
            ? p.renderPlasmicSlot({
                defaultContents: "Section Title",
                value: args.children,
                className: classNames(sty.slotTargetChildren, {
                  [sty.slotTargetChildren__hideBack]: hasVariant(
                    variants,
                    "hideBack",
                    "hideBack"
                  ),

                  [sty.slotTargetChildren__hideNext]: hasVariant(
                    variants,
                    "hideNext",
                    "hideNext"
                  )
                })
              })
            : null}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox___8U6C)}>
          {(hasVariant(variants, "hideNext", "hideNext") ? false : true) ? (
            <Button
              data-plasmic-name={"nextButton"}
              data-plasmic-override={overrides.nextButton}
              className={classNames("__wab_instance", sty.nextButton, {
                [sty.nextButton__hideNext]: hasVariant(
                  variants,
                  "hideNext",
                  "hideNext"
                )
              })}
              color={"brand"}
              destination={args.nextButtonDestination}
              type={"primary"}
            >
              <div
                data-plasmic-name={"next"}
                data-plasmic-override={overrides.next}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.next
                )}
              >
                {"Next"}
              </div>
            </Button>
          ) : null}
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "container",
    "backButton",
    "text",
    "labelWrapper",
    "nextButton",
    "next"
  ],

  container: [
    "container",
    "backButton",
    "text",
    "labelWrapper",
    "nextButton",
    "next"
  ],

  backButton: ["backButton", "text"],
  text: ["text"],
  labelWrapper: ["labelWrapper"],
  nextButton: ["nextButton", "next"],
  next: ["next"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarServiceListing__ArgProps,
      internalVariantPropNames: PlasmicNavbarServiceListing__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNavbarServiceListing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarServiceListing";
  } else {
    func.displayName = `PlasmicNavbarServiceListing.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarServiceListing = Object.assign(
  // Top-level PlasmicNavbarServiceListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    backButton: makeNodeComponent("backButton"),
    text: makeNodeComponent("text"),
    labelWrapper: makeNodeComponent("labelWrapper"),
    nextButton: makeNodeComponent("nextButton"),
    next: makeNodeComponent("next"),
    // Metadata about props expected for PlasmicNavbarServiceListing
    internalVariantProps: PlasmicNavbarServiceListing__VariantProps,
    internalArgProps: PlasmicNavbarServiceListing__ArgProps
  }
);

export default PlasmicNavbarServiceListing;
/* prettier-ignore-end */
