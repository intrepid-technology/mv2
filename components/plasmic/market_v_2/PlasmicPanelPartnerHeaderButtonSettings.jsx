// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: AS7ILA_RiJ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import UserAvatar from "../../UserAvatar"; // plasmic-import: KmwWxjrE8L/component
import ButtonPartnerSidebarSettings from "../../ButtonPartnerSidebarSettings"; // plasmic-import: wdhcheOkaT/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPanelPartnerHeaderButtonSettings.module.css"; // plasmic-import: AS7ILA_RiJ/css

export const PlasmicPanelPartnerHeaderButtonSettings__VariantProps =
  new Array();

export const PlasmicPanelPartnerHeaderButtonSettings__ArgProps = new Array(
  "target",
  "trigger"
);

function PlasmicPanelPartnerHeaderButtonSettings__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <UserAvatar
        data-plasmic-name={"userAvatar"}
        data-plasmic-override={overrides.userAvatar}
        className={classNames("__wab_instance", sty.userAvatar)}
        size={"_32"}
        verified={true}
      />

      <ButtonPartnerSidebarSettings
        data-plasmic-name={"buttonPartnerSidebarSettings"}
        data-plasmic-override={overrides.buttonPartnerSidebarSettings}
        className={classNames(
          "__wab_instance",
          sty.buttonPartnerSidebarSettings
        )}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "userAvatar", "buttonPartnerSidebarSettings"],
  userAvatar: ["userAvatar"],
  buttonPartnerSidebarSettings: ["buttonPartnerSidebarSettings"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelPartnerHeaderButtonSettings__ArgProps,
      internalVariantPropNames:
        PlasmicPanelPartnerHeaderButtonSettings__VariantProps
    });

    return PlasmicPanelPartnerHeaderButtonSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelPartnerHeaderButtonSettings";
  } else {
    func.displayName = `PlasmicPanelPartnerHeaderButtonSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelPartnerHeaderButtonSettings = Object.assign(
  // Top-level PlasmicPanelPartnerHeaderButtonSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    userAvatar: makeNodeComponent("userAvatar"),
    buttonPartnerSidebarSettings: makeNodeComponent(
      "buttonPartnerSidebarSettings"
    ),

    // Metadata about props expected for PlasmicPanelPartnerHeaderButtonSettings
    internalVariantProps: PlasmicPanelPartnerHeaderButtonSettings__VariantProps,
    internalArgProps: PlasmicPanelPartnerHeaderButtonSettings__ArgProps
  }
);

export default PlasmicPanelPartnerHeaderButtonSettings;
/* prettier-ignore-end */
