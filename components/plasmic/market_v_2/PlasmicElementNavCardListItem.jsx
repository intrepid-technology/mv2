// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: VVXqLHd1Qa
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicElementNavCardListItem.module.css"; // plasmic-import: VVXqLHd1Qa/css

export const PlasmicElementNavCardListItem__VariantProps = new Array(
  "disabled",
  "size"
);

export const PlasmicElementNavCardListItem__ArgProps = new Array("text");

function PlasmicElementNavCardListItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"elementNavCard"}
      data-plasmic-override={overrides.elementNavCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.elementNavCard,
        {
          [sty.elementNavCard__disabled]: hasVariant(
            variants,
            "disabled",
            "disabled"
          )
        }
      )}
      component={Link}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"textParent"}
        data-plasmic-override={overrides.textParent}
        className={classNames(defaultcss.all, sty.textParent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Service",
          value: args.text,
          className: classNames(sty.slotText, {
            [sty.slotText__disabled]: hasVariant(
              variants,
              "disabled",
              "disabled"
            ),

            [sty.slotText__size__14Px]: hasVariant(variants, "size", "_14Px"),
            [sty.slotText__size__16Px]: hasVariant(variants, "size", "_16Px")
          })
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  elementNavCard: ["elementNavCard", "textParent"],
  textParent: ["textParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementNavCardListItem__ArgProps,
      internalVariantPropNames: PlasmicElementNavCardListItem__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicElementNavCardListItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "elementNavCard") {
    func.displayName = "PlasmicElementNavCardListItem";
  } else {
    func.displayName = `PlasmicElementNavCardListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicElementNavCardListItem = Object.assign(
  // Top-level PlasmicElementNavCardListItem renders the root element
  makeNodeComponent("elementNavCard"),
  {
    // Helper components rendering sub-elements
    textParent: makeNodeComponent("textParent"),
    // Metadata about props expected for PlasmicElementNavCardListItem
    internalVariantProps: PlasmicElementNavCardListItem__VariantProps,
    internalArgProps: PlasmicElementNavCardListItem__ArgProps
  }
);

export default PlasmicElementNavCardListItem;
/* prettier-ignore-end */
