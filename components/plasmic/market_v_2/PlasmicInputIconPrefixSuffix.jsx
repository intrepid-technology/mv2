// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: ri_cIHAAMV
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicInputIconPrefixSuffix.module.css"; // plasmic-import: ri_cIHAAMV/css
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: yu83kfpl6j/icon

export const PlasmicInputIconPrefixSuffix__VariantProps = new Array();

export const PlasmicInputIconPrefixSuffix__ArgProps = new Array();

function PlasmicInputIconPrefixSuffix__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__bSbya)}>
        <PlusBoldIcon
          className={classNames(defaultcss.all, sty.svg__wok5V)}
          role={"img"}
        />
      </div>

      <input
        data-plasmic-name={"textbox"}
        data-plasmic-override={overrides.textbox}
        className={classNames(defaultcss.input, sty.textbox)}
        placeholder={""}
        size={1}
        type={"text"}
        value={""}
      />

      <div className={classNames(defaultcss.all, sty.box__m1Wh5)}>
        <PlusBoldIcon
          className={classNames(defaultcss.all, sty.svg___1W2Uv)}
          role={"img"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "textbox"],
  textbox: ["textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputIconPrefixSuffix__ArgProps,
      internalVariantPropNames: PlasmicInputIconPrefixSuffix__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicInputIconPrefixSuffix__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputIconPrefixSuffix";
  } else {
    func.displayName = `PlasmicInputIconPrefixSuffix.${nodeName}`;
  }
  return func;
}

export const PlasmicInputIconPrefixSuffix = Object.assign(
  // Top-level PlasmicInputIconPrefixSuffix renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),
    // Metadata about props expected for PlasmicInputIconPrefixSuffix
    internalVariantProps: PlasmicInputIconPrefixSuffix__VariantProps,
    internalArgProps: PlasmicInputIconPrefixSuffix__ArgProps
  }
);

export default PlasmicInputIconPrefixSuffix;
/* prettier-ignore-end */
