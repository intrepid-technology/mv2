// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: hyCm300QePDi
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarMemberEdit from "../../NavbarMemberEdit"; // plasmic-import: oTyBGj7jMRD/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import SearchbarPrimary from "../../SearchbarPrimary"; // plasmic-import: MorSLptejY/component
import SelectDropdownPrimary from "../../SelectDropdownPrimary"; // plasmic-import: T_qFWEqz1I6/component
import TableProjectAdminHeader from "../../TableProjectAdminHeader"; // plasmic-import: K0Z1ZWLiupV/component
import TableProjectAdminRecord from "../../TableProjectAdminRecord"; // plasmic-import: XwgjB__2WeM/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicMembermanageprojects.module.css"; // plasmic-import: hyCm300QePDi/css

export const PlasmicMembermanageprojects__VariantProps = new Array();

export const PlasmicMembermanageprojects__ArgProps = new Array("listingNumber");

function PlasmicMembermanageprojects__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarMemberEdit
            data-plasmic-name={"navbarMemberEdit"}
            data-plasmic-override={overrides.navbarMemberEdit}
            className={classNames("__wab_instance", sty.navbarMemberEdit)}
            navItems={[
              "notifications",
              "lists",
              "reviews",
              "wallet",
              "messages"
            ]}
            selected={"projects"}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberManageProjectsHeader"}
            data-plasmic-override={overrides.sectionMemberManageProjectsHeader}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.sectionMemberManageProjectsHeader
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay
              )}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    defaultcss.__wab_text,
                    sty.text__qYxNs
                  )}
                >
                  {"Manage your projects"}
                </div>
              }
              textDisplay={"Projects"}
              textSubhead={
                "Project overview with controls on how to contact your partner and provide instructions on how to complete your project"
              }
            />
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberManageListings"}
            data-plasmic-override={overrides.sectionMemberManageListings}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.sectionMemberManageListings
            )}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox___5GmQ
              )}
            >
              <CardHeaderTitlePrimary
                data-plasmic-name={"cardHeaderTitlePrimary"}
                data-plasmic-override={overrides.cardHeaderTitlePrimary}
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      defaultcss.__wab_text,
                      sty.text__pmRau
                    )}
                  >
                    {"Manage your project collaboration"}
                  </div>
                }
              >
                {"Services"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"listingManagementBlockParent"}
                data-plasmic-override={overrides.listingManagementBlockParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.listingManagementBlockParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"listingTotalParent"}
                  data-plasmic-override={overrides.listingTotalParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.listingTotalParent
                  )}
                >
                  <div
                    data-plasmic-name={"listingNumberParent"}
                    data-plasmic-override={overrides.listingNumberParent}
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.listingNumberParent
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "3",
                      value: args.listingNumber,
                      className: classNames(sty.slotTargetListingNumber)
                    })}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      defaultcss.__wab_text,
                      sty.text__nBju3
                    )}
                  >
                    {"Projects"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.freeBox__xYhA
                  )}
                >
                  <div
                    data-plasmic-name={"listingSearchFilterParent"}
                    data-plasmic-override={overrides.listingSearchFilterParent}
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.listingSearchFilterParent
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"searchOrderFilterParent"}
                      data-plasmic-override={overrides.searchOrderFilterParent}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        projectcss.all,
                        sty.searchOrderFilterParent
                      )}
                    >
                      <SearchbarPrimary
                        data-plasmic-name={"searchbarPrimary"}
                        data-plasmic-override={overrides.searchbarPrimary}
                        className={classNames(
                          "__wab_instance",
                          sty.searchbarPrimary
                        )}
                        width={"_540"}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"listingSearchFilterDropdownParent"}
                        data-plasmic-override={
                          overrides.listingSearchFilterDropdownParent
                        }
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          projectcss.all,
                          sty.listingSearchFilterDropdownParent
                        )}
                      >
                        <SelectDropdownPrimary
                          className={classNames(
                            "__wab_instance",
                            sty.selectDropdownPrimary__wfoeh
                          )}
                          placeholder={"Status"}
                          width={"_180"}
                        />

                        <SelectDropdownPrimary
                          className={classNames(
                            "__wab_instance",
                            sty.selectDropdownPrimary__jaLrk
                          )}
                          placeholder={"Approved"}
                          width={"_180"}
                        />
                      </p.Stack>
                    </p.Stack>
                  </div>

                  <p.Stack
                    as={"main"}
                    data-plasmic-name={"orderTableColumnMain"}
                    data-plasmic-override={overrides.orderTableColumnMain}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.orderTableColumnMain
                    )}
                  >
                    <TableProjectAdminHeader
                      data-plasmic-name={"tableProjectAdminHeader"}
                      data-plasmic-override={overrides.tableProjectAdminHeader}
                      className={classNames(
                        "__wab_instance",
                        sty.tableProjectAdminHeader
                      )}
                    />

                    <TableProjectAdminRecord
                      data-plasmic-name={"tableProjectAdminRecord"}
                      data-plasmic-override={overrides.tableProjectAdminRecord}
                      className={classNames(
                        "__wab_instance",
                        sty.tableProjectAdminRecord
                      )}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarMemberEdit",
    "sectionMemberManageProjectsHeader",
    "cardHeaderTitleDisplay",
    "sectionMemberManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingSearchFilterParent",
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "orderTableColumnMain",
    "tableProjectAdminHeader",
    "tableProjectAdminRecord"
  ],

  navbarMemberEdit: ["navbarMemberEdit"],
  sectionMemberManageProjectsHeader: [
    "sectionMemberManageProjectsHeader",
    "cardHeaderTitleDisplay"
  ],

  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  sectionMemberManageListings: [
    "sectionMemberManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingSearchFilterParent",
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "orderTableColumnMain",
    "tableProjectAdminHeader",
    "tableProjectAdminRecord"
  ],

  cardHeaderTitlePrimary: ["cardHeaderTitlePrimary"],
  listingManagementBlockParent: [
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingSearchFilterParent",
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "orderTableColumnMain",
    "tableProjectAdminHeader",
    "tableProjectAdminRecord"
  ],

  listingTotalParent: ["listingTotalParent", "listingNumberParent"],
  listingNumberParent: ["listingNumberParent"],
  listingSearchFilterParent: [
    "listingSearchFilterParent",
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent"
  ],

  searchOrderFilterParent: [
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent"
  ],

  searchbarPrimary: ["searchbarPrimary"],
  listingSearchFilterDropdownParent: ["listingSearchFilterDropdownParent"],
  orderTableColumnMain: [
    "orderTableColumnMain",
    "tableProjectAdminHeader",
    "tableProjectAdminRecord"
  ],

  tableProjectAdminHeader: ["tableProjectAdminHeader"],
  tableProjectAdminRecord: ["tableProjectAdminRecord"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMembermanageprojects__ArgProps,
      internalVariantPropNames: PlasmicMembermanageprojects__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicMembermanageprojects__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMembermanageprojects";
  } else {
    func.displayName = `PlasmicMembermanageprojects.${nodeName}`;
  }
  return func;
}

export const PlasmicMembermanageprojects = Object.assign(
  // Top-level PlasmicMembermanageprojects renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarMemberEdit: makeNodeComponent("navbarMemberEdit"),
    sectionMemberManageProjectsHeader: makeNodeComponent(
      "sectionMemberManageProjectsHeader"
    ),

    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    sectionMemberManageListings: makeNodeComponent(
      "sectionMemberManageListings"
    ),

    cardHeaderTitlePrimary: makeNodeComponent("cardHeaderTitlePrimary"),
    listingManagementBlockParent: makeNodeComponent(
      "listingManagementBlockParent"
    ),

    listingTotalParent: makeNodeComponent("listingTotalParent"),
    listingNumberParent: makeNodeComponent("listingNumberParent"),
    listingSearchFilterParent: makeNodeComponent("listingSearchFilterParent"),
    searchOrderFilterParent: makeNodeComponent("searchOrderFilterParent"),
    searchbarPrimary: makeNodeComponent("searchbarPrimary"),
    listingSearchFilterDropdownParent: makeNodeComponent(
      "listingSearchFilterDropdownParent"
    ),

    orderTableColumnMain: makeNodeComponent("orderTableColumnMain"),
    tableProjectAdminHeader: makeNodeComponent("tableProjectAdminHeader"),
    tableProjectAdminRecord: makeNodeComponent("tableProjectAdminRecord"),
    // Metadata about props expected for PlasmicMembermanageprojects
    internalVariantProps: PlasmicMembermanageprojects__VariantProps,
    internalArgProps: PlasmicMembermanageprojects__ArgProps
  }
);

export default PlasmicMembermanageprojects;
/* prettier-ignore-end */
