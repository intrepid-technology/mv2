// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 6HzrYVr_1ZK
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: jGROxaZ_Hy/component
import LinkCounterNavigation from "../../LinkCounterNavigation"; // plasmic-import: -OUVGqQU5t/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicNavbarTeamUserProfile.module.css"; // plasmic-import: 6HzrYVr_1ZK/css

export const PlasmicNavbarTeamUserProfile__VariantProps = new Array("selected");

export const PlasmicNavbarTeamUserProfile__ArgProps = new Array();

function PlasmicNavbarTeamUserProfile__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__selected_about]: hasVariant(variants, "selected", "about"),
        [sty.root__selected_partners]: hasVariant(
          variants,
          "selected",
          "partners"
        )
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__selected_about]: hasVariant(
            variants,
            "selected",
            "about"
          ),

          [sty.parent__selected_partners]: hasVariant(
            variants,
            "selected",
            "partners"
          )
        })}
      >
        <NavLink
          data-plasmic-name={"navLink"}
          data-plasmic-override={overrides.navLink}
          className={classNames("__wab_instance", sty.navLink, {
            [sty.navLink__selected_about]: hasVariant(
              variants,
              "selected",
              "about"
            ),

            [sty.navLink__selected_listings]: hasVariant(
              variants,
              "selected",
              "listings"
            ),

            [sty.navLink__selected_members]: hasVariant(
              variants,
              "selected",
              "members"
            ),

            [sty.navLink__selected_packages]: hasVariant(
              variants,
              "selected",
              "packages"
            ),

            [sty.navLink__selected_partners]: hasVariant(
              variants,
              "selected",
              "partners"
            ),

            [sty.navLink__selected_performance]: hasVariant(
              variants,
              "selected",
              "performance"
            ),

            [sty.navLink__selected_reacts]: hasVariant(
              variants,
              "selected",
              "reacts"
            ),

            [sty.navLink__selected_saves]: hasVariant(
              variants,
              "selected",
              "saves"
            ),

            [sty.navLink__selected_team]: hasVariant(
              variants,
              "selected",
              "team"
            ),

            [sty.navLink__selected_views]: hasVariant(
              variants,
              "selected",
              "views"
            )
          })}
          linkText={"About"}
          state={
            hasVariant(variants, "selected", "members")
              ? undefined
              : hasVariant(variants, "selected", "team")
              ? undefined
              : hasVariant(variants, "selected", "saves")
              ? undefined
              : hasVariant(variants, "selected", "reacts")
              ? undefined
              : hasVariant(variants, "selected", "views")
              ? undefined
              : hasVariant(variants, "selected", "performance")
              ? undefined
              : hasVariant(variants, "selected", "packages")
              ? undefined
              : hasVariant(variants, "selected", "listings")
              ? undefined
              : hasVariant(variants, "selected", "partners")
              ? undefined
              : hasVariant(variants, "selected", "about")
              ? "selected"
              : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation___6WKoC,
            {
              [sty.linkCounterNavigation__selected_listings___6WKoCatZ1V]:
                hasVariant(variants, "selected", "listings")
            }
          )}
          navLabel={"Listings"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "listings")
              ? "selected"
              : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation__tx7Dj,
            {
              [sty.linkCounterNavigation__selected_packages__tx7DjkVsPo]:
                hasVariant(variants, "selected", "packages")
            }
          )}
          navLabel={"Packages"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "packages")
              ? "selected"
              : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation__lRhK,
            {
              [sty.linkCounterNavigation__selected_performance__lRhKjT9Zy]:
                hasVariant(variants, "selected", "performance")
            }
          )}
          navLabel={"Performance"}
          numberValue={"12"}
          state={
            hasVariant(variants, "selected", "performance")
              ? "selected"
              : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation___4GqA,
            {
              [sty.linkCounterNavigation__selected_views___4GqA1AbJk]:
                hasVariant(variants, "selected", "views")
            }
          )}
          navLabel={"Views"}
          numberValue={"99,999"}
          state={
            hasVariant(variants, "selected", "views") ? "selected" : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation__jlu83,
            {
              [sty.linkCounterNavigation__selected_reacts__jlu83A9KXd]:
                hasVariant(variants, "selected", "reacts")
            }
          )}
          navLabel={"Reacts"}
          numberValue={"99,999"}
          state={
            hasVariant(variants, "selected", "reacts") ? "selected" : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation__jsKxc,
            {
              [sty.linkCounterNavigation__selected_saves__jsKxcioQd7]:
                hasVariant(variants, "selected", "saves")
            }
          )}
          navLabel={"Saves"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "saves") ? "selected" : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation__dp0Z5,
            {
              [sty.linkCounterNavigation__selected_team__dp0Z5WIx2]: hasVariant(
                variants,
                "selected",
                "team"
              )
            }
          )}
          navLabel={"Team"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "team") ? "selected" : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation__bsu8U,
            {
              [sty.linkCounterNavigation__selected_members__bsu8UEaYwc]:
                hasVariant(variants, "selected", "members")
            }
          )}
          navLabel={"Members"}
          numberValue={"999"}
          state={
            hasVariant(variants, "selected", "members") ? "selected" : undefined
          }
        />

        <LinkCounterNavigation
          className={classNames(
            "__wab_instance",
            sty.linkCounterNavigation__d1Mk9,
            {
              [sty.linkCounterNavigation__selected_partners__d1Mk9PzLrn]:
                hasVariant(variants, "selected", "partners")
            }
          )}
          navLabel={"Partners"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "partners")
              ? "selected"
              : undefined
          }
        />
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "parent", "navLink"],
  parent: ["parent", "navLink"],
  navLink: ["navLink"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarTeamUserProfile__ArgProps,
      internalVariantPropNames: PlasmicNavbarTeamUserProfile__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNavbarTeamUserProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarTeamUserProfile";
  } else {
    func.displayName = `PlasmicNavbarTeamUserProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarTeamUserProfile = Object.assign(
  // Top-level PlasmicNavbarTeamUserProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    navLink: makeNodeComponent("navLink"),
    // Metadata about props expected for PlasmicNavbarTeamUserProfile
    internalVariantProps: PlasmicNavbarTeamUserProfile__VariantProps,
    internalArgProps: PlasmicNavbarTeamUserProfile__ArgProps
  }
);

export default PlasmicNavbarTeamUserProfile;
/* prettier-ignore-end */
