// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: bpMMXdkhlq
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: BXWgCr5-vns/component
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: ta5dUay7HZW/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import UserAvatarButton from "../../UserAvatarButton"; // plasmic-import: w1GnXfIMuv/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import InputTextPrefixSuffix from "../../InputTextPrefixSuffix"; // plasmic-import: 8Sse2xZ7od/component
import InputTextField from "../../InputTextField"; // plasmic-import: ATs3nXJ-Tjc/component
import InputTextAreaPrimary from "../../InputTextAreaPrimary"; // plasmic-import: T-WLdey8LU/component
import SelectGroupDropdownPrimary from "../../SelectGroupDropdownPrimary"; // plasmic-import: -teiDn_7Z-/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: Hp_zc6XLro/component
import InputSearchbarFilterDisplay from "../../InputSearchbarFilterDisplay"; // plasmic-import: zockkqCMBP/component
import CardSocialConnectSwitch from "../../CardSocialConnectSwitch"; // plasmic-import: PjlQKkmde-/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicEditteam.module.css"; // plasmic-import: bpMMXdkhlq/css

export const PlasmicEditteam__VariantProps = new Array();

export const PlasmicEditteam__ArgProps = new Array();

function PlasmicEditteam__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
            navItems={["messages", "notifications", "reviews", "wallet"]}
            selected={"team"}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfile"}
            data-plasmic-override={overrides.sectionTeamEditProfile}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionTeamEditProfile)}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__m46KZ
              )}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__v4Ij4
                  )}
                >
                  {"Edit profile"}
                </div>
              }
              textDisplay={"Team"}
              textSubhead={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__usdte
                  )}
                >
                  {"Set your partner profile and make a great first impression"}
                </div>
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditProfile"}
              data-plasmic-override={overrides.formTeamEditProfile}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formTeamEditProfile)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamLogo"}
                data-plasmic-override={overrides.cardTeamLogo}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamLogo)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__gv7Lp
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__t1A7N
                      )}
                    >
                      {
                        "Click on the avatar to upload a custom image from your files."
                      }
                    </div>
                  }
                >
                  {"Logo"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamUploadLogoButtonGroup"}
                  data-plasmic-override={overrides.teamUploadLogoButtonGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.teamUploadLogoButtonGroup
                  )}
                >
                  <UserAvatarButton
                    data-plasmic-name={"userAvatarButton"}
                    data-plasmic-override={overrides.userAvatarButton}
                    className={classNames(
                      "__wab_instance",
                      sty.userAvatarButton
                    )}
                    size={"_64Px"}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamEditlogoGroup"}
                    data-plasmic-override={overrides.teamEditlogoGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.teamEditlogoGroup
                    )}
                  >
                    <ButtonPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary__qoGiy
                      )}
                      size={"_90"}
                      type={"outline"}
                    >
                      {"Edit"}
                    </ButtonPrimary>

                    <ButtonPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary__lgNss
                      )}
                      size={"_90"}
                      type={"secondary"}
                    >
                      {"Delete"}
                    </ButtonPrimary>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamDisplayname"}
                data-plasmic-override={overrides.cardTeamDisplayname}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamDisplayname)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__uukSn
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__yi5Qw
                      )}
                    >
                      {
                        "Please enter your company or team name as you want it displayed on Intrepid."
                      }
                    </div>
                  }
                >
                  {"Display name"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  data-plasmic-name={"username"}
                  data-plasmic-override={overrides.username}
                  className={classNames("__wab_instance", sty.username)}
                  prefixLabelHeadline={"@"}
                  suffix={"suffix"}
                  type={"primary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamUrl"}
                data-plasmic-override={overrides.cardTeamUrl}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamUrl)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__qniDb
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___7BSxw
                      )}
                    >
                      {
                        "This is your company's URL namespace within the Intrepid community"
                      }
                    </div>
                  }
                >
                  {"Url namespace"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  data-plasmic-name={"inputTextPrefixSuffix"}
                  data-plasmic-override={overrides.inputTextPrefixSuffix}
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix
                  )}
                  prefixLabelHeadline={"intrepid/technology/"}
                  suffix={"suffix"}
                  type={"primary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamTagline"}
                data-plasmic-override={overrides.cardTeamTagline}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamTagline)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__pqkRc
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___0EGio
                      )}
                    >
                      {"Short description of your company or team"}
                    </div>
                  }
                >
                  {"Tagline"}
                </CardHeaderTitlePrimary>

                <InputTextField
                  data-plasmic-name={"tag"}
                  data-plasmic-override={overrides.tag}
                  className={classNames("__wab_instance", sty.tag)}
                  size={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                  type={"secondary"}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamDescription"}
                data-plasmic-override={overrides.cardTeamDescription}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamDescription)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__bp3Lf
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__aUyt
                      )}
                    >
                      {"Overview description of your company or team."}
                    </div>
                  }
                >
                  {"Description"}
                </CardHeaderTitlePrimary>

                <InputTextAreaPrimary
                  data-plasmic-name={"description"}
                  data-plasmic-override={overrides.description}
                  className={classNames("__wab_instance", sty.description)}
                  height={"_90"}
                  type={"secondary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamVideoIntroUrl"}
                data-plasmic-override={overrides.cardTeamVideoIntroUrl}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.cardTeamVideoIntroUrl
                )}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__fVjEb
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__rycgx
                      )}
                    >
                      {
                        "Don't worry — this is optional and it's okay to launch without a video."
                      }
                    </div>
                  }
                >
                  {"Video introduction"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  data-plasmic-name={"video"}
                  data-plasmic-override={overrides.video}
                  className={classNames("__wab_instance", sty.video)}
                  prefixLabelHeadline={"https//"}
                  suffix={"suffix"}
                  type={"primary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"teamSubmitProfile"}
                data-plasmic-override={overrides.teamSubmitProfile}
                className={classNames("__wab_instance", sty.teamSubmitProfile)}
                size={"_180"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__n6QbE
                  )}
                >
                  {"Save profile"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileDetails"}
            data-plasmic-override={overrides.sectionTeamEditProfileDetails}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileDetails
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__iNw1X
              )}
              headings={["title"]}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__neYsn
                  )}
                >
                  {"Details"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your creator details for better visibility and matching in the community"
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditDetails"}
              data-plasmic-override={overrides.formTeamEditDetails}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formTeamEditDetails)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamLocation"}
                data-plasmic-override={overrides.cardTeamLocation}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamLocation)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__uhObt
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__s7Wwc
                      )}
                    >
                      {
                        "Please enter the Country and City of your company or team's location."
                      }
                    </div>
                  }
                >
                  {"Location"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamLocationGroup"}
                  data-plasmic-override={overrides.teamLocationGroup}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.teamLocationGroup)}
                >
                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"country"}
                    data-plasmic-override={overrides.country}
                    className={classNames("__wab_instance", sty.country)}
                    description={"description"}
                  >
                    {"Country"}
                  </SelectGroupDropdownPrimary>

                  <InputTextForm
                    data-plasmic-name={"city"}
                    data-plasmic-override={overrides.city}
                    className={classNames("__wab_instance", sty.city)}
                    labelHeadline={"City"}
                    subhead={"subhead"}
                    type={"primary"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_360"
                    }
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamIndustry"}
                data-plasmic-override={overrides.cardTeamIndustry}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamIndustry)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___77Wa
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__pxWbU
                      )}
                    >
                      {"Select the industry and the size of your company"}
                    </div>
                  }
                >
                  {"Industry & company size"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamIndustryGroup"}
                  data-plasmic-override={overrides.teamIndustryGroup}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.teamIndustryGroup)}
                >
                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"industry"}
                    data-plasmic-override={overrides.industry}
                    className={classNames("__wab_instance", sty.industry)}
                    description={"description"}
                  >
                    {"Industry"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"companySize"}
                    data-plasmic-override={overrides.companySize}
                    className={classNames("__wab_instance", sty.companySize)}
                    description={"description"}
                  >
                    {"Company size"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamLanguages"}
                data-plasmic-override={overrides.cardTeamLanguages}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamLanguages)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__hh8K1
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___4Fska
                      )}
                    >
                      {"Enter the languages you speak on your team"}
                    </div>
                  }
                >
                  {"Languages"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputGroupTeamLanguages"}
                  data-plasmic-override={overrides.inputGroupTeamLanguages}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupTeamLanguages
                  )}
                >
                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"language"}
                    data-plasmic-override={overrides.language}
                    className={classNames("__wab_instance", sty.language)}
                    description={"description"}
                  >
                    {"Primary"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__j53N5
                    )}
                    description={"description"}
                  >
                    {"Secondary"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamSkills"}
                data-plasmic-override={overrides.cardTeamSkills}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamSkills)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__pPsFm
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__xsqey
                      )}
                    >
                      {
                        "Search and enter your skills and strengths, separated by commas"
                      }
                    </div>
                  }
                >
                  {"Skills"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  data-plasmic-name={"skill"}
                  data-plasmic-override={overrides.skill}
                  className={classNames("__wab_instance", sty.skill)}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamCommunity"}
                data-plasmic-override={overrides.cardTeamCommunity}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamCommunity)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__w2MaY
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__kV8Sr
                      )}
                    >
                      {
                        "Search and enter your industry or most relevant community"
                      }
                    </div>
                  }
                >
                  {"Community"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  data-plasmic-name={"community"}
                  data-plasmic-override={overrides.community}
                  className={classNames("__wab_instance", sty.community)}
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"teamSubmitDetails"}
                data-plasmic-override={overrides.teamSubmitDetails}
                className={classNames("__wab_instance", sty.teamSubmitDetails)}
                size={"_180"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__v7KqQ
                  )}
                >
                  {"Save details"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileMarkets"}
            data-plasmic-override={overrides.sectionTeamEditProfileMarkets}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileMarkets
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__atS0
              )}
              headings={["title"]}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__vhIlB
                  )}
                >
                  {"Markets"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your interests and rates to match with relevant makers and creators"
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditMarkets"}
              data-plasmic-override={overrides.formTeamEditMarkets}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formTeamEditMarkets)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamMarkets"}
                data-plasmic-override={overrides.cardTeamMarkets}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamMarkets)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__cD0F
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__o1RK
                      )}
                    >
                      {
                        "Select the industry and company size of your desired partners or customers."
                      }
                    </div>
                  }
                >
                  {"Markets & customers"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamMarketsGroup"}
                  data-plasmic-override={overrides.teamMarketsGroup}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.teamMarketsGroup)}
                >
                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"marketIndustry"}
                    data-plasmic-override={overrides.marketIndustry}
                    className={classNames("__wab_instance", sty.marketIndustry)}
                    description={"description"}
                  >
                    {"Industry"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"marketcompanySize"}
                    data-plasmic-override={overrides.marketcompanySize}
                    className={classNames(
                      "__wab_instance",
                      sty.marketcompanySize
                    )}
                    description={"description"}
                  >
                    {"Company size"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamProjects"}
                data-plasmic-override={overrides.cardTeamProjects}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamProjects)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__iKrZt
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__coJrh
                      )}
                    >
                      {
                        "Select the project size and rate per hour of your services, or your desired partners."
                      }
                    </div>
                  }
                >
                  {"Projects & rates"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamProjectsGroup"}
                  data-plasmic-override={overrides.teamProjectsGroup}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.teamProjectsGroup)}
                >
                  <SelectGroupDropdownPrimary
                    data-plasmic-name={"projectRates"}
                    data-plasmic-override={overrides.projectRates}
                    className={classNames("__wab_instance", sty.projectRates)}
                    description={"description"}
                  >
                    {"Primary"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__kd6Ly
                    )}
                    description={"description"}
                  >
                    {"Secondary"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamInterests"}
                data-plasmic-override={overrides.cardTeamInterests}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamInterests)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__seVo7
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__jEe9H
                      )}
                    >
                      {
                        "Search and enter the products/services you are interested in, separated by commas"
                      }
                    </div>
                  }
                >
                  {"Interests"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  data-plasmic-name={"interest"}
                  data-plasmic-override={overrides.interest}
                  className={classNames("__wab_instance", sty.interest)}
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"teamSubmitMarkets"}
                data-plasmic-override={overrides.teamSubmitMarkets}
                className={classNames("__wab_instance", sty.teamSubmitMarkets)}
                size={"_180"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__rznh3
                  )}
                >
                  {"Save markets"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileSocial"}
            data-plasmic-override={overrides.sectionTeamEditProfileSocial}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileSocial
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__mtzgk
              )}
              headings={["title"]}
              size={"_540"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__tTnQg
                  )}
                >
                  {"Web and social"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Securely verify your accounts and display links on your page. We’ll never post on your behalf."
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditSocial"}
              data-plasmic-override={overrides.formTeamEditSocial}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formTeamEditSocial)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamWebsite"}
                data-plasmic-override={overrides.cardTeamWebsite}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamWebsite)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__qbb0
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__nIdh
                      )}
                    >
                      {"Enter your company's website address"}
                    </div>
                  }
                >
                  {"Website"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  data-plasmic-name={"website"}
                  data-plasmic-override={overrides.website}
                  className={classNames("__wab_instance", sty.website)}
                  prefixLabelHeadline={"https://"}
                  suffix={"suffix"}
                  type={"primary"}
                  width={
                    hasVariant(globalVariants, "screen", "iphone678Plus")
                      ? undefined
                      : "_540"
                  }
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamSocial"}
                data-plasmic-override={overrides.cardTeamSocial}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamSocial)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__xigdq
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__dZnbx
                      )}
                    >
                      {
                        "Increase trust and visibility by connecting the social profiles you want to include on your profile"
                      }
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__bviP7
                    )}
                  >
                    {"Social"}
                  </div>
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputGroupTeamSocial"}
                  data-plasmic-override={overrides.inputGroupTeamSocial}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupTeamSocial
                  )}
                >
                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__poC9L
                    )}
                    socialNetwork={"instagram"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__wTlid
                    )}
                    socialNetwork={"facebook"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__l8ESj
                    )}
                    socialNetwork={"linkedin"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch___9ENwg
                    )}
                    socialNetwork={"twitter"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__mWllJ
                    )}
                    socialNetwork={"youtube"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch___0ButS
                    )}
                    socialNetwork={"tikTok"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__aUif3
                    )}
                    socialNetwork={"github"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__uk3B7
                    )}
                    socialNetwork={"dribbble"}
                    width={
                      hasVariant(globalVariants, "screen", "iphone678Plus")
                        ? undefined
                        : "_540"
                    }
                  />
                </p.Stack>
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"teamSubmitSocials"}
                data-plasmic-override={overrides.teamSubmitSocials}
                className={classNames("__wab_instance", sty.teamSubmitSocials)}
                size={"_180"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text___4QfFc
                  )}
                >
                  {"Save socials"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarPartnerEdit",
    "sectionTeamEditProfile",
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup",
    "cardTeamDisplayname",
    "username",
    "cardTeamUrl",
    "inputTextPrefixSuffix",
    "cardTeamTagline",
    "tag",
    "cardTeamDescription",
    "description",
    "cardTeamVideoIntroUrl",
    "video",
    "teamSubmitProfile",
    "sectionTeamEditProfileDetails",
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "country",
    "city",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industry",
    "companySize",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "language",
    "cardTeamSkills",
    "skill",
    "cardTeamCommunity",
    "community",
    "teamSubmitDetails",
    "sectionTeamEditProfileMarkets",
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustry",
    "marketcompanySize",
    "cardTeamProjects",
    "teamProjectsGroup",
    "projectRates",
    "cardTeamInterests",
    "interest",
    "teamSubmitMarkets",
    "sectionTeamEditProfileSocial",
    "formTeamEditSocial",
    "cardTeamWebsite",
    "website",
    "cardTeamSocial",
    "inputGroupTeamSocial",
    "teamSubmitSocials",
    "footerB"
  ],

  navbarInternal: ["navbarInternal"],
  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionTeamEditProfile: [
    "sectionTeamEditProfile",
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup",
    "cardTeamDisplayname",
    "username",
    "cardTeamUrl",
    "inputTextPrefixSuffix",
    "cardTeamTagline",
    "tag",
    "cardTeamDescription",
    "description",
    "cardTeamVideoIntroUrl",
    "video",
    "teamSubmitProfile"
  ],

  formTeamEditProfile: [
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup",
    "cardTeamDisplayname",
    "username",
    "cardTeamUrl",
    "inputTextPrefixSuffix",
    "cardTeamTagline",
    "tag",
    "cardTeamDescription",
    "description",
    "cardTeamVideoIntroUrl",
    "video",
    "teamSubmitProfile"
  ],

  cardTeamLogo: [
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup"
  ],

  teamUploadLogoButtonGroup: [
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup"
  ],

  userAvatarButton: ["userAvatarButton"],
  teamEditlogoGroup: ["teamEditlogoGroup"],
  cardTeamDisplayname: ["cardTeamDisplayname", "username"],
  username: ["username"],
  cardTeamUrl: ["cardTeamUrl", "inputTextPrefixSuffix"],
  inputTextPrefixSuffix: ["inputTextPrefixSuffix"],
  cardTeamTagline: ["cardTeamTagline", "tag"],
  tag: ["tag"],
  cardTeamDescription: ["cardTeamDescription", "description"],
  description: ["description"],
  cardTeamVideoIntroUrl: ["cardTeamVideoIntroUrl", "video"],
  video: ["video"],
  teamSubmitProfile: ["teamSubmitProfile"],
  sectionTeamEditProfileDetails: [
    "sectionTeamEditProfileDetails",
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "country",
    "city",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industry",
    "companySize",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "language",
    "cardTeamSkills",
    "skill",
    "cardTeamCommunity",
    "community",
    "teamSubmitDetails"
  ],

  formTeamEditDetails: [
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "country",
    "city",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industry",
    "companySize",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "language",
    "cardTeamSkills",
    "skill",
    "cardTeamCommunity",
    "community",
    "teamSubmitDetails"
  ],

  cardTeamLocation: [
    "cardTeamLocation",
    "teamLocationGroup",
    "country",
    "city"
  ],

  teamLocationGroup: ["teamLocationGroup", "country", "city"],
  country: ["country"],
  city: ["city"],
  cardTeamIndustry: [
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industry",
    "companySize"
  ],

  teamIndustryGroup: ["teamIndustryGroup", "industry", "companySize"],
  industry: ["industry"],
  companySize: ["companySize"],
  cardTeamLanguages: [
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "language"
  ],

  inputGroupTeamLanguages: ["inputGroupTeamLanguages", "language"],
  language: ["language"],
  cardTeamSkills: ["cardTeamSkills", "skill"],
  skill: ["skill"],
  cardTeamCommunity: ["cardTeamCommunity", "community"],
  community: ["community"],
  teamSubmitDetails: ["teamSubmitDetails"],
  sectionTeamEditProfileMarkets: [
    "sectionTeamEditProfileMarkets",
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustry",
    "marketcompanySize",
    "cardTeamProjects",
    "teamProjectsGroup",
    "projectRates",
    "cardTeamInterests",
    "interest",
    "teamSubmitMarkets"
  ],

  formTeamEditMarkets: [
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustry",
    "marketcompanySize",
    "cardTeamProjects",
    "teamProjectsGroup",
    "projectRates",
    "cardTeamInterests",
    "interest",
    "teamSubmitMarkets"
  ],

  cardTeamMarkets: [
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustry",
    "marketcompanySize"
  ],

  teamMarketsGroup: ["teamMarketsGroup", "marketIndustry", "marketcompanySize"],
  marketIndustry: ["marketIndustry"],
  marketcompanySize: ["marketcompanySize"],
  cardTeamProjects: ["cardTeamProjects", "teamProjectsGroup", "projectRates"],
  teamProjectsGroup: ["teamProjectsGroup", "projectRates"],
  projectRates: ["projectRates"],
  cardTeamInterests: ["cardTeamInterests", "interest"],
  interest: ["interest"],
  teamSubmitMarkets: ["teamSubmitMarkets"],
  sectionTeamEditProfileSocial: [
    "sectionTeamEditProfileSocial",
    "formTeamEditSocial",
    "cardTeamWebsite",
    "website",
    "cardTeamSocial",
    "inputGroupTeamSocial",
    "teamSubmitSocials"
  ],

  formTeamEditSocial: [
    "formTeamEditSocial",
    "cardTeamWebsite",
    "website",
    "cardTeamSocial",
    "inputGroupTeamSocial",
    "teamSubmitSocials"
  ],

  cardTeamWebsite: ["cardTeamWebsite", "website"],
  website: ["website"],
  cardTeamSocial: ["cardTeamSocial", "inputGroupTeamSocial"],
  inputGroupTeamSocial: ["inputGroupTeamSocial"],
  teamSubmitSocials: ["teamSubmitSocials"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditteam__ArgProps,
      internalVariantPropNames: PlasmicEditteam__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicEditteam__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditteam";
  } else {
    func.displayName = `PlasmicEditteam.${nodeName}`;
  }
  return func;
}

export const PlasmicEditteam = Object.assign(
  // Top-level PlasmicEditteam renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionTeamEditProfile: makeNodeComponent("sectionTeamEditProfile"),
    formTeamEditProfile: makeNodeComponent("formTeamEditProfile"),
    cardTeamLogo: makeNodeComponent("cardTeamLogo"),
    teamUploadLogoButtonGroup: makeNodeComponent("teamUploadLogoButtonGroup"),
    userAvatarButton: makeNodeComponent("userAvatarButton"),
    teamEditlogoGroup: makeNodeComponent("teamEditlogoGroup"),
    cardTeamDisplayname: makeNodeComponent("cardTeamDisplayname"),
    username: makeNodeComponent("username"),
    cardTeamUrl: makeNodeComponent("cardTeamUrl"),
    inputTextPrefixSuffix: makeNodeComponent("inputTextPrefixSuffix"),
    cardTeamTagline: makeNodeComponent("cardTeamTagline"),
    tag: makeNodeComponent("tag"),
    cardTeamDescription: makeNodeComponent("cardTeamDescription"),
    description: makeNodeComponent("description"),
    cardTeamVideoIntroUrl: makeNodeComponent("cardTeamVideoIntroUrl"),
    video: makeNodeComponent("video"),
    teamSubmitProfile: makeNodeComponent("teamSubmitProfile"),
    sectionTeamEditProfileDetails: makeNodeComponent(
      "sectionTeamEditProfileDetails"
    ),

    formTeamEditDetails: makeNodeComponent("formTeamEditDetails"),
    cardTeamLocation: makeNodeComponent("cardTeamLocation"),
    teamLocationGroup: makeNodeComponent("teamLocationGroup"),
    country: makeNodeComponent("country"),
    city: makeNodeComponent("city"),
    cardTeamIndustry: makeNodeComponent("cardTeamIndustry"),
    teamIndustryGroup: makeNodeComponent("teamIndustryGroup"),
    industry: makeNodeComponent("industry"),
    companySize: makeNodeComponent("companySize"),
    cardTeamLanguages: makeNodeComponent("cardTeamLanguages"),
    inputGroupTeamLanguages: makeNodeComponent("inputGroupTeamLanguages"),
    language: makeNodeComponent("language"),
    cardTeamSkills: makeNodeComponent("cardTeamSkills"),
    skill: makeNodeComponent("skill"),
    cardTeamCommunity: makeNodeComponent("cardTeamCommunity"),
    community: makeNodeComponent("community"),
    teamSubmitDetails: makeNodeComponent("teamSubmitDetails"),
    sectionTeamEditProfileMarkets: makeNodeComponent(
      "sectionTeamEditProfileMarkets"
    ),

    formTeamEditMarkets: makeNodeComponent("formTeamEditMarkets"),
    cardTeamMarkets: makeNodeComponent("cardTeamMarkets"),
    teamMarketsGroup: makeNodeComponent("teamMarketsGroup"),
    marketIndustry: makeNodeComponent("marketIndustry"),
    marketcompanySize: makeNodeComponent("marketcompanySize"),
    cardTeamProjects: makeNodeComponent("cardTeamProjects"),
    teamProjectsGroup: makeNodeComponent("teamProjectsGroup"),
    projectRates: makeNodeComponent("projectRates"),
    cardTeamInterests: makeNodeComponent("cardTeamInterests"),
    interest: makeNodeComponent("interest"),
    teamSubmitMarkets: makeNodeComponent("teamSubmitMarkets"),
    sectionTeamEditProfileSocial: makeNodeComponent(
      "sectionTeamEditProfileSocial"
    ),

    formTeamEditSocial: makeNodeComponent("formTeamEditSocial"),
    cardTeamWebsite: makeNodeComponent("cardTeamWebsite"),
    website: makeNodeComponent("website"),
    cardTeamSocial: makeNodeComponent("cardTeamSocial"),
    inputGroupTeamSocial: makeNodeComponent("inputGroupTeamSocial"),
    teamSubmitSocials: makeNodeComponent("teamSubmitSocials"),
    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicEditteam
    internalVariantProps: PlasmicEditteam__VariantProps,
    internalArgProps: PlasmicEditteam__ArgProps
  }
);

export default PlasmicEditteam;
/* prettier-ignore-end */
