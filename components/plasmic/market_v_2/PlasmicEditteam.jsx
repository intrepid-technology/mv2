// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: bpMMXdkhlq
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: BXWgCr5-vns/component
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: ta5dUay7HZW/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import FormContext from "../../FormContext"; // plasmic-import: fzhRfAQRK6/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import Button from "../../Button"; // plasmic-import: ftJnovScMuV/component
import FormTextInput from "../../FormTextInput"; // plasmic-import: egzqjpKDP_e/component
import FormTextAreaInput from "../../FormTextAreaInput"; // plasmic-import: rDSDf80NUiR/component
import FormSelectInput from "../../FormSelectInput"; // plasmic-import: VSW4TWeqMx/component
import InputSearchbarFilterDisplay from "../../InputSearchbarFilterDisplay"; // plasmic-import: zockkqCMBP/component
import SocialPlatformsSwitchInputs from "../../SocialPlatformsSwitchInputs"; // plasmic-import: KT8HFDqoR9t/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicEditteam.module.css"; // plasmic-import: bpMMXdkhlq/css

export const PlasmicEditteam__VariantProps = new Array();

export const PlasmicEditteam__ArgProps = new Array();

function PlasmicEditteam__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
            navItems={["messages", "notifications", "reviews", "wallet"]}
            selected={"team"}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfile"}
            data-plasmic-override={overrides.sectionTeamEditProfile}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionTeamEditProfile)}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__m46KZ
              )}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__v4Ij4
                  )}
                >
                  {"Edit profile"}
                </div>
              }
              textDisplay={"Team"}
              textSubhead={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__usdte
                  )}
                >
                  {"Set your partner profile and make a great first impression"}
                </div>
              }
            />

            <FormContext
              data-plasmic-name={"teamProfileForm"}
              data-plasmic-override={overrides.teamProfileForm}
              className={classNames("__wab_instance", sty.teamProfileForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formTeamEditProfile"}
                data-plasmic-override={overrides.formTeamEditProfile}
                hasGap={true}
                className={classNames(defaultcss.all, sty.formTeamEditProfile)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamLogo"}
                  data-plasmic-override={overrides.cardTeamLogo}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamLogo)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__gv7Lp
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__t1A7N
                        )}
                      >
                        {
                          "Click on the avatar to upload a custom image from your files."
                        }
                      </div>
                    }
                  >
                    {"Logo"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamUploadLogoButtonGroup"}
                    data-plasmic-override={overrides.teamUploadLogoButtonGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.teamUploadLogoButtonGroup
                    )}
                  >
                    <div
                      data-plasmic-name={"teamLogoImageWrapper"}
                      data-plasmic-override={overrides.teamLogoImageWrapper}
                      className={classNames(
                        defaultcss.all,
                        sty.teamLogoImageWrapper
                      )}
                    >
                      <img
                        data-plasmic-name={"teamLogoImage"}
                        data-plasmic-override={overrides.teamLogoImage}
                        alt={""}
                        className={classNames(
                          defaultcss.img,
                          sty.teamLogoImage
                        )}
                        src={"/plasmic/market_v_2/images/image4.png"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"teamEditlogoGroup"}
                      data-plasmic-override={overrides.teamEditlogoGroup}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.teamEditlogoGroup
                      )}
                    >
                      <Button
                        data-plasmic-name={"editLogoButton"}
                        data-plasmic-override={overrides.editLogoButton}
                        className={classNames(
                          "__wab_instance",
                          sty.editLogoButton
                        )}
                        preventDefault={"true"}
                        rounded={"rounded"}
                        type={"outline"}
                      >
                        {"Edit"}
                      </Button>

                      <Button
                        data-plasmic-name={"deleteLogoButton"}
                        data-plasmic-override={overrides.deleteLogoButton}
                        className={classNames(
                          "__wab_instance",
                          sty.deleteLogoButton
                        )}
                        preventDefault={"true"}
                        rounded={"rounded"}
                        type={"secondary"}
                      >
                        {"Delete"}
                      </Button>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamDisplayname"}
                  data-plasmic-override={overrides.cardTeamDisplayname}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.cardTeamDisplayname
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__uukSn
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__yi5Qw
                        )}
                      >
                        {
                          "Please enter your company or team name as you want it displayed on Intrepid."
                        }
                      </div>
                    }
                  >
                    {"Display name"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"displayNameTextInput"}
                    data-plasmic-override={overrides.displayNameTextInput}
                    adornment={["start"]}
                    className={classNames(
                      "__wab_instance",
                      sty.displayNameTextInput
                    )}
                    name={"displayName"}
                    placeholder={""}
                    startAdornment={"@"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamUrl"}
                  data-plasmic-override={overrides.cardTeamUrl}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamUrl)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__qniDb
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text___7BSxw
                        )}
                      >
                        {
                          "This is your company's URL namespace within the Intrepid community"
                        }
                      </div>
                    }
                  >
                    {"Url namespace"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"companuUrlTextInput"}
                    data-plasmic-override={overrides.companuUrlTextInput}
                    adornment={["start"]}
                    className={classNames(
                      "__wab_instance",
                      sty.companuUrlTextInput
                    )}
                    name={"company.url"}
                    startAdornment={"intrepid/technology/"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamTagline"}
                  data-plasmic-override={overrides.cardTeamTagline}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamTagline)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__pqkRc
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text___0EGio
                        )}
                      >
                        {"Short description of your company or team"}
                      </div>
                    }
                  >
                    {"Tagline"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"tagLineTextInput"}
                    data-plasmic-override={overrides.tagLineTextInput}
                    className={classNames(
                      "__wab_instance",
                      sty.tagLineTextInput
                    )}
                    name={"company.tagLine"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamDescription"}
                  data-plasmic-override={overrides.cardTeamDescription}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.cardTeamDescription
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__bp3Lf
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__aUyt
                        )}
                      >
                        {"Overview description of your company or team."}
                      </div>
                    }
                  >
                    {"Description"}
                  </CardHeaderTitlePrimary>

                  <FormTextAreaInput
                    data-plasmic-name={"companyDescriptionITextAreaInput"}
                    data-plasmic-override={
                      overrides.companyDescriptionITextAreaInput
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.companyDescriptionITextAreaInput
                    )}
                    name={"company.description"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamVideoIntroUrl"}
                  data-plasmic-override={overrides.cardTeamVideoIntroUrl}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.cardTeamVideoIntroUrl
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__fVjEb
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__rycgx
                        )}
                      >
                        {
                          "Don't worry — this is optional and it's okay to launch without a video."
                        }
                      </div>
                    }
                  >
                    {"Video introduction"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"videoIntroTextInput"}
                    data-plasmic-override={overrides.videoIntroTextInput}
                    adornment={["start"]}
                    className={classNames(
                      "__wab_instance",
                      sty.videoIntroTextInput
                    )}
                    name={"company.videoIntroduction"}
                    startAdornment={"https//"}
                    type={"secondary"}
                  />
                </p.Stack>

                <Button
                  data-plasmic-name={"saveProfileButton"}
                  data-plasmic-override={overrides.saveProfileButton}
                  className={classNames(
                    "__wab_instance",
                    sty.saveProfileButton
                  )}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__rzibs
                    )}
                  >
                    {"Save Profile"}
                  </div>
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileDetails"}
            data-plasmic-override={overrides.sectionTeamEditProfileDetails}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileDetails
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__iNw1X
              )}
              headings={["title"]}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__neYsn
                  )}
                >
                  {"Details"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your creator details for better visibility and matching in the community"
              }
            />

            <FormContext
              data-plasmic-name={"teamDetailsForm"}
              data-plasmic-override={overrides.teamDetailsForm}
              className={classNames("__wab_instance", sty.teamDetailsForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formTeamEditDetails"}
                data-plasmic-override={overrides.formTeamEditDetails}
                hasGap={true}
                className={classNames(defaultcss.all, sty.formTeamEditDetails)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamLocation"}
                  data-plasmic-override={overrides.cardTeamLocation}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamLocation)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__uhObt
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__s7Wwc
                        )}
                      >
                        {
                          "Please enter the Country and City of your company or team's location."
                        }
                      </div>
                    }
                  >
                    {"Location"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamLocationGroup"}
                    data-plasmic-override={overrides.teamLocationGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.teamLocationGroup
                    )}
                  >
                    <FormSelectInput
                      data-plasmic-name={"countrySelectInput"}
                      data-plasmic-override={overrides.countrySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.countrySelectInput
                      )}
                      label={"Country"}
                      name={"location.country"}
                      type={"secondary"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"citySelectInput"}
                      data-plasmic-override={overrides.citySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.citySelectInput
                      )}
                      label={"City"}
                      name={"location.city"}
                      type={"secondary"}
                    />
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamIndustry"}
                  data-plasmic-override={overrides.cardTeamIndustry}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamIndustry)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary___77Wa
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__pxWbU
                        )}
                      >
                        {"Select the industry and the size of your company"}
                      </div>
                    }
                  >
                    {"Industry & company size"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamIndustryGroup"}
                    data-plasmic-override={overrides.teamIndustryGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.teamIndustryGroup
                    )}
                  >
                    <FormSelectInput
                      data-plasmic-name={"industrySelectInput"}
                      data-plasmic-override={overrides.industrySelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.industrySelectInput
                      )}
                      label={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text___9BfMh
                          )}
                        >
                          {"Industry"}
                        </div>
                      }
                      name={"industry"}
                      type={"secondary"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"companySizeSelectInput"}
                      data-plasmic-override={overrides.companySizeSelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.companySizeSelectInput
                      )}
                      label={"Company Size"}
                      name={"companySize"}
                    />
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamLanguages"}
                  data-plasmic-override={overrides.cardTeamLanguages}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamLanguages)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__hh8K1
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text___4Fska
                        )}
                      >
                        {"Enter the languages you speak on your team"}
                      </div>
                    }
                  >
                    {"Languages"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"inputGroupTeamLanguages"}
                    data-plasmic-override={overrides.inputGroupTeamLanguages}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.inputGroupTeamLanguages
                    )}
                  >
                    <FormSelectInput
                      data-plasmic-name={"primaryLanguageSelectInput"}
                      data-plasmic-override={
                        overrides.primaryLanguageSelectInput
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.primaryLanguageSelectInput
                      )}
                      label={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__r37Rj
                          )}
                        >
                          {"Primary"}
                        </div>
                      }
                      name={"language.primary"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"secondaryLanguageSelectInput"}
                      data-plasmic-override={
                        overrides.secondaryLanguageSelectInput
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.secondaryLanguageSelectInput
                      )}
                      label={"Secondary"}
                      name={"language.secondary"}
                    />
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamSkills"}
                  data-plasmic-override={overrides.cardTeamSkills}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamSkills)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__pPsFm
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__xsqey
                        )}
                      >
                        {
                          "Search and enter your skills and strengths, separated by commas"
                        }
                      </div>
                    }
                  >
                    {"Skills"}
                  </CardHeaderTitlePrimary>

                  <InputSearchbarFilterDisplay
                    data-plasmic-name={"skill"}
                    data-plasmic-override={overrides.skill}
                    className={classNames("__wab_instance", sty.skill)}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamCommunity"}
                  data-plasmic-override={overrides.cardTeamCommunity}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamCommunity)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__w2MaY
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__kV8Sr
                        )}
                      >
                        {
                          "Search and enter your industry or most relevant community"
                        }
                      </div>
                    }
                  >
                    {"Community"}
                  </CardHeaderTitlePrimary>

                  <InputSearchbarFilterDisplay
                    data-plasmic-name={"community"}
                    data-plasmic-override={overrides.community}
                    className={classNames("__wab_instance", sty.community)}
                  />
                </p.Stack>

                <Button
                  data-plasmic-name={"submitDetailsButton"}
                  data-plasmic-override={overrides.submitDetailsButton}
                  className={classNames(
                    "__wab_instance",
                    sty.submitDetailsButton
                  )}
                >
                  {"Save Details"}
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileMarkets"}
            data-plasmic-override={overrides.sectionTeamEditProfileMarkets}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileMarkets
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__atS0
              )}
              headings={["title"]}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__vhIlB
                  )}
                >
                  {"Markets"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your interests and rates to match with relevant makers and creators"
              }
            />

            <FormContext
              data-plasmic-name={"teamMarketForm"}
              data-plasmic-override={overrides.teamMarketForm}
              className={classNames("__wab_instance", sty.teamMarketForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formTeamEditMarkets"}
                data-plasmic-override={overrides.formTeamEditMarkets}
                hasGap={true}
                className={classNames(defaultcss.all, sty.formTeamEditMarkets)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamMarkets"}
                  data-plasmic-override={overrides.cardTeamMarkets}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamMarkets)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__cD0F
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__o1RK
                        )}
                      >
                        {
                          "Select the industry and company size of your desired partners or customers."
                        }
                      </div>
                    }
                  >
                    {"Markets & customers"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamMarketsGroup"}
                    data-plasmic-override={overrides.teamMarketsGroup}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.teamMarketsGroup)}
                  >
                    <FormSelectInput
                      data-plasmic-name={"marketIndustrySelectInput"}
                      data-plasmic-override={
                        overrides.marketIndustrySelectInput
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.marketIndustrySelectInput
                      )}
                      label={"Industory"}
                      name={"industry"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"marketCompanySizeSelectInput"}
                      data-plasmic-override={
                        overrides.marketCompanySizeSelectInput
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.marketCompanySizeSelectInput
                      )}
                      label={"Company Size"}
                      name={"companySize"}
                    />
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamProjects"}
                  data-plasmic-override={overrides.cardTeamProjects}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamProjects)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__iKrZt
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__coJrh
                        )}
                      >
                        {
                          "Select the project size and rate per hour of your services, or your desired partners."
                        }
                      </div>
                    }
                  >
                    {"Projects & rates"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamProjectsGroup"}
                    data-plasmic-override={overrides.teamProjectsGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.teamProjectsGroup
                    )}
                  >
                    <FormSelectInput
                      data-plasmic-name={"primaryRateSelectInput"}
                      data-plasmic-override={overrides.primaryRateSelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.primaryRateSelectInput
                      )}
                      label={"Primary"}
                      name={"projectRate.primary"}
                    />

                    <FormSelectInput
                      data-plasmic-name={"secondaryRateSelectInput"}
                      data-plasmic-override={overrides.secondaryRateSelectInput}
                      className={classNames(
                        "__wab_instance",
                        sty.secondaryRateSelectInput
                      )}
                      label={"Secondary"}
                      name={"projectRate.secondary"}
                    />
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamInterests"}
                  data-plasmic-override={overrides.cardTeamInterests}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamInterests)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__seVo7
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__jEe9H
                        )}
                      >
                        {
                          "Search and enter the products/services you are interested in, separated by commas"
                        }
                      </div>
                    }
                  >
                    {"Interests"}
                  </CardHeaderTitlePrimary>

                  <InputSearchbarFilterDisplay
                    data-plasmic-name={"interest"}
                    data-plasmic-override={overrides.interest}
                    className={classNames("__wab_instance", sty.interest)}
                  />
                </p.Stack>

                <Button
                  data-plasmic-name={"submitMarketsButton"}
                  data-plasmic-override={overrides.submitMarketsButton}
                  className={classNames(
                    "__wab_instance",
                    sty.submitMarketsButton
                  )}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__c1Rmk
                    )}
                  >
                    {"Save Markets"}
                  </div>
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileSocial"}
            data-plasmic-override={overrides.sectionTeamEditProfileSocial}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileSocial
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__mtzgk
              )}
              headings={["title"]}
              size={"_540"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__tTnQg
                  )}
                >
                  {"Web and social"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Securely verify your accounts and display links on your page. We’ll never post on your behalf."
              }
            />

            <FormContext
              data-plasmic-name={"teamSocialForm"}
              data-plasmic-override={overrides.teamSocialForm}
              className={classNames("__wab_instance", sty.teamSocialForm)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"formTeamEditSocial"}
                data-plasmic-override={overrides.formTeamEditSocial}
                hasGap={true}
                className={classNames(defaultcss.all, sty.formTeamEditSocial)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamWebsite"}
                  data-plasmic-override={overrides.cardTeamWebsite}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamWebsite)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__qbb0
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__nIdh
                        )}
                      >
                        {"Enter your company's website address"}
                      </div>
                    }
                  >
                    {"Website"}
                  </CardHeaderTitlePrimary>

                  <FormTextInput
                    data-plasmic-name={"websiteTextInput"}
                    data-plasmic-override={overrides.websiteTextInput}
                    adornment={["start"]}
                    className={classNames(
                      "__wab_instance",
                      sty.websiteTextInput
                    )}
                    name={"website"}
                    startAdornment={"https://"}
                    type={"secondary"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamSocial"}
                  data-plasmic-override={overrides.cardTeamSocial}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamSocial)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__xigdq
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__dZnbx
                        )}
                      >
                        {
                          "Increase trust and visibility by connecting the social profiles you want to include on your profile"
                        }
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__bviP7
                      )}
                    >
                      {"Social"}
                    </div>
                  </CardHeaderTitlePrimary>

                  <SocialPlatformsSwitchInputs
                    data-plasmic-name={"socialPlatformsSwitchInputs"}
                    data-plasmic-override={
                      overrides.socialPlatformsSwitchInputs
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.socialPlatformsSwitchInputs
                    )}
                  />
                </p.Stack>

                <Button
                  data-plasmic-name={"submitSocialsButton"}
                  data-plasmic-override={overrides.submitSocialsButton}
                  className={classNames(
                    "__wab_instance",
                    sty.submitSocialsButton
                  )}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text___4Ptxx
                    )}
                  >
                    {"Save Socials"}
                  </div>
                </Button>
              </p.Stack>
            </FormContext>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarPartnerEdit",
    "sectionTeamEditProfile",
    "teamProfileForm",
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "teamLogoImageWrapper",
    "teamLogoImage",
    "teamEditlogoGroup",
    "editLogoButton",
    "deleteLogoButton",
    "cardTeamDisplayname",
    "displayNameTextInput",
    "cardTeamUrl",
    "companuUrlTextInput",
    "cardTeamTagline",
    "tagLineTextInput",
    "cardTeamDescription",
    "companyDescriptionITextAreaInput",
    "cardTeamVideoIntroUrl",
    "videoIntroTextInput",
    "saveProfileButton",
    "sectionTeamEditProfileDetails",
    "teamDetailsForm",
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "countrySelectInput",
    "citySelectInput",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industrySelectInput",
    "companySizeSelectInput",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput",
    "cardTeamSkills",
    "skill",
    "cardTeamCommunity",
    "community",
    "submitDetailsButton",
    "sectionTeamEditProfileMarkets",
    "teamMarketForm",
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustrySelectInput",
    "marketCompanySizeSelectInput",
    "cardTeamProjects",
    "teamProjectsGroup",
    "primaryRateSelectInput",
    "secondaryRateSelectInput",
    "cardTeamInterests",
    "interest",
    "submitMarketsButton",
    "sectionTeamEditProfileSocial",
    "teamSocialForm",
    "formTeamEditSocial",
    "cardTeamWebsite",
    "websiteTextInput",
    "cardTeamSocial",
    "socialPlatformsSwitchInputs",
    "submitSocialsButton",
    "footerB"
  ],

  navbarInternal: ["navbarInternal"],
  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionTeamEditProfile: [
    "sectionTeamEditProfile",
    "teamProfileForm",
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "teamLogoImageWrapper",
    "teamLogoImage",
    "teamEditlogoGroup",
    "editLogoButton",
    "deleteLogoButton",
    "cardTeamDisplayname",
    "displayNameTextInput",
    "cardTeamUrl",
    "companuUrlTextInput",
    "cardTeamTagline",
    "tagLineTextInput",
    "cardTeamDescription",
    "companyDescriptionITextAreaInput",
    "cardTeamVideoIntroUrl",
    "videoIntroTextInput",
    "saveProfileButton"
  ],

  teamProfileForm: [
    "teamProfileForm",
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "teamLogoImageWrapper",
    "teamLogoImage",
    "teamEditlogoGroup",
    "editLogoButton",
    "deleteLogoButton",
    "cardTeamDisplayname",
    "displayNameTextInput",
    "cardTeamUrl",
    "companuUrlTextInput",
    "cardTeamTagline",
    "tagLineTextInput",
    "cardTeamDescription",
    "companyDescriptionITextAreaInput",
    "cardTeamVideoIntroUrl",
    "videoIntroTextInput",
    "saveProfileButton"
  ],

  formTeamEditProfile: [
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "teamLogoImageWrapper",
    "teamLogoImage",
    "teamEditlogoGroup",
    "editLogoButton",
    "deleteLogoButton",
    "cardTeamDisplayname",
    "displayNameTextInput",
    "cardTeamUrl",
    "companuUrlTextInput",
    "cardTeamTagline",
    "tagLineTextInput",
    "cardTeamDescription",
    "companyDescriptionITextAreaInput",
    "cardTeamVideoIntroUrl",
    "videoIntroTextInput",
    "saveProfileButton"
  ],

  cardTeamLogo: [
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "teamLogoImageWrapper",
    "teamLogoImage",
    "teamEditlogoGroup",
    "editLogoButton",
    "deleteLogoButton"
  ],

  teamUploadLogoButtonGroup: [
    "teamUploadLogoButtonGroup",
    "teamLogoImageWrapper",
    "teamLogoImage",
    "teamEditlogoGroup",
    "editLogoButton",
    "deleteLogoButton"
  ],

  teamLogoImageWrapper: ["teamLogoImageWrapper", "teamLogoImage"],
  teamLogoImage: ["teamLogoImage"],
  teamEditlogoGroup: [
    "teamEditlogoGroup",
    "editLogoButton",
    "deleteLogoButton"
  ],

  editLogoButton: ["editLogoButton"],
  deleteLogoButton: ["deleteLogoButton"],
  cardTeamDisplayname: ["cardTeamDisplayname", "displayNameTextInput"],
  displayNameTextInput: ["displayNameTextInput"],
  cardTeamUrl: ["cardTeamUrl", "companuUrlTextInput"],
  companuUrlTextInput: ["companuUrlTextInput"],
  cardTeamTagline: ["cardTeamTagline", "tagLineTextInput"],
  tagLineTextInput: ["tagLineTextInput"],
  cardTeamDescription: [
    "cardTeamDescription",
    "companyDescriptionITextAreaInput"
  ],

  companyDescriptionITextAreaInput: ["companyDescriptionITextAreaInput"],
  cardTeamVideoIntroUrl: ["cardTeamVideoIntroUrl", "videoIntroTextInput"],
  videoIntroTextInput: ["videoIntroTextInput"],
  saveProfileButton: ["saveProfileButton"],
  sectionTeamEditProfileDetails: [
    "sectionTeamEditProfileDetails",
    "teamDetailsForm",
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "countrySelectInput",
    "citySelectInput",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industrySelectInput",
    "companySizeSelectInput",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput",
    "cardTeamSkills",
    "skill",
    "cardTeamCommunity",
    "community",
    "submitDetailsButton"
  ],

  teamDetailsForm: [
    "teamDetailsForm",
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "countrySelectInput",
    "citySelectInput",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industrySelectInput",
    "companySizeSelectInput",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput",
    "cardTeamSkills",
    "skill",
    "cardTeamCommunity",
    "community",
    "submitDetailsButton"
  ],

  formTeamEditDetails: [
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "countrySelectInput",
    "citySelectInput",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industrySelectInput",
    "companySizeSelectInput",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput",
    "cardTeamSkills",
    "skill",
    "cardTeamCommunity",
    "community",
    "submitDetailsButton"
  ],

  cardTeamLocation: [
    "cardTeamLocation",
    "teamLocationGroup",
    "countrySelectInput",
    "citySelectInput"
  ],

  teamLocationGroup: [
    "teamLocationGroup",
    "countrySelectInput",
    "citySelectInput"
  ],

  countrySelectInput: ["countrySelectInput"],
  citySelectInput: ["citySelectInput"],
  cardTeamIndustry: [
    "cardTeamIndustry",
    "teamIndustryGroup",
    "industrySelectInput",
    "companySizeSelectInput"
  ],

  teamIndustryGroup: [
    "teamIndustryGroup",
    "industrySelectInput",
    "companySizeSelectInput"
  ],

  industrySelectInput: ["industrySelectInput"],
  companySizeSelectInput: ["companySizeSelectInput"],
  cardTeamLanguages: [
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput"
  ],

  inputGroupTeamLanguages: [
    "inputGroupTeamLanguages",
    "primaryLanguageSelectInput",
    "secondaryLanguageSelectInput"
  ],

  primaryLanguageSelectInput: ["primaryLanguageSelectInput"],
  secondaryLanguageSelectInput: ["secondaryLanguageSelectInput"],
  cardTeamSkills: ["cardTeamSkills", "skill"],
  skill: ["skill"],
  cardTeamCommunity: ["cardTeamCommunity", "community"],
  community: ["community"],
  submitDetailsButton: ["submitDetailsButton"],
  sectionTeamEditProfileMarkets: [
    "sectionTeamEditProfileMarkets",
    "teamMarketForm",
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustrySelectInput",
    "marketCompanySizeSelectInput",
    "cardTeamProjects",
    "teamProjectsGroup",
    "primaryRateSelectInput",
    "secondaryRateSelectInput",
    "cardTeamInterests",
    "interest",
    "submitMarketsButton"
  ],

  teamMarketForm: [
    "teamMarketForm",
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustrySelectInput",
    "marketCompanySizeSelectInput",
    "cardTeamProjects",
    "teamProjectsGroup",
    "primaryRateSelectInput",
    "secondaryRateSelectInput",
    "cardTeamInterests",
    "interest",
    "submitMarketsButton"
  ],

  formTeamEditMarkets: [
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustrySelectInput",
    "marketCompanySizeSelectInput",
    "cardTeamProjects",
    "teamProjectsGroup",
    "primaryRateSelectInput",
    "secondaryRateSelectInput",
    "cardTeamInterests",
    "interest",
    "submitMarketsButton"
  ],

  cardTeamMarkets: [
    "cardTeamMarkets",
    "teamMarketsGroup",
    "marketIndustrySelectInput",
    "marketCompanySizeSelectInput"
  ],

  teamMarketsGroup: [
    "teamMarketsGroup",
    "marketIndustrySelectInput",
    "marketCompanySizeSelectInput"
  ],

  marketIndustrySelectInput: ["marketIndustrySelectInput"],
  marketCompanySizeSelectInput: ["marketCompanySizeSelectInput"],
  cardTeamProjects: [
    "cardTeamProjects",
    "teamProjectsGroup",
    "primaryRateSelectInput",
    "secondaryRateSelectInput"
  ],

  teamProjectsGroup: [
    "teamProjectsGroup",
    "primaryRateSelectInput",
    "secondaryRateSelectInput"
  ],

  primaryRateSelectInput: ["primaryRateSelectInput"],
  secondaryRateSelectInput: ["secondaryRateSelectInput"],
  cardTeamInterests: ["cardTeamInterests", "interest"],
  interest: ["interest"],
  submitMarketsButton: ["submitMarketsButton"],
  sectionTeamEditProfileSocial: [
    "sectionTeamEditProfileSocial",
    "teamSocialForm",
    "formTeamEditSocial",
    "cardTeamWebsite",
    "websiteTextInput",
    "cardTeamSocial",
    "socialPlatformsSwitchInputs",
    "submitSocialsButton"
  ],

  teamSocialForm: [
    "teamSocialForm",
    "formTeamEditSocial",
    "cardTeamWebsite",
    "websiteTextInput",
    "cardTeamSocial",
    "socialPlatformsSwitchInputs",
    "submitSocialsButton"
  ],

  formTeamEditSocial: [
    "formTeamEditSocial",
    "cardTeamWebsite",
    "websiteTextInput",
    "cardTeamSocial",
    "socialPlatformsSwitchInputs",
    "submitSocialsButton"
  ],

  cardTeamWebsite: ["cardTeamWebsite", "websiteTextInput"],
  websiteTextInput: ["websiteTextInput"],
  cardTeamSocial: ["cardTeamSocial", "socialPlatformsSwitchInputs"],
  socialPlatformsSwitchInputs: ["socialPlatformsSwitchInputs"],
  submitSocialsButton: ["submitSocialsButton"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditteam__ArgProps,
      internalVariantPropNames: PlasmicEditteam__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicEditteam__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditteam";
  } else {
    func.displayName = `PlasmicEditteam.${nodeName}`;
  }
  return func;
}

export const PlasmicEditteam = Object.assign(
  // Top-level PlasmicEditteam renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionTeamEditProfile: makeNodeComponent("sectionTeamEditProfile"),
    teamProfileForm: makeNodeComponent("teamProfileForm"),
    formTeamEditProfile: makeNodeComponent("formTeamEditProfile"),
    cardTeamLogo: makeNodeComponent("cardTeamLogo"),
    teamUploadLogoButtonGroup: makeNodeComponent("teamUploadLogoButtonGroup"),
    teamLogoImageWrapper: makeNodeComponent("teamLogoImageWrapper"),
    teamLogoImage: makeNodeComponent("teamLogoImage"),
    teamEditlogoGroup: makeNodeComponent("teamEditlogoGroup"),
    editLogoButton: makeNodeComponent("editLogoButton"),
    deleteLogoButton: makeNodeComponent("deleteLogoButton"),
    cardTeamDisplayname: makeNodeComponent("cardTeamDisplayname"),
    displayNameTextInput: makeNodeComponent("displayNameTextInput"),
    cardTeamUrl: makeNodeComponent("cardTeamUrl"),
    companuUrlTextInput: makeNodeComponent("companuUrlTextInput"),
    cardTeamTagline: makeNodeComponent("cardTeamTagline"),
    tagLineTextInput: makeNodeComponent("tagLineTextInput"),
    cardTeamDescription: makeNodeComponent("cardTeamDescription"),
    companyDescriptionITextAreaInput: makeNodeComponent(
      "companyDescriptionITextAreaInput"
    ),

    cardTeamVideoIntroUrl: makeNodeComponent("cardTeamVideoIntroUrl"),
    videoIntroTextInput: makeNodeComponent("videoIntroTextInput"),
    saveProfileButton: makeNodeComponent("saveProfileButton"),
    sectionTeamEditProfileDetails: makeNodeComponent(
      "sectionTeamEditProfileDetails"
    ),

    teamDetailsForm: makeNodeComponent("teamDetailsForm"),
    formTeamEditDetails: makeNodeComponent("formTeamEditDetails"),
    cardTeamLocation: makeNodeComponent("cardTeamLocation"),
    teamLocationGroup: makeNodeComponent("teamLocationGroup"),
    countrySelectInput: makeNodeComponent("countrySelectInput"),
    citySelectInput: makeNodeComponent("citySelectInput"),
    cardTeamIndustry: makeNodeComponent("cardTeamIndustry"),
    teamIndustryGroup: makeNodeComponent("teamIndustryGroup"),
    industrySelectInput: makeNodeComponent("industrySelectInput"),
    companySizeSelectInput: makeNodeComponent("companySizeSelectInput"),
    cardTeamLanguages: makeNodeComponent("cardTeamLanguages"),
    inputGroupTeamLanguages: makeNodeComponent("inputGroupTeamLanguages"),
    primaryLanguageSelectInput: makeNodeComponent("primaryLanguageSelectInput"),
    secondaryLanguageSelectInput: makeNodeComponent(
      "secondaryLanguageSelectInput"
    ),

    cardTeamSkills: makeNodeComponent("cardTeamSkills"),
    skill: makeNodeComponent("skill"),
    cardTeamCommunity: makeNodeComponent("cardTeamCommunity"),
    community: makeNodeComponent("community"),
    submitDetailsButton: makeNodeComponent("submitDetailsButton"),
    sectionTeamEditProfileMarkets: makeNodeComponent(
      "sectionTeamEditProfileMarkets"
    ),

    teamMarketForm: makeNodeComponent("teamMarketForm"),
    formTeamEditMarkets: makeNodeComponent("formTeamEditMarkets"),
    cardTeamMarkets: makeNodeComponent("cardTeamMarkets"),
    teamMarketsGroup: makeNodeComponent("teamMarketsGroup"),
    marketIndustrySelectInput: makeNodeComponent("marketIndustrySelectInput"),
    marketCompanySizeSelectInput: makeNodeComponent(
      "marketCompanySizeSelectInput"
    ),

    cardTeamProjects: makeNodeComponent("cardTeamProjects"),
    teamProjectsGroup: makeNodeComponent("teamProjectsGroup"),
    primaryRateSelectInput: makeNodeComponent("primaryRateSelectInput"),
    secondaryRateSelectInput: makeNodeComponent("secondaryRateSelectInput"),
    cardTeamInterests: makeNodeComponent("cardTeamInterests"),
    interest: makeNodeComponent("interest"),
    submitMarketsButton: makeNodeComponent("submitMarketsButton"),
    sectionTeamEditProfileSocial: makeNodeComponent(
      "sectionTeamEditProfileSocial"
    ),

    teamSocialForm: makeNodeComponent("teamSocialForm"),
    formTeamEditSocial: makeNodeComponent("formTeamEditSocial"),
    cardTeamWebsite: makeNodeComponent("cardTeamWebsite"),
    websiteTextInput: makeNodeComponent("websiteTextInput"),
    cardTeamSocial: makeNodeComponent("cardTeamSocial"),
    socialPlatformsSwitchInputs: makeNodeComponent(
      "socialPlatformsSwitchInputs"
    ),

    submitSocialsButton: makeNodeComponent("submitSocialsButton"),
    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicEditteam
    internalVariantProps: PlasmicEditteam__VariantProps,
    internalArgProps: PlasmicEditteam__ArgProps
  }
);

export default PlasmicEditteam;
/* prettier-ignore-end */
