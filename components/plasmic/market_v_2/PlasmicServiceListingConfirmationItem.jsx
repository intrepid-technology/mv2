// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 1hOjGdOjjY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import ServiceListingArrayFieldConfirmation from "../../ServiceListingArrayFieldConfirmation"; // plasmic-import: 3bem1ROgPy/component
import ServiceListingImagesConfirmation from "../../ServiceListingImagesConfirmation"; // plasmic-import: -iSTU_2K62/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicServiceListingConfirmationItem.module.css"; // plasmic-import: 1hOjGdOjjY/css

export const PlasmicServiceListingConfirmationItem__VariantProps = new Array(
  "hasListContent",
  "hasArrayFieldContent",
  "hasImages"
);

export const PlasmicServiceListingConfirmationItem__ArgProps = new Array(
  "label",
  "textContent",
  "listContent",
  "arrayFieldContent",
  "imageContent"
);

function PlasmicServiceListingConfirmationItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__js6Eq, {
          [sty.freeBoxhasImages__js6Eqc98Jq]: hasVariant(
            variants,
            "hasImages",
            "hasImages"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.label,
          className: classNames(sty.slotTargetLabel)
        })}
      </div>

      <div
        data-plasmic-name={"answerWrapper"}
        data-plasmic-override={overrides.answerWrapper}
        className={classNames(projectcss.all, sty.answerWrapper, {
          [sty.answerWrapperhasImages]: hasVariant(
            variants,
            "hasImages",
            "hasImages"
          )
        })}
      >
        {(
          hasVariant(variants, "hasImages", "hasImages")
            ? true
            : hasVariant(
                variants,
                "hasArrayFieldContent",
                "hasArrayFieldContent"
              )
            ? true
            : hasVariant(variants, "hasListContent", "hasListContent")
            ? true
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__gjKki, {
              [sty.freeBoxhasArrayFieldContent__gjKkiEpHg]: hasVariant(
                variants,
                "hasArrayFieldContent",
                "hasArrayFieldContent"
              ),

              [sty.freeBoxhasImages__gjKkic98Jq]: hasVariant(
                variants,
                "hasImages",
                "hasImages"
              ),

              [sty.freeBoxhasListContent__gjKkir4Ybx]: hasVariant(
                variants,
                "hasListContent",
                "hasListContent"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Enter some textEnter some textEnter some textEnter some textEnter some textEnter some textEnter ",
              value: args.textContent,
              className: classNames(sty.slotTargetTextContent, {
                [sty.slotTargetTextContenthasImages]: hasVariant(
                  variants,
                  "hasImages",
                  "hasImages"
                ),

                [sty.slotTargetTextContenthasListContent]: hasVariant(
                  variants,
                  "hasListContent",
                  "hasListContent"
                )
              })
            })}
          </div>
        ) : null}
        {(
          hasVariant(variants, "hasListContent", "hasListContent") ? true : true
        ) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tKt0A, {
              [sty.freeBoxhasListContent__tKt0Ar4Ybx]: hasVariant(
                variants,
                "hasListContent",
                "hasListContent"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay___3BrlU
                    )}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__k6VH6
                    )}
                  />
                </React.Fragment>
              ),

              value: args.listContent
            })}
          </p.Stack>
        ) : null}
        {(
          hasVariant(variants, "hasArrayFieldContent", "hasArrayFieldContent")
            ? true
            : true
        ) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__eBgpn, {
              [sty.freeBoxhasArrayFieldContent__eBgpnEpHg]: hasVariant(
                variants,
                "hasArrayFieldContent",
                "hasArrayFieldContent"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <ServiceListingArrayFieldConfirmation
                    className={classNames(
                      "__wab_instance",
                      sty.serviceListingArrayFieldConfirmation___7RkKf
                    )}
                  />

                  <ServiceListingArrayFieldConfirmation
                    className={classNames(
                      "__wab_instance",
                      sty.serviceListingArrayFieldConfirmation___2Upr5
                    )}
                  />
                </React.Fragment>
              ),

              value: args.arrayFieldContent
            })}
          </p.Stack>
        ) : null}
        {(hasVariant(variants, "hasImages", "hasImages") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__fClvJ, {
              [sty.freeBoxhasImages__fClvJc98Jq]: hasVariant(
                variants,
                "hasImages",
                "hasImages"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <ServiceListingImagesConfirmation
                  className={classNames(
                    "__wab_instance",
                    sty.serviceListingImagesConfirmation__ypA07
                  )}
                />
              ),

              value: args.imageContent
            })}
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "answerWrapper"],
  answerWrapper: ["answerWrapper"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServiceListingConfirmationItem__ArgProps,
      internalVariantPropNames:
        PlasmicServiceListingConfirmationItem__VariantProps
    });

    return PlasmicServiceListingConfirmationItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServiceListingConfirmationItem";
  } else {
    func.displayName = `PlasmicServiceListingConfirmationItem.${nodeName}`;
  }
  return func;
}

export const PlasmicServiceListingConfirmationItem = Object.assign(
  // Top-level PlasmicServiceListingConfirmationItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    answerWrapper: makeNodeComponent("answerWrapper"),
    // Metadata about props expected for PlasmicServiceListingConfirmationItem
    internalVariantProps: PlasmicServiceListingConfirmationItem__VariantProps,
    internalArgProps: PlasmicServiceListingConfirmationItem__ArgProps
  }
);

export default PlasmicServiceListingConfirmationItem;
/* prettier-ignore-end */
