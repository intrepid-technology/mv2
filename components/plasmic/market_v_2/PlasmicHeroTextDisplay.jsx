// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: UsXSBYzFpE
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicHeroTextDisplay.module.css"; // plasmic-import: UsXSBYzFpE/css

export const PlasmicHeroTextDisplay__VariantProps = new Array("size");

export const PlasmicHeroTextDisplay__ArgProps = new Array();

function PlasmicHeroTextDisplay__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__size__360]: hasVariant(variants, "size", "_360"),
          [sty.root__size__720]: hasVariant(variants, "size", "_720")
        }
      )}
    >
      {(hasVariant(variants, "size", "_720") ? false : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"textBody2"}
          data-plasmic-override={overrides.textBody2}
          hasGap={true}
          className={classNames(defaultcss.all, projectcss.all, sty.textBody2, {
            [sty.textBody2__size__270]: hasVariant(variants, "size", "_270"),
            [sty.textBody2__size__360]: hasVariant(variants, "size", "_360"),
            [sty.textBody2__size__720]: hasVariant(variants, "size", "_720")
          })}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__iy1X,
              {
                [sty.text__size__270__iy1XFtcWe]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),

                [sty.text__size__360__iy1XqvLrI]: hasVariant(
                  variants,
                  "size",
                  "_360"
                ),

                [sty.text__size__720__iy1XtUtJd]: hasVariant(
                  variants,
                  "size",
                  "_720"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{"Our "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"future"}
              </span>
              <React.Fragment> </React.Fragment>
            </React.Fragment>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__khuIq,
              {
                [sty.text__size__270__khuIqFtcWe]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),

                [sty.text__size__360__khuIqqvLrI]: hasVariant(
                  variants,
                  "size",
                  "_360"
                )
              }
            )}
          >
            {"prosperity"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__tSMpz,
              {
                [sty.text__size__270__tSMpzFtcWe]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),

                [sty.text__size__360__tSMpzqvLrI]: hasVariant(
                  variants,
                  "size",
                  "_360"
                )
              }
            )}
          >
            {"depends on the"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__lEl62,
              {
                [sty.text__size__270__lEl62FtcWe]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),

                [sty.text__size__360__lEl62QvLrI]: hasVariant(
                  variants,
                  "size",
                  "_360"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"quality"}
              </span>
              <React.Fragment>{" of our"}</React.Fragment>
            </React.Fragment>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__ftHuv,
              {
                [sty.text__size__270__ftHuvFtcWe]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),

                [sty.text__size__360__ftHuvqvLrI]: hasVariant(
                  variants,
                  "size",
                  "_360"
                )
              }
            )}
          >
            {"collective "}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__y4WL,
              {
                [sty.text__size__270__y4WLFtcWe]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),

                [sty.text__size__360__y4WLQvLrI]: hasVariant(
                  variants,
                  "size",
                  "_360"
                )
              }
            )}
          >
            {"imagination"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__a1ViY,
              {
                [sty.freeBox__size__360__a1ViYqvLrI]: hasVariant(
                  variants,
                  "size",
                  "_360"
                )
              }
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__rshCx,
                {
                  [sty.text__size__360__rshCxqvLrI]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  )
                }
              )}
            >
              {"- Eric Reis, The Lean Startup"}
            </div>
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "size", "_720") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"textBody720"}
          data-plasmic-override={overrides.textBody720}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.textBody720,
            {
              [sty.textBody720__size__360]: hasVariant(
                variants,
                "size",
                "_360"
              ),

              [sty.textBody720__size__720]: hasVariant(variants, "size", "_720")
            }
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__g3X6M,
              {
                [sty.text__size__720__g3X6MtUtJd]: hasVariant(
                  variants,
                  "size",
                  "_720"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{"Our "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"future"}
              </span>
              <React.Fragment> </React.Fragment>
            </React.Fragment>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__lE5IM
            )}
          >
            {"prosperity"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__svY
            )}
          >
            {"depends on the"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text___6YcQd
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"quality"}
              </span>
              <React.Fragment>{" of our"}</React.Fragment>
            </React.Fragment>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text___1IZ8J
            )}
          >
            {"collective "}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__luQgD,
              {
                [sty.text__size__720__luQgDtUtJd]: hasVariant(
                  variants,
                  "size",
                  "_720"
                )
              }
            )}
          >
            {hasVariant(variants, "size", "_720")
              ? "imagination"
              : "imagination."}
          </div>

          {(hasVariant(variants, "size", "_720") ? true : false) ? (
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__v3AWd,
                {
                  [sty.freeBox__size__720__v3AWDtUtJd]: hasVariant(
                    variants,
                    "size",
                    "_720"
                  )
                }
              )}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__fbeOl
                )}
              >
                {"- Eric Reis, The Lean Startup"}
              </div>
            </div>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "textBody2", "textBody720"],
  textBody2: ["textBody2"],
  textBody720: ["textBody720"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroTextDisplay__ArgProps,
      internalVariantPropNames: PlasmicHeroTextDisplay__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHeroTextDisplay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroTextDisplay";
  } else {
    func.displayName = `PlasmicHeroTextDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroTextDisplay = Object.assign(
  // Top-level PlasmicHeroTextDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textBody2: makeNodeComponent("textBody2"),
    textBody720: makeNodeComponent("textBody720"),
    // Metadata about props expected for PlasmicHeroTextDisplay
    internalVariantProps: PlasmicHeroTextDisplay__VariantProps,
    internalArgProps: PlasmicHeroTextDisplay__ArgProps
  }
);

export default PlasmicHeroTextDisplay;
/* prettier-ignore-end */
