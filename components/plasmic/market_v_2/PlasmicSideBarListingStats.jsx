// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: mNo76Uc_Jdn
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSideBarListingStats.module.css"; // plasmic-import: mNo76Uc_Jdn/css

export const PlasmicSideBarListingStats__VariantProps = new Array();

export const PlasmicSideBarListingStats__ArgProps = new Array();

function PlasmicSideBarListingStats__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__aRa9C)}
      >
        <div
          data-plasmic-name={"headline"}
          data-plasmic-override={overrides.headline}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.headline
          )}
        >
          {"Stats"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__kKsB)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementProductListingCount"}
          data-plasmic-override={overrides.elementProductListingCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementProductListingCount)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__iCiP
            )}
          >
            {"-"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__saOm
            )}
          >
            {"Listings"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementServicesListingCount"}
          data-plasmic-override={overrides.elementServicesListingCount}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementServicesListingCount
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__ocmNw
            )}
          >
            {"-"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__aNxVb
            )}
          >
            {"Views"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementEventListingCount"}
          data-plasmic-override={overrides.elementEventListingCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementEventListingCount)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__agzVt
            )}
          >
            {"-"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__ud4Ep
            )}
          >
            {"Reacts"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementCoursesListingCount"}
          data-plasmic-override={overrides.elementCoursesListingCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementCoursesListingCount)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__vsewK
            )}
          >
            {"-"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__gkZEo
            )}
          >
            {"Saves"}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "headline",
    "elementProductListingCount",
    "elementServicesListingCount",
    "elementEventListingCount",
    "elementCoursesListingCount"
  ],

  headline: ["headline"],
  elementProductListingCount: ["elementProductListingCount"],
  elementServicesListingCount: ["elementServicesListingCount"],
  elementEventListingCount: ["elementEventListingCount"],
  elementCoursesListingCount: ["elementCoursesListingCount"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideBarListingStats__ArgProps,
      internalVariantPropNames: PlasmicSideBarListingStats__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSideBarListingStats__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBarListingStats";
  } else {
    func.displayName = `PlasmicSideBarListingStats.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBarListingStats = Object.assign(
  // Top-level PlasmicSideBarListingStats renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headline: makeNodeComponent("headline"),
    elementProductListingCount: makeNodeComponent("elementProductListingCount"),
    elementServicesListingCount: makeNodeComponent(
      "elementServicesListingCount"
    ),

    elementEventListingCount: makeNodeComponent("elementEventListingCount"),
    elementCoursesListingCount: makeNodeComponent("elementCoursesListingCount"),
    // Metadata about props expected for PlasmicSideBarListingStats
    internalVariantProps: PlasmicSideBarListingStats__VariantProps,
    internalArgProps: PlasmicSideBarListingStats__ArgProps
  }
);

export default PlasmicSideBarListingStats;
/* prettier-ignore-end */
