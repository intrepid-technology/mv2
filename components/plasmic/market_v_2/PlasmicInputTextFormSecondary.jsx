// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: oScI7WCn2r
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputTextPrimary from "../../InputTextPrimary"; // plasmic-import: a2XXnCI4Ss/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicInputTextFormSecondary.module.css"; // plasmic-import: oScI7WCn2r/css

export const PlasmicInputTextFormSecondary__VariantProps = new Array(
  "size",
  "color",
  "subhead"
);

export const PlasmicInputTextFormSecondary__ArgProps = new Array(
  "label",
  "description"
);

function PlasmicInputTextFormSecondary__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootsize__270]: hasVariant(variants, "size", "_270"),
          [sty.rootsize__360]: hasVariant(variants, "size", "_360"),
          [sty.rootsize_stretch]: hasVariant(variants, "size", "stretch")
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(projectcss.all, sty.parent, {
          [sty.parentsize__270]: hasVariant(variants, "size", "_270"),
          [sty.parentsize__360]: hasVariant(variants, "size", "_360"),
          [sty.parentsize__540]: hasVariant(variants, "size", "_540"),
          [sty.parentsize__720]: hasVariant(variants, "size", "_720"),
          [sty.parentsize_stretch]: hasVariant(variants, "size", "stretch")
        })}
      >
        <label
          data-plasmic-name={"headlineLabelParent"}
          data-plasmic-override={overrides.headlineLabelParent}
          className={classNames(projectcss.all, sty.headlineLabelParent, {
            [sty.headlineLabelParentsize__270]: hasVariant(
              variants,
              "size",
              "_270"
            ),

            [sty.headlineLabelParentsize_stretch]: hasVariant(
              variants,
              "size",
              "stretch"
            )
          })}
        >
          <div
            data-plasmic-name={"headlineLabel"}
            data-plasmic-override={overrides.headlineLabel}
            className={classNames(projectcss.all, sty.headlineLabel, {
              [sty.headlineLabelsize__270]: hasVariant(
                variants,
                "size",
                "_270"
              ),

              [sty.headlineLabelsize_stretch]: hasVariant(
                variants,
                "size",
                "stretch"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Label",
              value: args.label,
              className: classNames(sty.slotTargetLabel, {
                [sty.slotTargetLabelcolor_primary]: hasVariant(
                  variants,
                  "color",
                  "primary"
                ),

                [sty.slotTargetLabelsize_stretch]: hasVariant(
                  variants,
                  "size",
                  "stretch"
                )
              })
            })}
          </div>
        </label>

        <InputTextPrimary
          data-plasmic-name={"inputTextPrimary"}
          data-plasmic-override={overrides.inputTextPrimary}
          className={classNames("__wab_instance", sty.inputTextPrimary, {
            [sty.inputTextPrimarycolor_primary]: hasVariant(
              variants,
              "color",
              "primary"
            ),

            [sty.inputTextPrimarycolor_secondary]: hasVariant(
              variants,
              "color",
              "secondary"
            ),

            [sty.inputTextPrimarycolor_underline]: hasVariant(
              variants,
              "color",
              "underline"
            ),

            [sty.inputTextPrimarysize__160]: hasVariant(
              variants,
              "size",
              "_160"
            ),

            [sty.inputTextPrimarysize__180]: hasVariant(
              variants,
              "size",
              "_180"
            ),

            [sty.inputTextPrimarysize__270]: hasVariant(
              variants,
              "size",
              "_270"
            ),

            [sty.inputTextPrimarysize__360]: hasVariant(
              variants,
              "size",
              "_360"
            ),

            [sty.inputTextPrimarysize__540]: hasVariant(
              variants,
              "size",
              "_540"
            ),

            [sty.inputTextPrimarysize__720]: hasVariant(
              variants,
              "size",
              "_720"
            ),

            [sty.inputTextPrimarysize_stretch]: hasVariant(
              variants,
              "size",
              "stretch"
            )
          })}
          type={
            hasVariant(variants, "color", "secondary")
              ? "secondary"
              : hasVariant(variants, "color", "primary")
              ? "primary"
              : hasVariant(variants, "color", "underline")
              ? "underline"
              : undefined
          }
          width={
            hasVariant(variants, "size", "stretch")
              ? "stretch"
              : hasVariant(variants, "size", "_720")
              ? "_720"
              : hasVariant(variants, "size", "_540")
              ? "_540"
              : hasVariant(variants, "size", "_360")
              ? "_360"
              : hasVariant(variants, "size", "_180")
              ? "_180"
              : hasVariant(variants, "size", "_160")
              ? "_160"
              : "_270"
          }
        />

        {(hasVariant(variants, "subhead", "subhead") ? true : true) ? (
          <div
            data-plasmic-name={"descriptionParent"}
            data-plasmic-override={overrides.descriptionParent}
            className={classNames(projectcss.all, sty.descriptionParent, {
              [sty.descriptionParentsubhead]: hasVariant(
                variants,
                "subhead",
                "subhead"
              )
            })}
          >
            <div
              data-plasmic-name={"descriptionTextParent"}
              data-plasmic-override={overrides.descriptionTextParent}
              className={classNames(projectcss.all, sty.descriptionTextParent, {
                [sty.descriptionTextParentcolor_secondary]: hasVariant(
                  variants,
                  "color",
                  "secondary"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Description",
                value: args.description,
                className: classNames(sty.slotTargetDescription, {
                  [sty.slotTargetDescriptioncolor_primary]: hasVariant(
                    variants,
                    "color",
                    "primary"
                  ),

                  [sty.slotTargetDescriptioncolor_underline]: hasVariant(
                    variants,
                    "color",
                    "underline"
                  ),

                  [sty.slotTargetDescriptionsubhead]: hasVariant(
                    variants,
                    "subhead",
                    "subhead"
                  )
                })
              })}
            </div>
          </div>
        ) : null}
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "headlineLabelParent",
    "headlineLabel",
    "inputTextPrimary",
    "descriptionParent",
    "descriptionTextParent"
  ],

  parent: [
    "parent",
    "headlineLabelParent",
    "headlineLabel",
    "inputTextPrimary",
    "descriptionParent",
    "descriptionTextParent"
  ],

  headlineLabelParent: ["headlineLabelParent", "headlineLabel"],
  headlineLabel: ["headlineLabel"],
  inputTextPrimary: ["inputTextPrimary"],
  descriptionParent: ["descriptionParent", "descriptionTextParent"],
  descriptionTextParent: ["descriptionTextParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputTextFormSecondary__ArgProps,
      internalVariantPropNames: PlasmicInputTextFormSecondary__VariantProps
    });

    return PlasmicInputTextFormSecondary__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputTextFormSecondary";
  } else {
    func.displayName = `PlasmicInputTextFormSecondary.${nodeName}`;
  }
  return func;
}

export const PlasmicInputTextFormSecondary = Object.assign(
  // Top-level PlasmicInputTextFormSecondary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    headlineLabelParent: makeNodeComponent("headlineLabelParent"),
    headlineLabel: makeNodeComponent("headlineLabel"),
    inputTextPrimary: makeNodeComponent("inputTextPrimary"),
    descriptionParent: makeNodeComponent("descriptionParent"),
    descriptionTextParent: makeNodeComponent("descriptionTextParent"),
    // Metadata about props expected for PlasmicInputTextFormSecondary
    internalVariantProps: PlasmicInputTextFormSecondary__VariantProps,
    internalArgProps: PlasmicInputTextFormSecondary__ArgProps
  }
);

export default PlasmicInputTextFormSecondary;
/* prettier-ignore-end */
