// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: GEqD9diS3J
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicButtonStripeVerification.module.css"; // plasmic-import: GEqD9diS3J/css
import IdVerificationIcon from "./icons/PlasmicIcon__IdVerification"; // plasmic-import: b3T1tA8bk/icon

export const PlasmicButtonStripeVerification__VariantProps = new Array();

export const PlasmicButtonStripeVerification__ArgProps = new Array();

function PlasmicButtonStripeVerification__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        "VerifyButton"
      )}
    >
      <div className={classNames(defaultcss.all, sty.box__vpCDx)}>
        <IdVerificationIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />
      </div>

      <div className={classNames(defaultcss.all, sty.box__hRneO)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__nXh3A
          )}
        >
          {"Get verified"}
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonStripeVerification__ArgProps,
      internalVariantPropNames: PlasmicButtonStripeVerification__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicButtonStripeVerification__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonStripeVerification";
  } else {
    func.displayName = `PlasmicButtonStripeVerification.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonStripeVerification = Object.assign(
  // Top-level PlasmicButtonStripeVerification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicButtonStripeVerification
    internalVariantProps: PlasmicButtonStripeVerification__VariantProps,
    internalArgProps: PlasmicButtonStripeVerification__ArgProps
  }
);

export default PlasmicButtonStripeVerification;
/* prettier-ignore-end */
