// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: GEqD9diS3J
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import IconStripeLogo from "../../IconStripeLogo"; // plasmic-import: tq01IF7a70/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicButtonStripeVerification.module.css"; // plasmic-import: GEqD9diS3J/css
import IdVerificationIcon from "./icons/PlasmicIcon__IdVerification"; // plasmic-import: b3T1tA8bk/icon

export const PlasmicButtonStripeVerification__VariantProps = new Array(
  "icon",
  "logo",
  "size"
);

export const PlasmicButtonStripeVerification__ArgProps = new Array(
  "text",
  "id"
);

function PlasmicButtonStripeVerification__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        sty.root,
        "VerifyButton",
        {
          [sty.rootsize__180]: hasVariant(variants, "size", "_180"),
          [sty.rootsize__270]: hasVariant(variants, "size", "_270"),
          [sty.rootsize__360]: hasVariant(variants, "size", "_360")
        }
      )}
      id={args.id}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(hasVariant(variants, "icon", "icon") ? false : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxicon]: hasVariant(variants, "icon", "icon"),
            [sty.freeBoxsize__180]: hasVariant(variants, "size", "_180")
          })}
        >
          <IdVerificationIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgicon]: hasVariant(variants, "icon", "icon"),
              [sty.svgsize__180]: hasVariant(variants, "size", "_180")
            })}
            role={"img"}
          />
        </div>
      ) : null}

      <div
        data-plasmic-name={"textParent"}
        data-plasmic-override={overrides.textParent}
        className={classNames(projectcss.all, sty.textParent, {
          [sty.textParentlogo]: hasVariant(variants, "logo", "logo"),
          [sty.textParentsize__180]: hasVariant(variants, "size", "_180")
        })}
      >
        <div
          data-plasmic-name={"textBg"}
          data-plasmic-override={overrides.textBg}
          className={classNames(projectcss.all, sty.textBg)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Get verified with",
            value: args.text,
            className: classNames(sty.slotTargetText, {
              [sty.slotTargetTextlogo]: hasVariant(variants, "logo", "logo"),
              [sty.slotTargetTextsize__180]: hasVariant(
                variants,
                "size",
                "_180"
              )
            })
          })}
        </div>
      </div>

      {(hasVariant(variants, "logo", "logo") ? false : true) ? (
        <IconStripeLogo
          data-plasmic-name={"iconStripeLogo"}
          data-plasmic-override={overrides.iconStripeLogo}
          className={classNames("__wab_instance", sty.iconStripeLogo, {
            [sty.iconStripeLogologo]: hasVariant(variants, "logo", "logo"),
            [sty.iconStripeLogosize__180]: hasVariant(variants, "size", "_180")
          })}
          color={triggers.hover_root ? "white" : "burple"}
          size={hasVariant(variants, "size", "_180") ? "_18" : "_48"}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "svg", "textParent", "textBg", "iconStripeLogo"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  textParent: ["textParent", "textBg"],
  textBg: ["textBg"],
  iconStripeLogo: ["iconStripeLogo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonStripeVerification__ArgProps,
      internalVariantPropNames: PlasmicButtonStripeVerification__VariantProps
    });

    return PlasmicButtonStripeVerification__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonStripeVerification";
  } else {
    func.displayName = `PlasmicButtonStripeVerification.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonStripeVerification = Object.assign(
  // Top-level PlasmicButtonStripeVerification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    textParent: makeNodeComponent("textParent"),
    textBg: makeNodeComponent("textBg"),
    iconStripeLogo: makeNodeComponent("iconStripeLogo"),
    // Metadata about props expected for PlasmicButtonStripeVerification
    internalVariantProps: PlasmicButtonStripeVerification__VariantProps,
    internalArgProps: PlasmicButtonStripeVerification__ArgProps
  }
);

export default PlasmicButtonStripeVerification;
/* prettier-ignore-end */
