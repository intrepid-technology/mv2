// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 8Sse2xZ7od
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicInputTextPrefixSuffix.module.css"; // plasmic-import: 8Sse2xZ7od/css

export const PlasmicInputTextPrefixSuffix__VariantProps = new Array(
  "type",
  "height",
  "width",
  "prefix",
  "suffix"
);

export const PlasmicInputTextPrefixSuffix__ArgProps = new Array(
  "prefixLabelHeadline",
  "suffixLabelHeadline"
);

function PlasmicInputTextPrefixSuffix__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__height__120]: hasVariant(variants, "height", "_120"),
          [sty.parent__height__160]: hasVariant(variants, "height", "_160"),
          [sty.parent__height__180]: hasVariant(variants, "height", "_180"),
          [sty.parent__height__270]: hasVariant(variants, "height", "_270"),
          [sty.parent__height__360]: hasVariant(variants, "height", "_360"),
          [sty.parent__type_secondary]: hasVariant(
            variants,
            "type",
            "secondary"
          ),

          [sty.parent__width__32]: hasVariant(variants, "width", "_32"),
          [sty.parent__width__36]: hasVariant(variants, "width", "_36"),
          [sty.parent__width__40]: hasVariant(variants, "width", "_40"),
          [sty.parent__width__48]: hasVariant(variants, "width", "_48")
        })}
      >
        <div
          data-plasmic-name={"prefixparent"}
          data-plasmic-override={overrides.prefixparent}
          className={classNames(defaultcss.all, sty.prefixparent, {
            [sty.prefixparent__prefix]: hasVariant(
              variants,
              "prefix",
              "prefix"
            ),

            [sty.prefixparent__suffix]: hasVariant(
              variants,
              "suffix",
              "suffix"
            ),

            [sty.prefixparent__suffix_prefix]:
              hasVariant(variants, "suffix", "suffix") &&
              hasVariant(variants, "prefix", "prefix"),
            [sty.prefixparent__type_secondary]: hasVariant(
              variants,
              "type",
              "secondary"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Text",
            value: args.prefixLabelHeadline,
            className: classNames(sty.slotPrefixLabelHeadline, {
              [sty.slotPrefixLabelHeadline__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })
          })}
        </div>

        <input
          data-plasmic-name={"value"}
          data-plasmic-override={overrides.value}
          className={classNames(defaultcss.input, sty.value)}
          placeholder={""}
          size={1}
          type={"text"}
          value={""}
        />

        <div
          data-plasmic-name={"suffixParent"}
          data-plasmic-override={overrides.suffixParent}
          className={classNames(defaultcss.all, sty.suffixParent, {
            [sty.suffixParent__suffix]: hasVariant(
              variants,
              "suffix",
              "suffix"
            ),

            [sty.suffixParent__type_secondary]: hasVariant(
              variants,
              "type",
              "secondary"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Text",
            value: args.suffixLabelHeadline,
            className: classNames(sty.slotSuffixLabelHeadline, {
              [sty.slotSuffixLabelHeadline__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "parent", "prefixparent", "value", "suffixParent"],
  parent: ["parent", "prefixparent", "value", "suffixParent"],
  prefixparent: ["prefixparent"],
  value: ["value"],
  suffixParent: ["suffixParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputTextPrefixSuffix__ArgProps,
      internalVariantPropNames: PlasmicInputTextPrefixSuffix__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicInputTextPrefixSuffix__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputTextPrefixSuffix";
  } else {
    func.displayName = `PlasmicInputTextPrefixSuffix.${nodeName}`;
  }
  return func;
}

export const PlasmicInputTextPrefixSuffix = Object.assign(
  // Top-level PlasmicInputTextPrefixSuffix renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    prefixparent: makeNodeComponent("prefixparent"),
    value: makeNodeComponent("value"),
    suffixParent: makeNodeComponent("suffixParent"),
    // Metadata about props expected for PlasmicInputTextPrefixSuffix
    internalVariantProps: PlasmicInputTextPrefixSuffix__VariantProps,
    internalArgProps: PlasmicInputTextPrefixSuffix__ArgProps
  }
);

export default PlasmicInputTextPrefixSuffix;
/* prettier-ignore-end */
