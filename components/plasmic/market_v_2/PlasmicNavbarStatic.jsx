// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: rvDpPOFOSj
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LogoHeader from "../../LogoHeader"; // plasmic-import: 9wNFT5FYWe/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicNavbarStatic.module.css"; // plasmic-import: rvDpPOFOSj/css
import SectionDividerIcon from "./icons/PlasmicIcon__SectionDivider"; // plasmic-import: UzRMlTHWYLl/icon

export const PlasmicNavbarStatic__VariantProps = new Array();

export const PlasmicNavbarStatic__ArgProps = new Array();

function PlasmicNavbarStatic__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    hasVariant(globalVariants, "screen", "iphone12ProMax")
      ? true
      : hasVariant(globalVariants, "screen", "desktop")
      ? true
      : true
  ) ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      {(
        hasVariant(globalVariants, "screen", "iphone678")
          ? true
          : hasVariant(globalVariants, "screen", "iphone12ProMax")
          ? true
          : hasVariant(globalVariants, "screen", "desktop")
          ? true
          : true
      ) ? (
        <div className={classNames(projectcss.all, sty.freeBox__gq5Ri)}>
          {(
            hasVariant(globalVariants, "screen", "iphone678")
              ? true
              : hasVariant(globalVariants, "screen", "iphone12ProMax")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__mn6Cy)}>
              <LogoHeader
                data-plasmic-name={"logoHeader"}
                data-plasmic-override={overrides.logoHeader}
              />
            </div>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(globalVariants, "screen", "iphone678")
          ? true
          : hasVariant(globalVariants, "screen", "iphone12ProMax")
          ? true
          : hasVariant(globalVariants, "screen", "desktop")
          ? true
          : true
      ) ? (
        <div className={classNames(projectcss.all, sty.freeBox__ejVzw)}>
          {true ? (
            <SectionDividerIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "logoHeader", "svg"],
  logoHeader: ["logoHeader"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarStatic__ArgProps,
      internalVariantPropNames: PlasmicNavbarStatic__VariantProps
    });

    return PlasmicNavbarStatic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarStatic";
  } else {
    func.displayName = `PlasmicNavbarStatic.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarStatic = Object.assign(
  // Top-level PlasmicNavbarStatic renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoHeader: makeNodeComponent("logoHeader"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicNavbarStatic
    internalVariantProps: PlasmicNavbarStatic__VariantProps,
    internalArgProps: PlasmicNavbarStatic__ArgProps
  }
);

export default PlasmicNavbarStatic;
/* prettier-ignore-end */
