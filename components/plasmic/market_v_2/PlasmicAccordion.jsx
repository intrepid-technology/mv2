// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: azR0jnXzDL
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicAccordion.module.css"; // plasmic-import: azR0jnXzDL/css
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: yu83kfpl6j/icon

export const PlasmicAccordion__VariantProps = new Array("size", "isOpen");

export const PlasmicAccordion__ArgProps = new Array("children", "content");

function PlasmicAccordion__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__size_small]: hasVariant(variants, "size", "small"),
          [sty.root__size_small_isOpen]:
            hasVariant(variants, "size", "small") &&
            hasVariant(variants, "isOpen", "isOpen")
        }
      )}
    >
      <div
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames(defaultcss.all, projectcss.all, sty.header, {
          [sty.header__size_small]: hasVariant(variants, "size", "small")
        })}
      >
        <div
          data-plasmic-name={"headerContentWrapper"}
          data-plasmic-override={overrides.headerContentWrapper}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.headerContentWrapper
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Accordion",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildren__size_small]: hasVariant(
                variants,
                "size",
                "small"
              )
            })
          })}
        </div>

        <div
          data-plasmic-name={"collapseIconWrapper"}
          data-plasmic-override={overrides.collapseIconWrapper}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.collapseIconWrapper
          )}
        >
          <PlusBoldIcon
            data-plasmic-name={"collapseIcon"}
            data-plasmic-override={overrides.collapseIcon}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.collapseIcon,
              {
                [sty.collapseIcon__size_small]: hasVariant(
                  variants,
                  "size",
                  "small"
                )
              }
            )}
            role={"img"}
          />
        </div>
      </div>

      {(hasVariant(variants, "isOpen", "isOpen") ? true : false) ? (
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          className={classNames(defaultcss.all, projectcss.all, sty.body, {
            [sty.body__isOpen]: hasVariant(variants, "isOpen", "isOpen"),
            [sty.body__size_small_isOpen]:
              hasVariant(variants, "size", "small") &&
              hasVariant(variants, "isOpen", "isOpen")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.content
          })}
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "headerContentWrapper",
    "collapseIconWrapper",
    "collapseIcon",
    "body"
  ],

  header: [
    "header",
    "headerContentWrapper",
    "collapseIconWrapper",
    "collapseIcon"
  ],

  headerContentWrapper: ["headerContentWrapper"],
  collapseIconWrapper: ["collapseIconWrapper", "collapseIcon"],
  collapseIcon: ["collapseIcon"],
  body: ["body"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccordion__ArgProps,
      internalVariantPropNames: PlasmicAccordion__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicAccordion__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordion";
  } else {
    func.displayName = `PlasmicAccordion.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordion = Object.assign(
  // Top-level PlasmicAccordion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    headerContentWrapper: makeNodeComponent("headerContentWrapper"),
    collapseIconWrapper: makeNodeComponent("collapseIconWrapper"),
    collapseIcon: makeNodeComponent("collapseIcon"),
    body: makeNodeComponent("body"),
    // Metadata about props expected for PlasmicAccordion
    internalVariantProps: PlasmicAccordion__VariantProps,
    internalArgProps: PlasmicAccordion__ArgProps
  }
);

export default PlasmicAccordion;
/* prettier-ignore-end */
