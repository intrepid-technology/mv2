// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: W1y9EWGWrY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardHeroCta.module.css"; // plasmic-import: W1y9EWGWrY/css

export const PlasmicCardHeroCta__VariantProps = new Array();

export const PlasmicCardHeroCta__ArgProps = new Array("slot2", "children");

function PlasmicCardHeroCta__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__rz5EK
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__nxz1A
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__xd1H6
            )}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Everything an entrepreneur needs to start and grow a global business.",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
          </div>
        </div>

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text
          )}
        >
          {"Creative technology services to do business beyond borders"}
        </div>

        <ButtonPrimary
          data-plasmic-name={"buttonPrimary"}
          data-plasmic-override={overrides.buttonPrimary}
          className={classNames("__wab_instance", sty.buttonPrimary)}
          color={"brand"}
          size={"_140"}
        >
          {"Start free trial"}
        </ButtonPrimary>
      </div>

      {p.renderPlasmicSlot({
        defaultContents: (
          <img
            alt={""}
            className={classNames(
              defaultcss.img,
              projectcss.img,
              sty.img__m8Tz3
            )}
          />
        ),

        value: args.children
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "buttonPrimary"],
  text: ["text"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardHeroCta__ArgProps,
      internalVariantPropNames: PlasmicCardHeroCta__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCardHeroCta__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardHeroCta";
  } else {
    func.displayName = `PlasmicCardHeroCta.${nodeName}`;
  }
  return func;
}

export const PlasmicCardHeroCta = Object.assign(
  // Top-level PlasmicCardHeroCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicCardHeroCta
    internalVariantProps: PlasmicCardHeroCta__VariantProps,
    internalArgProps: PlasmicCardHeroCta__ArgProps
  }
);

export default PlasmicCardHeroCta;
/* prettier-ignore-end */
