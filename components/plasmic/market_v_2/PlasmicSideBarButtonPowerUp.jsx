// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: cwyuvAY7ua
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSideBarButtonPowerUp.module.css"; // plasmic-import: cwyuvAY7ua/css
import Icon138Icon from "./icons/PlasmicIcon__Icon138"; // plasmic-import: X0sjJkcBKE/icon

export const PlasmicSideBarButtonPowerUp__VariantProps = new Array();

export const PlasmicSideBarButtonPowerUp__ArgProps = new Array();

function PlasmicSideBarButtonPowerUp__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.button, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"sideBarCardLink"}
        data-plasmic-override={overrides.sideBarCardLink}
        hasGap={true}
        className={classNames(defaultcss.all, sty.sideBarCardLink)}
      >
        <Icon138Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />

        <div
          data-plasmic-name={"box"}
          data-plasmic-override={overrides.box}
          className={classNames(defaultcss.all, defaultcss.__wab_text, sty.box)}
        >
          {"Power up"}
        </div>
      </p.Stack>
    </button>
  );
}

const PlasmicDescendants = {
  root: ["root", "sideBarCardLink", "svg", "box"],
  sideBarCardLink: ["sideBarCardLink", "svg", "box"],
  svg: ["svg"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideBarButtonPowerUp__ArgProps,
      internalVariantPropNames: PlasmicSideBarButtonPowerUp__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSideBarButtonPowerUp__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBarButtonPowerUp";
  } else {
    func.displayName = `PlasmicSideBarButtonPowerUp.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBarButtonPowerUp = Object.assign(
  // Top-level PlasmicSideBarButtonPowerUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideBarCardLink: makeNodeComponent("sideBarCardLink"),
    svg: makeNodeComponent("svg"),
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicSideBarButtonPowerUp
    internalVariantProps: PlasmicSideBarButtonPowerUp__VariantProps,
    internalArgProps: PlasmicSideBarButtonPowerUp__ArgProps
  }
);

export default PlasmicSideBarButtonPowerUp;
/* prettier-ignore-end */
