// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: egzqjpKDP_e
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: Ss3X7VAgr4Y/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicFormTextInput.module.css"; // plasmic-import: egzqjpKDP_e/css

export const PlasmicFormTextInput__VariantProps = new Array(
  "type",
  "labels",
  "headline",
  "width"
);

export const PlasmicFormTextInput__ArgProps = new Array(
  "name",
  "placeholder",
  "startAdornment",
  "endAdornment",
  "label"
);

function PlasmicFormTextInput__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__headline]: hasVariant(variants, "headline", "headline"),
        [sty.root__labels_prefix]: hasVariant(variants, "labels", "prefix"),
        [sty.root__labels_suffix]: hasVariant(variants, "labels", "suffix"),
        [sty.root__type_primary]: hasVariant(variants, "type", "primary"),
        [sty.root__width__180]: hasVariant(variants, "width", "_180"),
        [sty.root__width__270]: hasVariant(variants, "width", "_270"),
        [sty.root__width__360]: hasVariant(variants, "width", "_360"),
        [sty.root__width_stretch]: hasVariant(variants, "width", "stretch")
      })}
    >
      <TextInput
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput}
        adornment={
          hasVariant(variants, "labels", "prefix") &&
          hasVariant(variants, "labels", "suffix")
            ? ["end", "start"]
            : hasVariant(variants, "labels", "suffix")
            ? ["end"]
            : hasVariant(variants, "labels", "prefix")
            ? ["start"]
            : undefined
        }
        className={classNames("__wab_instance", sty.textInput, {
          [sty.textInput__headline]: hasVariant(
            variants,
            "headline",
            "headline"
          ),

          [sty.textInput__labels_prefix]: hasVariant(
            variants,
            "labels",
            "prefix"
          ),

          [sty.textInput__labels_prefix_labels_suffix]:
            hasVariant(variants, "labels", "prefix") &&
            hasVariant(variants, "labels", "suffix"),
          [sty.textInput__labels_suffix]: hasVariant(
            variants,
            "labels",
            "suffix"
          ),

          [sty.textInput__type_primary]: hasVariant(
            variants,
            "type",
            "primary"
          ),

          [sty.textInput__type_secondary]: hasVariant(
            variants,
            "type",
            "secondary"
          ),

          [sty.textInput__type_secondary_labels_prefix]:
            hasVariant(variants, "type", "secondary") &&
            hasVariant(variants, "labels", "prefix"),
          [sty.textInput__width_stretch]: hasVariant(
            variants,
            "width",
            "stretch"
          )
        })}
        endAdornment={p.renderPlasmicSlot({
          defaultContents: "Text",
          value: args.endAdornment
        })}
        label={p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.label
        })}
        name={args.name}
        placeholder={args.placeholder}
        showLabel={
          hasVariant(variants, "headline", "headline") ? true : undefined
        }
        startAdornment={p.renderPlasmicSlot({
          defaultContents: "Text",
          value: args.startAdornment
        })}
        type={
          hasVariant(variants, "type", "secondary")
            ? "secondary"
            : hasVariant(variants, "type", "primary")
            ? "primary"
            : undefined
        }
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox"],
  textInput: ["textInput", "textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFormTextInput__ArgProps,
      internalVariantPropNames: PlasmicFormTextInput__VariantProps
    });

    return PlasmicFormTextInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormTextInput";
  } else {
    func.displayName = `PlasmicFormTextInput.${nodeName}`;
  }
  return func;
}

export const PlasmicFormTextInput = Object.assign(
  // Top-level PlasmicFormTextInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    // Metadata about props expected for PlasmicFormTextInput
    internalVariantProps: PlasmicFormTextInput__VariantProps,
    internalArgProps: PlasmicFormTextInput__ArgProps
  }
);

export default PlasmicFormTextInput;
/* prettier-ignore-end */
