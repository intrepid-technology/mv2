// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: WJhSPQRdlH
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarLogo from "../../NavbarLogo"; // plasmic-import: oDDjpt5lQZ/component
import PanelMember from "../../PanelMember"; // plasmic-import: ouYaxX0ZfJN/component
import PanelPartner from "../../PanelPartner"; // plasmic-import: 0x12FzmUo9P/component
import { useLayout } from "./PlasmicGlobalVariant__Layout"; // plasmic-import: yRz57WAHKe/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSidebar.module.css"; // plasmic-import: WJhSPQRdlH/css
import Icon113Icon from "./icons/PlasmicIcon__Icon113"; // plasmic-import: Bb_iW3yqSt/icon

export const PlasmicSidebar__VariantProps = new Array();

export const PlasmicSidebar__ArgProps = new Array();

function PlasmicSidebar__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    layout: useLayout()
  });

  return (
    hasVariant(globalVariants, "layout", "isSellerView")
      ? true
      : hasVariant(globalVariants, "layout", "sidebarOpen")
      ? true
      : true
  ) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__global_layout_isSellerView]: hasVariant(
            globalVariants,
            "layout",
            "isSellerView"
          ),

          [sty.root__global_layout_sidebarOpen]: hasVariant(
            globalVariants,
            "layout",
            "sidebarOpen"
          )
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        hasGap={true}
        className={classNames(defaultcss.all, projectcss.all, sty.header, {
          [sty.header__global_layout_isSellerView]: hasVariant(
            globalVariants,
            "layout",
            "isSellerView"
          )
        })}
      >
        <div
          data-plasmic-name={"iconWrapper"}
          data-plasmic-override={overrides.iconWrapper}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.iconWrapper
          )}
        >
          <Icon113Icon
            data-plasmic-name={"closeIcon"}
            data-plasmic-override={overrides.closeIcon}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.closeIcon
            )}
            role={"img"}
          />
        </div>

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(defaultcss.all, projectcss.all, sty.freeBox)}
        >
          <NavbarLogo
            data-plasmic-name={"navbarLogo"}
            data-plasmic-override={overrides.navbarLogo}
            className={classNames("__wab_instance", sty.navbarLogo)}
          />
        </div>
      </p.Stack>

      {(hasVariant(globalVariants, "layout", "isSellerView") ? false : true) ? (
        <PanelMember
          data-plasmic-name={"panelMember"}
          data-plasmic-override={overrides.panelMember}
          className={classNames("__wab_instance", sty.panelMember, {
            [sty.panelMember__global_layout_isSellerView]: hasVariant(
              globalVariants,
              "layout",
              "isSellerView"
            )
          })}
        />
      ) : null}
      {(hasVariant(globalVariants, "layout", "isSellerView") ? true : true) ? (
        <PanelPartner
          data-plasmic-name={"panelPartner"}
          data-plasmic-override={overrides.panelPartner}
          className={classNames("__wab_instance", sty.panelPartner, {
            [sty.panelPartner__global_layout_isSellerView]: hasVariant(
              globalVariants,
              "layout",
              "isSellerView"
            )
          })}
        />
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "iconWrapper",
    "closeIcon",
    "freeBox",
    "navbarLogo",
    "panelMember",
    "panelPartner"
  ],

  header: ["header", "iconWrapper", "closeIcon", "freeBox", "navbarLogo"],
  iconWrapper: ["iconWrapper", "closeIcon"],
  closeIcon: ["closeIcon"],
  freeBox: ["freeBox", "navbarLogo"],
  navbarLogo: ["navbarLogo"],
  panelMember: ["panelMember"],
  panelPartner: ["panelPartner"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebar__ArgProps,
      internalVariantPropNames: PlasmicSidebar__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    iconWrapper: makeNodeComponent("iconWrapper"),
    closeIcon: makeNodeComponent("closeIcon"),
    freeBox: makeNodeComponent("freeBox"),
    navbarLogo: makeNodeComponent("navbarLogo"),
    panelMember: makeNodeComponent("panelMember"),
    panelPartner: makeNodeComponent("panelPartner"),
    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
