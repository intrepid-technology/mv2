// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: yW0qhLC3HTB
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputFormCardMembership from "../../InputFormCardMembership"; // plasmic-import: xaA58X6UG1B/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import InputFormCardBasic from "../../InputFormCardBasic"; // plasmic-import: IF5nud1uvm2/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPersonalMembership.module.css"; // plasmic-import: yW0qhLC3HTB/css

export const PlasmicPersonalMembership__VariantProps = new Array();

export const PlasmicPersonalMembership__ArgProps = new Array();

function PlasmicPersonalMembership__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__ox6Vp)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__ieIe)}
            >
              <InputFormCardMembership
                data-plasmic-name={"personalAccountMembership"}
                data-plasmic-override={overrides.personalAccountMembership}
                badge={
                  <ChipBadgeDisplay
                    data-plasmic-name={"chipBadgeDisplay"}
                    data-plasmic-override={overrides.chipBadgeDisplay}
                    color={"brand"}
                    type={"ghost"}
                  >
                    {"Creator"}
                  </ChipBadgeDisplay>
                }
                border={"border"}
                className={classNames(
                  "__wab_instance",
                  sty.personalAccountMembership
                )}
                slot4={
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__hg8NP
                    )}
                    color={"success"}
                    size={"_140"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__s3YRc
                      )}
                    >
                      {"Create a team"}
                    </div>
                  </ButtonPrimary>
                }
                text={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___8RRum
                    )}
                  >
                    {
                      "Our Creator and Maker member accounts are free forever. To get the most from the Intrepid community, for professional purposes, or to work with a team, get started by creating a company or contacting sales."
                    }
                  </div>
                }
              />

              <InputFormCardBasic
                data-plasmic-name={"personalPaymentMethod"}
                data-plasmic-override={overrides.personalPaymentMethod}
                border={"border"}
                className={classNames(
                  "__wab_instance",
                  sty.personalPaymentMethod
                )}
                description={"description"}
                headline={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__sByvr
                    )}
                  >
                    {"Payment methods"}
                  </div>
                }
                slot3={
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__yyLi
                    )}
                    color={"success"}
                    size={"_140"}
                    type={"ghost"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__n78LA
                      )}
                    >
                      {"Add new card"}
                    </div>
                  </ButtonPrimary>
                }
                subhead={
                  "You have not yet added any cards. Click the button below to add one."
                }
              />
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "personalAccountMembership",
    "chipBadgeDisplay",
    "personalPaymentMethod"
  ],

  personalAccountMembership: ["personalAccountMembership", "chipBadgeDisplay"],
  chipBadgeDisplay: ["chipBadgeDisplay"],
  personalPaymentMethod: ["personalPaymentMethod"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPersonalMembership__ArgProps,
      internalVariantPropNames: PlasmicPersonalMembership__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPersonalMembership__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPersonalMembership";
  } else {
    func.displayName = `PlasmicPersonalMembership.${nodeName}`;
  }
  return func;
}

export const PlasmicPersonalMembership = Object.assign(
  // Top-level PlasmicPersonalMembership renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    personalAccountMembership: makeNodeComponent("personalAccountMembership"),
    chipBadgeDisplay: makeNodeComponent("chipBadgeDisplay"),
    personalPaymentMethod: makeNodeComponent("personalPaymentMethod"),
    // Metadata about props expected for PlasmicPersonalMembership
    internalVariantProps: PlasmicPersonalMembership__VariantProps,
    internalArgProps: PlasmicPersonalMembership__ArgProps
  }
);

export default PlasmicPersonalMembership;
/* prettier-ignore-end */
