// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: pP9c6XTFzc
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarLogo from "../../NavbarLogo"; // plasmic-import: oDDjpt5lQZ/component
import Button from "../../Button"; // plasmic-import: ftJnovScMuV/component
import Avatar from "../../Avatar"; // plasmic-import: iOk1GFS0p-/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicNavbar.module.css"; // plasmic-import: pP9c6XTFzc/css

export const PlasmicNavbar__VariantProps = new Array("auth", "dark");

export const PlasmicNavbar__ArgProps = new Array();

function PlasmicNavbar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__auth]: hasVariant(variants, "auth", "auth"),
        [sty.root__dark]: hasVariant(variants, "dark", "dark")
      })}
    >
      {(hasVariant(variants, "auth", "auth") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"brandWrapper"}
          data-plasmic-override={overrides.brandWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.brandWrapper, {
            [sty.brandWrapper__auth]: hasVariant(variants, "auth", "auth")
          })}
        >
          {(
            hasVariant(variants, "auth", "auth") &&
            hasVariant(globalVariants, "screen", "iphone678")
              ? true
              : hasVariant(variants, "auth", "auth") &&
                hasVariant(globalVariants, "screen", "iphone12ProMax")
              ? false
              : true
          ) ? (
            <NavbarLogo
              data-plasmic-name={"navbarLogo"}
              data-plasmic-override={overrides.navbarLogo}
              className={classNames("__wab_instance")}
              light={hasVariant(variants, "dark", "dark") ? true : undefined}
            />
          ) : null}
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "auth", "auth")
          ? false
          : hasVariant(globalVariants, "screen", "iphone678")
          ? false
          : hasVariant(globalVariants, "screen", "iphone678Plus")
          ? true
          : hasVariant(globalVariants, "screen", "iphone12ProMax")
          ? false
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"actionWrapper"}
          data-plasmic-override={overrides.actionWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.actionWrapper, {
            [sty.actionWrapper__auth]: hasVariant(variants, "auth", "auth")
          })}
        >
          <Button
            data-plasmic-name={"sellOnIntrepidButton"}
            data-plasmic-override={overrides.sellOnIntrepidButton}
            className={classNames("__wab_instance", sty.sellOnIntrepidButton, {
              [sty.sellOnIntrepidButton__dark]: hasVariant(
                variants,
                "dark",
                "dark"
              )
            })}
            color={hasVariant(variants, "dark", "dark") ? "light" : undefined}
            destination={
              hasVariant(globalVariants, "screen", "desktop")
                ? "https://intrepidventures.typeform.com/to/qoNxle4D"
                : "https://intrepidventures.typeform.com/to/qoNxle4D"
            }
            type={"link"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uRxVz,
                {
                  [sty.text__dark__uRxVz4SuRb]: hasVariant(
                    variants,
                    "dark",
                    "dark"
                  )
                }
              )}
            >
              {"Sell on Intrepid"}
            </div>
          </Button>

          <Button
            data-plasmic-name={"pricingNavButton"}
            data-plasmic-override={overrides.pricingNavButton}
            className={classNames("__wab_instance", sty.pricingNavButton, {
              [sty.pricingNavButton__dark]: hasVariant(variants, "dark", "dark")
            })}
            color={hasVariant(variants, "dark", "dark") ? "light" : undefined}
            destination={
              hasVariant(globalVariants, "screen", "desktop")
                ? "https://intrepidventures.typeform.com/to/MthpVWrA"
                : "/member/pricing"
            }
            type={"link"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hQevM,
                {
                  [sty.text__dark__hQevM4SuRb]: hasVariant(
                    variants,
                    "dark",
                    "dark"
                  )
                }
              )}
            >
              {"Pricing"}
            </div>
          </Button>

          <Button
            data-plasmic-name={"partnerButton"}
            data-plasmic-override={overrides.partnerButton}
            className={classNames("__wab_instance", sty.partnerButton, {
              [sty.partnerButton__dark]: hasVariant(variants, "dark", "dark")
            })}
            color={hasVariant(variants, "dark", "dark") ? "brand" : undefined}
            destination={
              hasVariant(variants, "dark", "dark")
                ? "https://intrepidventures.typeform.com/to/MthpVWrA"
                : hasVariant(globalVariants, "screen", "desktop")
                ? "https://intrepidventures.typeform.com/to/MthpVWrA"
                : "https://intrepidventures.typeform.com/to/MthpVWrA"
            }
            hasShadow={true}
            rounded={true}
            type={"primary"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o407H
              )}
            >
              {"Request access"}
            </div>
          </Button>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "auth", "auth") ? true : false) ? (
        <div
          data-plasmic-name={"authActionsWrapper"}
          data-plasmic-override={overrides.authActionsWrapper}
          className={classNames(projectcss.all, sty.authActionsWrapper, {
            [sty.authActionsWrapper__auth]: hasVariant(variants, "auth", "auth")
          })}
        >
          {(hasVariant(variants, "auth", "auth") ? true : false) ? (
            <Avatar
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames("__wab_instance", sty.avatar, {
                [sty.avatar__auth]: hasVariant(variants, "auth", "auth")
              })}
            >
              <img
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(projectcss.img, sty.img, {
                  [sty.img__auth]: hasVariant(variants, "auth", "auth")
                })}
                loading={"lazy"}
                src={
                  hasVariant(variants, "auth", "auth")
                    ? "/plasmic/market_v_2/images/userAvatarForPresentationjpg.jpeg"
                    : "/plasmic/market_v_2/images/image4.png"
                }
              />
            </Avatar>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "brandWrapper",
    "navbarLogo",
    "actionWrapper",
    "sellOnIntrepidButton",
    "pricingNavButton",
    "partnerButton",
    "authActionsWrapper",
    "avatar",
    "img"
  ],

  brandWrapper: ["brandWrapper", "navbarLogo"],
  navbarLogo: ["navbarLogo"],
  actionWrapper: [
    "actionWrapper",
    "sellOnIntrepidButton",
    "pricingNavButton",
    "partnerButton"
  ],

  sellOnIntrepidButton: ["sellOnIntrepidButton"],
  pricingNavButton: ["pricingNavButton"],
  partnerButton: ["partnerButton"],
  authActionsWrapper: ["authActionsWrapper", "avatar", "img"],
  avatar: ["avatar", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    brandWrapper: makeNodeComponent("brandWrapper"),
    navbarLogo: makeNodeComponent("navbarLogo"),
    actionWrapper: makeNodeComponent("actionWrapper"),
    sellOnIntrepidButton: makeNodeComponent("sellOnIntrepidButton"),
    pricingNavButton: makeNodeComponent("pricingNavButton"),
    partnerButton: makeNodeComponent("partnerButton"),
    authActionsWrapper: makeNodeComponent("authActionsWrapper"),
    avatar: makeNodeComponent("avatar"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
