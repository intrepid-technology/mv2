// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: BXWgCr5-vns
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarSwitch from "../../NavbarSwitch"; // plasmic-import: tmc24NnB44/component
import NavbarLogo from "../../NavbarLogo"; // plasmic-import: oDDjpt5lQZ/component
import SearchbarPrimary from "../../SearchbarPrimary"; // plasmic-import: MorSLptejY/component
import NavbarSave from "../../NavbarSave"; // plasmic-import: -GlpTucHU-/component
import NavbarBrief from "../../NavbarBrief"; // plasmic-import: WoHRRICUYW/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: KmwWxjrE8L/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicNavbarInternal.module.css"; // plasmic-import: BXWgCr5-vns/css
import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: NNbE63A0Ys/icon
import BoostIcon from "./icons/PlasmicIcon__Boost"; // plasmic-import: X0sjJkcBKE/icon

export const PlasmicNavbarInternal__VariantProps = new Array(
  "user",
  "state",
  "search"
);

export const PlasmicNavbarInternal__ArgProps = new Array();

function PlasmicNavbarInternal__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__state_loggedOut]: hasVariant(
            variants,
            "state",
            "loggedOut"
          ),

          [sty.parent__user_partner_state_loggedIn]:
            hasVariant(variants, "user", "partner") &&
            hasVariant(variants, "state", "loggedIn")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sidebarHeaderClosed"}
          data-plasmic-override={overrides.sidebarHeaderClosed}
          hasGap={true}
          className={classNames(defaultcss.all, sty.sidebarHeaderClosed)}
        >
          <NavbarSwitch
            data-plasmic-name={"navbarSwitch"}
            data-plasmic-override={overrides.navbarSwitch}
            className={classNames("__wab_instance", sty.navbarSwitch)}
            target={"side-bar"}
          />

          <NavbarLogo
            data-plasmic-name={"navbarLogo"}
            data-plasmic-override={overrides.navbarLogo}
            className={classNames("__wab_instance", sty.navbarLogo)}
            size={"_16"}
          />
        </p.Stack>

        {(
          hasVariant(variants, "user", "partner") &&
          hasVariant(variants, "state", "loggedOut")
            ? false
            : hasVariant(variants, "user", "member") &&
              hasVariant(variants, "state", "loggedOut")
            ? false
            : hasVariant(variants, "search", "search")
            ? true
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : true
        ) ? (
          <div
            data-plasmic-name={"searchBox"}
            data-plasmic-override={overrides.searchBox}
            className={classNames(defaultcss.all, sty.searchBox, {
              [sty.searchBox__search]: hasVariant(variants, "search", "search"),
              [sty.searchBox__user_member_state_loggedOut]:
                hasVariant(variants, "user", "member") &&
                hasVariant(variants, "state", "loggedOut"),
              [sty.searchBox__user_partner_state_loggedOut]:
                hasVariant(variants, "user", "partner") &&
                hasVariant(variants, "state", "loggedOut")
            })}
          >
            <SearchbarPrimary
              data-plasmic-name={"searchbarPrimary"}
              data-plasmic-override={overrides.searchbarPrimary}
              className={classNames("__wab_instance", sty.searchbarPrimary, {
                [sty.searchbarPrimary__search]: hasVariant(
                  variants,
                  "search",
                  "search"
                ),

                [sty.searchbarPrimary__user_member_state_loggedOut]:
                  hasVariant(variants, "user", "member") &&
                  hasVariant(variants, "state", "loggedOut")
              })}
              height={"_36"}
              width={"_540"}
            />
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__fJTxW, {
            [sty.freeBox__user_member_state_loggedIn__fJTxWl8QpNNht4J]:
              hasVariant(variants, "user", "member") &&
              hasVariant(variants, "state", "loggedIn")
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__maSdV, {
              [sty.freeBox__user_member__maSdVl8QpN]: hasVariant(
                variants,
                "user",
                "member"
              ),

              [sty.freeBox__user_member_state_loggedIn__maSdVl8QpNNht4J]:
                hasVariant(variants, "user", "member") &&
                hasVariant(variants, "state", "loggedIn"),
              [sty.freeBox__user_member_state_loggedOut__maSdVl8QpNAbbxv]:
                hasVariant(variants, "user", "member") &&
                hasVariant(variants, "state", "loggedOut")
            })}
          >
            {(
              hasVariant(variants, "user", "partner") &&
              hasVariant(variants, "state", "loggedOut")
                ? false
                : hasVariant(variants, "user", "partner") &&
                  hasVariant(variants, "state", "loggedIn")
                ? true
                : hasVariant(variants, "user", "member") &&
                  hasVariant(variants, "state", "loggedOut")
                ? false
                : hasVariant(variants, "user", "member") &&
                  hasVariant(variants, "state", "loggedIn")
                ? true
                : false
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__av6P, {
                  [sty.freeBox__user_member__av6PL8QpN]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.freeBox__user_member_state_loggedIn__av6PL8QpNNht4J]:
                    hasVariant(variants, "user", "member") &&
                    hasVariant(variants, "state", "loggedIn"),
                  [sty.freeBox__user_member_state_loggedOut__av6PL8QpNAbbxv]:
                    hasVariant(variants, "user", "member") &&
                    hasVariant(variants, "state", "loggedOut"),
                  [sty.freeBox__user_partner__av6PKgcSn]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  ),

                  [sty.freeBox__user_partner_state_loggedIn__av6PKgcSnNht4J]:
                    hasVariant(variants, "user", "partner") &&
                    hasVariant(variants, "state", "loggedIn"),
                  [sty.freeBox__user_partner_state_loggedOut__av6PKgcSnAbbxv]:
                    hasVariant(variants, "user", "partner") &&
                    hasVariant(variants, "state", "loggedOut")
                })}
              >
                {(hasVariant(variants, "user", "partner") ? true : false) ? (
                  <button
                    data-plasmic-name={"navbarListButton"}
                    data-plasmic-override={overrides.navbarListButton}
                    className={classNames(
                      defaultcss.button,
                      sty.navbarListButton,
                      {
                        [sty.navbarListButton__user_partner]: hasVariant(
                          variants,
                          "user",
                          "partner"
                        )
                      }
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"navbarListButtonTextParent"}
                      data-plasmic-override={
                        overrides.navbarListButtonTextParent
                      }
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.navbarListButtonTextParent
                      )}
                    >
                      <ListingIcon
                        data-plasmic-name={"navbarListButtonSvg"}
                        data-plasmic-override={overrides.navbarListButtonSvg}
                        className={classNames(
                          defaultcss.all,
                          sty.navbarListButtonSvg
                        )}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"navbarListButtonText"}
                        data-plasmic-override={overrides.navbarListButtonText}
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.navbarListButtonText
                        )}
                      >
                        {"New listing"}
                      </div>
                    </p.Stack>
                  </button>
                ) : null}
                {(hasVariant(variants, "user", "member") ? true : false) ? (
                  <button
                    data-plasmic-name={"navbarListButton22"}
                    data-plasmic-override={overrides.navbarListButton22}
                    className={classNames(
                      defaultcss.button,
                      sty.navbarListButton22,
                      {
                        [sty.navbarListButton22__user_member]: hasVariant(
                          variants,
                          "user",
                          "member"
                        )
                      }
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"navbarListButtonTextParent22"}
                      data-plasmic-override={
                        overrides.navbarListButtonTextParent22
                      }
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.navbarListButtonTextParent22
                      )}
                    >
                      <BoostIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(defaultcss.all, sty.svg)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"navbarListButtonText22"}
                        data-plasmic-override={overrides.navbarListButtonText22}
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.navbarListButtonText22
                        )}
                      >
                        {"Power up"}
                      </div>
                    </p.Stack>
                  </button>
                ) : null}
              </p.Stack>
            ) : null}
            {(
              hasVariant(variants, "user", "partner") &&
              hasVariant(variants, "state", "loggedOut")
                ? false
                : hasVariant(variants, "user", "partner") &&
                  hasVariant(variants, "state", "loggedIn")
                ? true
                : hasVariant(variants, "user", "member") &&
                  hasVariant(variants, "state", "loggedOut")
                ? false
                : hasVariant(variants, "user", "member") &&
                  hasVariant(variants, "state", "loggedIn")
                ? true
                : false
            ) ? (
              <NavbarSave
                data-plasmic-name={"navbarSave"}
                data-plasmic-override={overrides.navbarSave}
                className={classNames("__wab_instance", sty.navbarSave, {
                  [sty.navbarSave__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),

                  [sty.navbarSave__user_member_state_loggedIn]:
                    hasVariant(variants, "user", "member") &&
                    hasVariant(variants, "state", "loggedIn"),
                  [sty.navbarSave__user_member_state_loggedOut]:
                    hasVariant(variants, "user", "member") &&
                    hasVariant(variants, "state", "loggedOut"),
                  [sty.navbarSave__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  ),

                  [sty.navbarSave__user_partner_state_loggedIn]:
                    hasVariant(variants, "user", "partner") &&
                    hasVariant(variants, "state", "loggedIn"),
                  [sty.navbarSave__user_partner_state_loggedOut]:
                    hasVariant(variants, "user", "partner") &&
                    hasVariant(variants, "state", "loggedOut")
                })}
              />
            ) : null}
            {(
              hasVariant(variants, "user", "partner") &&
              hasVariant(variants, "state", "loggedOut")
                ? false
                : hasVariant(variants, "user", "partner") &&
                  hasVariant(variants, "state", "loggedIn")
                ? true
                : hasVariant(variants, "user", "member") &&
                  hasVariant(variants, "state", "loggedOut")
                ? false
                : hasVariant(variants, "user", "member") &&
                  hasVariant(variants, "state", "loggedIn")
                ? true
                : false
            ) ? (
              <NavbarBrief
                data-plasmic-name={"navbarBrief"}
                data-plasmic-override={overrides.navbarBrief}
                className={classNames("__wab_instance", sty.navbarBrief, {
                  [sty.navbarBrief__user_member_state_loggedIn]:
                    hasVariant(variants, "user", "member") &&
                    hasVariant(variants, "state", "loggedIn"),
                  [sty.navbarBrief__user_member_state_loggedOut]:
                    hasVariant(variants, "user", "member") &&
                    hasVariant(variants, "state", "loggedOut"),
                  [sty.navbarBrief__user_partner_state_loggedIn]:
                    hasVariant(variants, "user", "partner") &&
                    hasVariant(variants, "state", "loggedIn"),
                  [sty.navbarBrief__user_partner_state_loggedOut]:
                    hasVariant(variants, "user", "partner") &&
                    hasVariant(variants, "state", "loggedOut")
                })}
              />
            ) : null}

            <UserAvatar
              data-plasmic-name={"userAvatar"}
              data-plasmic-override={overrides.userAvatar}
              className={classNames("__wab_instance", sty.userAvatar, {
                [sty.userAvatar__search]: hasVariant(
                  variants,
                  "search",
                  "search"
                )
              })}
              size={"_32"}
            />
          </p.Stack>
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "sidebarHeaderClosed",
    "navbarSwitch",
    "navbarLogo",
    "searchBox",
    "searchbarPrimary",
    "navbarListButton",
    "navbarListButtonTextParent",
    "navbarListButtonSvg",
    "navbarListButtonText",
    "navbarListButton22",
    "navbarListButtonTextParent22",
    "svg",
    "navbarListButtonText22",
    "navbarSave",
    "navbarBrief",
    "userAvatar"
  ],

  parent: [
    "parent",
    "sidebarHeaderClosed",
    "navbarSwitch",
    "navbarLogo",
    "searchBox",
    "searchbarPrimary",
    "navbarListButton",
    "navbarListButtonTextParent",
    "navbarListButtonSvg",
    "navbarListButtonText",
    "navbarListButton22",
    "navbarListButtonTextParent22",
    "svg",
    "navbarListButtonText22",
    "navbarSave",
    "navbarBrief",
    "userAvatar"
  ],

  sidebarHeaderClosed: ["sidebarHeaderClosed", "navbarSwitch", "navbarLogo"],
  navbarSwitch: ["navbarSwitch"],
  navbarLogo: ["navbarLogo"],
  searchBox: ["searchBox", "searchbarPrimary"],
  searchbarPrimary: ["searchbarPrimary"],
  navbarListButton: [
    "navbarListButton",
    "navbarListButtonTextParent",
    "navbarListButtonSvg",
    "navbarListButtonText"
  ],

  navbarListButtonTextParent: [
    "navbarListButtonTextParent",
    "navbarListButtonSvg",
    "navbarListButtonText"
  ],

  navbarListButtonSvg: ["navbarListButtonSvg"],
  navbarListButtonText: ["navbarListButtonText"],
  navbarListButton22: [
    "navbarListButton22",
    "navbarListButtonTextParent22",
    "svg",
    "navbarListButtonText22"
  ],

  navbarListButtonTextParent22: [
    "navbarListButtonTextParent22",
    "svg",
    "navbarListButtonText22"
  ],

  svg: ["svg"],
  navbarListButtonText22: ["navbarListButtonText22"],
  navbarSave: ["navbarSave"],
  navbarBrief: ["navbarBrief"],
  userAvatar: ["userAvatar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarInternal__ArgProps,
      internalVariantPropNames: PlasmicNavbarInternal__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNavbarInternal__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarInternal";
  } else {
    func.displayName = `PlasmicNavbarInternal.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarInternal = Object.assign(
  // Top-level PlasmicNavbarInternal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    sidebarHeaderClosed: makeNodeComponent("sidebarHeaderClosed"),
    navbarSwitch: makeNodeComponent("navbarSwitch"),
    navbarLogo: makeNodeComponent("navbarLogo"),
    searchBox: makeNodeComponent("searchBox"),
    searchbarPrimary: makeNodeComponent("searchbarPrimary"),
    navbarListButton: makeNodeComponent("navbarListButton"),
    navbarListButtonTextParent: makeNodeComponent("navbarListButtonTextParent"),
    navbarListButtonSvg: makeNodeComponent("navbarListButtonSvg"),
    navbarListButtonText: makeNodeComponent("navbarListButtonText"),
    navbarListButton22: makeNodeComponent("navbarListButton22"),
    navbarListButtonTextParent22: makeNodeComponent(
      "navbarListButtonTextParent22"
    ),

    svg: makeNodeComponent("svg"),
    navbarListButtonText22: makeNodeComponent("navbarListButtonText22"),
    navbarSave: makeNodeComponent("navbarSave"),
    navbarBrief: makeNodeComponent("navbarBrief"),
    userAvatar: makeNodeComponent("userAvatar"),
    // Metadata about props expected for PlasmicNavbarInternal
    internalVariantProps: PlasmicNavbarInternal__VariantProps,
    internalArgProps: PlasmicNavbarInternal__ArgProps
  }
);

export default PlasmicNavbarInternal;
/* prettier-ignore-end */
