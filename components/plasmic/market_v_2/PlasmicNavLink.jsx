// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: jGROxaZ_Hy
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicNavLink.module.css"; // plasmic-import: jGROxaZ_Hy/css

export const PlasmicNavLink__VariantProps = new Array("color", "state");

export const PlasmicNavLink__ArgProps = new Array("linkText", "destination");

function PlasmicNavLink__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        sty.root,
        {
          [sty.rootcolor_brand]: hasVariant(variants, "color", "brand"),
          [sty.rootcolor_ghost]: hasVariant(variants, "color", "ghost"),
          [sty.rootcolor_light]: hasVariant(variants, "color", "light"),
          [sty.rootstate_disabled]: hasVariant(variants, "state", "disabled"),
          [sty.rootstate_selected]: hasVariant(variants, "state", "selected")
        }
      )}
      component={Link}
      href={args.destination}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(projectcss.all, sty.parent, {
          [sty.parentcolor_brand]: hasVariant(variants, "color", "brand"),
          [sty.parentcolor_ghost]: hasVariant(variants, "color", "ghost"),
          [sty.parentcolor_light]: hasVariant(variants, "color", "light"),
          [sty.parentstate_selected]: hasVariant(variants, "state", "selected")
        })}
      >
        <div
          data-plasmic-name={"textParent"}
          data-plasmic-override={overrides.textParent}
          className={classNames(projectcss.all, sty.textParent)}
        >
          <div
            data-plasmic-name={"textBg"}
            data-plasmic-override={overrides.textBg}
            className={classNames(projectcss.all, sty.textBg, {
              [sty.textBgcolor_light]: hasVariant(variants, "color", "light")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Nav Link",
              value: args.linkText,
              className: classNames(sty.slotTargetLinkText, {
                [sty.slotTargetLinkTextcolor_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),

                [sty.slotTargetLinkTextcolor_ghost]: hasVariant(
                  variants,
                  "color",
                  "ghost"
                ),

                [sty.slotTargetLinkTextcolor_light]: hasVariant(
                  variants,
                  "color",
                  "light"
                ),

                [sty.slotTargetLinkTextstate_disabled]: hasVariant(
                  variants,
                  "state",
                  "disabled"
                ),

                [sty.slotTargetLinkTextstate_selected]: hasVariant(
                  variants,
                  "state",
                  "selected"
                )
              })
            })}
          </div>
        </div>
      </div>
    </p.PlasmicLink>
  );
}

const PlasmicDescendants = {
  root: ["root", "parent", "textParent", "textBg"],
  parent: ["parent", "textParent", "textBg"],
  textParent: ["textParent", "textBg"],
  textBg: ["textBg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavLink__ArgProps,
      internalVariantPropNames: PlasmicNavLink__VariantProps
    });

    return PlasmicNavLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavLink";
  } else {
    func.displayName = `PlasmicNavLink.${nodeName}`;
  }
  return func;
}

export const PlasmicNavLink = Object.assign(
  // Top-level PlasmicNavLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    textParent: makeNodeComponent("textParent"),
    textBg: makeNodeComponent("textBg"),
    // Metadata about props expected for PlasmicNavLink
    internalVariantProps: PlasmicNavLink__VariantProps,
    internalArgProps: PlasmicNavLink__ArgProps
  }
);

export default PlasmicNavLink;
/* prettier-ignore-end */
