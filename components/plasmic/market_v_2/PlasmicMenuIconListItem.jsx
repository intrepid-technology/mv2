// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 61axZSTp8Y
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SwitchInput from "../../SwitchInput"; // plasmic-import: q4oa9NmA8gP/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicMenuIconListItem.module.css"; // plasmic-import: 61axZSTp8Y/css
import OptionalFixedBrandColorIcon from "./icons/PlasmicIcon__OptionalFixedBrandColor"; // plasmic-import: Lsqk-ADBoKU/icon

export const PlasmicMenuIconListItem__VariantProps = new Array(
  "disabled",
  "selected",
  "renderContext",
  "action"
);

export const PlasmicMenuIconListItem__ArgProps = new Array(
  "navText",
  "navIcon",
  "destination",
  "openInNewTab",
  "children",
  "slot"
);

function PlasmicMenuIconListItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"menuIconListItemLink"}
      data-plasmic-override={overrides.menuIconListItemLink}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.a,
        projectcss.root_reset,
        sty.menuIconListItemLink,
        {
          [sty.menuIconListItemLink__action__switch]: hasVariant(
            variants,
            "action",
            "_switch"
          ),

          [sty.menuIconListItemLink__disabled]: hasVariant(
            variants,
            "disabled",
            "disabled"
          ),

          [sty.menuIconListItemLink__selected]: hasVariant(
            variants,
            "selected",
            "selected"
          )
        }
      )}
      component={Link}
      href={args.destination}
      platform={"nextjs"}
      target={args.openInNewTab}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"iconTextParent"}
        data-plasmic-override={overrides.iconTextParent}
        hasGap={true}
        className={classNames(projectcss.all, sty.iconTextParent, {
          [sty.iconTextParent__action__switch]: hasVariant(
            variants,
            "action",
            "_switch"
          ),

          [sty.iconTextParent__selected]: hasVariant(
            variants,
            "selected",
            "selected"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <OptionalFixedBrandColorIcon
              className={classNames(projectcss.all, sty.svg__wfdfm)}
              role={"img"}
            />
          ),

          value: args.navIcon,
          className: classNames(sty.slotTargetNavIcon, {
            [sty.slotTargetNavIcon__disabled]: hasVariant(
              variants,
              "disabled",
              "disabled"
            ),

            [sty.slotTargetNavIcon__selected]: hasVariant(
              variants,
              "selected",
              "selected"
            ),

            [sty.slotTargetNavIcon__selected_renderContext_sidebar]:
              hasVariant(variants, "selected", "selected") &&
              hasVariant(variants, "renderContext", "sidebar")
          })
        })}

        <div
          data-plasmic-name={"navTextParent"}
          data-plasmic-override={overrides.navTextParent}
          className={classNames(projectcss.all, sty.navTextParent, {
            [sty.navTextParent__action__switch]: hasVariant(
              variants,
              "action",
              "_switch"
            ),

            [sty.navTextParent__selected]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
        >
          {(hasVariant(variants, "action", "_switch") ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: "Item",
                value: args.navText,
                className: classNames(sty.slotTargetNavText, {
                  [sty.slotTargetNavText__action__switch]: hasVariant(
                    variants,
                    "action",
                    "_switch"
                  ),

                  [sty.slotTargetNavText__disabled]: hasVariant(
                    variants,
                    "disabled",
                    "disabled"
                  ),

                  [sty.slotTargetNavText__selected]: hasVariant(
                    variants,
                    "selected",
                    "selected"
                  ),

                  [sty.slotTargetNavText__selected_renderContext_sidebar]:
                    hasVariant(variants, "selected", "selected") &&
                    hasVariant(variants, "renderContext", "sidebar")
                })
              })
            : null}
          {(hasVariant(variants, "action", "_switch") ? true : false) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBox__action__switch]: hasVariant(
                  variants,
                  "action",
                  "_switch"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Member",
                value: args.children,
                className: classNames(sty.slotTargetChildren, {
                  [sty.slotTargetChildren__selected_action__switch_renderContext_sidebar]:
                    hasVariant(variants, "selected", "selected") &&
                    hasVariant(variants, "action", "_switch") &&
                    hasVariant(variants, "renderContext", "sidebar")
                })
              })}

              <SwitchInput
                data-plasmic-name={"switchActionButton"}
                data-plasmic-override={overrides.switchActionButton}
                className={classNames("__wab_instance", sty.switchActionButton)}
                switchOnly={true}
              />

              {p.renderPlasmicSlot({
                defaultContents: "Partner",
                value: args.slot,
                className: classNames(sty.slotTargetSlot, {
                  [sty.slotTargetSlot__selected_action__switch_renderContext_sidebar]:
                    hasVariant(variants, "selected", "selected") &&
                    hasVariant(variants, "action", "_switch") &&
                    hasVariant(variants, "renderContext", "sidebar")
                })
              })}
            </p.Stack>
          ) : null}
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  menuIconListItemLink: [
    "menuIconListItemLink",
    "iconTextParent",
    "navTextParent",
    "freeBox",
    "switchActionButton"
  ],

  iconTextParent: [
    "iconTextParent",
    "navTextParent",
    "freeBox",
    "switchActionButton"
  ],

  navTextParent: ["navTextParent", "freeBox", "switchActionButton"],
  freeBox: ["freeBox", "switchActionButton"],
  switchActionButton: ["switchActionButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuIconListItem__ArgProps,
      internalVariantPropNames: PlasmicMenuIconListItem__VariantProps
    });

    return PlasmicMenuIconListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "menuIconListItemLink") {
    func.displayName = "PlasmicMenuIconListItem";
  } else {
    func.displayName = `PlasmicMenuIconListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuIconListItem = Object.assign(
  // Top-level PlasmicMenuIconListItem renders the root element
  makeNodeComponent("menuIconListItemLink"),
  {
    // Helper components rendering sub-elements
    iconTextParent: makeNodeComponent("iconTextParent"),
    navTextParent: makeNodeComponent("navTextParent"),
    freeBox: makeNodeComponent("freeBox"),
    switchActionButton: makeNodeComponent("switchActionButton"),
    // Metadata about props expected for PlasmicMenuIconListItem
    internalVariantProps: PlasmicMenuIconListItem__VariantProps,
    internalArgProps: PlasmicMenuIconListItem__ArgProps
  }
);

export default PlasmicMenuIconListItem;
/* prettier-ignore-end */
