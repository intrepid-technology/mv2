// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: _uTya7yxqeE
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import FabButtonB from "../../FabButtonB"; // plasmic-import: nkuQ1X_r6B/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardConnectedAccount.module.css"; // plasmic-import: _uTya7yxqeE/css
import Icon99Icon from "./icons/PlasmicIcon__Icon99"; // plasmic-import: THJhoSUct/icon

export const PlasmicCardConnectedAccount__VariantProps = new Array(
  "companies",
  "business"
);

export const PlasmicCardConnectedAccount__ArgProps = new Array(
  "svgConnectedAccount",
  "username",
  "userLastName",
  "userFirstname",
  "connectedAccountName",
  "timestampDate"
);

function PlasmicCardConnectedAccount__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent, {
        [sty.parent__companies_freshbooks]: hasVariant(
          variants,
          "companies",
          "freshbooks"
        ),

        [sty.parent__companies_quickbooks]: hasVariant(
          variants,
          "companies",
          "quickbooks"
        )
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"cardParent"}
        data-plasmic-override={overrides.cardParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.cardParent, {
          [sty.cardParent__companies_facebook]: hasVariant(
            variants,
            "companies",
            "facebook"
          ),

          [sty.cardParent__companies_freshbooks]: hasVariant(
            variants,
            "companies",
            "freshbooks"
          ),

          [sty.cardParent__companies_freshbooks_business]:
            hasVariant(variants, "companies", "freshbooks") &&
            hasVariant(variants, "business", "business"),
          [sty.cardParent__companies_google]: hasVariant(
            variants,
            "companies",
            "google"
          ),

          [sty.cardParent__companies_paypal]: hasVariant(
            variants,
            "companies",
            "paypal"
          ),

          [sty.cardParent__companies_quickbooks]: hasVariant(
            variants,
            "companies",
            "quickbooks"
          ),

          [sty.cardParent__companies_stripe]: hasVariant(
            variants,
            "companies",
            "stripe"
          ),

          [sty.cardParent__companies_xero]: hasVariant(
            variants,
            "companies",
            "xero"
          )
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__mbiD)}
        >
          <div
            data-plasmic-name={"svgConnectedAccountParent"}
            data-plasmic-override={overrides.svgConnectedAccountParent}
            className={classNames(
              defaultcss.all,
              sty.svgConnectedAccountParent
            )}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <Icon99Icon
                  className={classNames(defaultcss.all, sty.svg__wnDF)}
                  role={"img"}
                />
              ),

              value: args.svgConnectedAccount
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"accountInfoParent"}
            data-plasmic-override={overrides.accountInfoParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.accountInfoParent)}
          >
            <div className={classNames(defaultcss.all, sty.box___1Hh0)}>
              <div
                data-plasmic-name={"accountName"}
                data-plasmic-override={overrides.accountName}
                className={classNames(defaultcss.all, sty.accountName)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: hasVariant(
                    variants,
                    "companies",
                    "freshbooks"
                  )
                    ? "Freshbooks"
                    : hasVariant(variants, "companies", "quickbooks")
                    ? "Quickbooks"
                    : hasVariant(variants, "companies", "xero")
                    ? "Xero"
                    : hasVariant(variants, "companies", "paypal")
                    ? "Paypal"
                    : hasVariant(variants, "companies", "stripe")
                    ? "Stripe"
                    : hasVariant(variants, "companies", "facebook")
                    ? "Facebook"
                    : hasVariant(variants, "companies", "google")
                    ? "Google"
                    : "Connected account name",
                  value: args.connectedAccountName,
                  className: classNames(sty.slotConnectedAccountName, {
                    [sty.slotConnectedAccountName__companies_facebook]:
                      hasVariant(variants, "companies", "facebook"),
                    [sty.slotConnectedAccountName__companies_freshbooks]:
                      hasVariant(variants, "companies", "freshbooks"),
                    [sty.slotConnectedAccountName__companies_google]:
                      hasVariant(variants, "companies", "google"),
                    [sty.slotConnectedAccountName__companies_paypal]:
                      hasVariant(variants, "companies", "paypal"),
                    [sty.slotConnectedAccountName__companies_quickbooks]:
                      hasVariant(variants, "companies", "quickbooks"),
                    [sty.slotConnectedAccountName__companies_stripe]:
                      hasVariant(variants, "companies", "stripe"),
                    [sty.slotConnectedAccountName__companies_xero]: hasVariant(
                      variants,
                      "companies",
                      "xero"
                    )
                  })
                })}
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"usernamesParent"}
              data-plasmic-override={overrides.usernamesParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.usernamesParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: hasVariant(variants, "business", "business")
                  ? "companyName"
                  : "userFirstName",
                value: args.userFirstname,
                className: classNames(sty.slotUserFirstname, {
                  [sty.slotUserFirstname__business]: hasVariant(
                    variants,
                    "business",
                    "business"
                  ),

                  [sty.slotUserFirstname__companies_freshbooks]: hasVariant(
                    variants,
                    "companies",
                    "freshbooks"
                  ),

                  [sty.slotUserFirstname__companies_freshbooks_business]:
                    hasVariant(variants, "companies", "freshbooks") &&
                    hasVariant(variants, "business", "business")
                })
              })}

              {(hasVariant(variants, "business", "business") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: "userLastName",
                    value: args.userLastName,
                    className: classNames(sty.slotUserLastName, {
                      [sty.slotUserLastName__business]: hasVariant(
                        variants,
                        "business",
                        "business"
                      )
                    })
                  })
                : null}
            </p.Stack>

            {p.renderPlasmicSlot({
              defaultContents: "username",
              value: args.username,
              className: classNames(sty.slotUsername)
            })}
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"connectedTimestampParent"}
          data-plasmic-override={overrides.connectedTimestampParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.connectedTimestampParent)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"connectedTimestamp"}
            data-plasmic-override={overrides.connectedTimestamp}
            hasGap={true}
            className={classNames(defaultcss.all, sty.connectedTimestamp)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__tZkwH
              )}
            >
              {"Connected"}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "Timestamp",
              value: args.timestampDate,
              className: classNames(sty.slotTimestampDate)
            })}
          </p.Stack>

          <FabButtonB
            data-plasmic-name={"fabButtonB"}
            data-plasmic-override={overrides.fabButtonB}
            className={classNames("__wab_instance", sty.fabButtonB)}
            size={"_18Px"}
          />
        </p.Stack>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "cardParent",
    "svgConnectedAccountParent",
    "accountInfoParent",
    "accountName",
    "usernamesParent",
    "connectedTimestampParent",
    "connectedTimestamp",
    "fabButtonB"
  ],

  cardParent: [
    "cardParent",
    "svgConnectedAccountParent",
    "accountInfoParent",
    "accountName",
    "usernamesParent",
    "connectedTimestampParent",
    "connectedTimestamp",
    "fabButtonB"
  ],

  svgConnectedAccountParent: ["svgConnectedAccountParent"],
  accountInfoParent: ["accountInfoParent", "accountName", "usernamesParent"],
  accountName: ["accountName"],
  usernamesParent: ["usernamesParent"],
  connectedTimestampParent: [
    "connectedTimestampParent",
    "connectedTimestamp",
    "fabButtonB"
  ],

  connectedTimestamp: ["connectedTimestamp"],
  fabButtonB: ["fabButtonB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardConnectedAccount__ArgProps,
      internalVariantPropNames: PlasmicCardConnectedAccount__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCardConnectedAccount__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicCardConnectedAccount";
  } else {
    func.displayName = `PlasmicCardConnectedAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicCardConnectedAccount = Object.assign(
  // Top-level PlasmicCardConnectedAccount renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    cardParent: makeNodeComponent("cardParent"),
    svgConnectedAccountParent: makeNodeComponent("svgConnectedAccountParent"),
    accountInfoParent: makeNodeComponent("accountInfoParent"),
    accountName: makeNodeComponent("accountName"),
    usernamesParent: makeNodeComponent("usernamesParent"),
    connectedTimestampParent: makeNodeComponent("connectedTimestampParent"),
    connectedTimestamp: makeNodeComponent("connectedTimestamp"),
    fabButtonB: makeNodeComponent("fabButtonB"),
    // Metadata about props expected for PlasmicCardConnectedAccount
    internalVariantProps: PlasmicCardConnectedAccount__VariantProps,
    internalArgProps: PlasmicCardConnectedAccount__ArgProps
  }
);

export default PlasmicCardConnectedAccount;
/* prettier-ignore-end */
