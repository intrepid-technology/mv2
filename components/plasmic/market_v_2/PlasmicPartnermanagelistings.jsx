// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: o7uPWO-dXgo
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: ta5dUay7HZW/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import SearchbarPrimary from "../../SearchbarPrimary"; // plasmic-import: MorSLptejY/component
import SelectDropdownPrimary from "../../SelectDropdownPrimary"; // plasmic-import: T_qFWEqz1I6/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import TableListingAdminHeader from "../../TableListingAdminHeader"; // plasmic-import: j0LNFrWCIRj/component
import TableListingAdminRecord from "../../TableListingAdminRecord"; // plasmic-import: -CTzxsSFaeA/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicPartnermanagelistings.module.css"; // plasmic-import: o7uPWO-dXgo/css
import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: NNbE63A0Ys/icon

export const PlasmicPartnermanagelistings__VariantProps = new Array();

export const PlasmicPartnermanagelistings__ArgProps = new Array();

function PlasmicPartnermanagelistings__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
            navItems={["notifications", "reviews", "messages", "wallet"]}
            selected={"listings"}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionPartnerManageListingsHeader"}
            data-plasmic-override={overrides.sectionPartnerManageListingsHeader}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.sectionPartnerManageListingsHeader
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay
              )}
              size={
                hasVariant(globalVariants, "screen", "iphone12ProMax")
                  ? "_360"
                  : "_720"
              }
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t5HAg
                  )}
                >
                  {"Manage your listings"}
                </div>
              }
              textDisplay={"Listings"}
              textSubhead={
                "Manage or edit your listings to increase your earnings"
              }
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionPartnerManageListings"}
            data-plasmic-override={overrides.sectionPartnerManageListings}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.sectionPartnerManageListings
            )}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__aPXdG)}
            >
              <CardHeaderTitlePrimary
                data-plasmic-name={"cardHeaderTitlePrimary"}
                data-plasmic-override={overrides.cardHeaderTitlePrimary}
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___675Gy
                    )}
                  >
                    {"Listings status, price and terms"}
                  </div>
                }
              >
                {"Services"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"listingManagementBlockParent"}
                data-plasmic-override={overrides.listingManagementBlockParent}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.listingManagementBlockParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"listingTotalParent"}
                  data-plasmic-override={overrides.listingTotalParent}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.listingTotalParent)}
                >
                  <div
                    data-plasmic-name={"listingNumberParent"}
                    data-plasmic-override={overrides.listingNumberParent}
                    className={classNames(
                      projectcss.all,
                      sty.listingNumberParent
                    )}
                  >
                    <div
                      data-plasmic-name={"listingNumber"}
                      data-plasmic-override={overrides.listingNumber}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.listingNumber
                      )}
                    >
                      {"3"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rr92D
                    )}
                  >
                    {"Listings"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xulmc)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "iphone12ProMax")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"listingSearchFilterParent"}
                      data-plasmic-override={
                        overrides.listingSearchFilterParent
                      }
                      className={classNames(
                        projectcss.all,
                        sty.listingSearchFilterParent
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4Lom7
                        )}
                      >
                        <SearchbarPrimary
                          data-plasmic-name={"searchbarPrimary"}
                          data-plasmic-override={overrides.searchbarPrimary}
                          className={classNames(
                            "__wab_instance",
                            sty.searchbarPrimary
                          )}
                          width={"_540"}
                        />

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={
                            "listingSearchFilterDropdownParent"
                          }
                          data-plasmic-override={
                            overrides.listingSearchFilterDropdownParent
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.listingSearchFilterDropdownParent
                          )}
                        >
                          <SelectDropdownPrimary
                            className={classNames(
                              "__wab_instance",
                              sty.selectDropdownPrimary__uyKzy
                            )}
                            placeholder={"Status"}
                            width={"_160"}
                          />

                          <SelectDropdownPrimary
                            className={classNames(
                              "__wab_instance",
                              sty.selectDropdownPrimary__rgWaR
                            )}
                            placeholder={"Content"}
                            width={"_160"}
                          />
                        </p.Stack>
                      </p.Stack>

                      <ButtonPrimary
                        data-plasmic-name={"buttonPrimary"}
                        data-plasmic-override={overrides.buttonPrimary}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary
                        )}
                        color={"primary"}
                        svgIconPrefix={
                          <ListingIcon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            role={"img"}
                          />
                        }
                        type={"iconPrefix"}
                        width={"_140"}
                      >
                        {"New listing"}
                      </ButtonPrimary>
                    </div>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"listingManagementTableColumnParent"}
                    data-plasmic-override={
                      overrides.listingManagementTableColumnParent
                    }
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.listingManagementTableColumnParent
                    )}
                  >
                    <TableListingAdminHeader
                      data-plasmic-name={"tableListingAdminHeader"}
                      data-plasmic-override={overrides.tableListingAdminHeader}
                      className={classNames(
                        "__wab_instance",
                        sty.tableListingAdminHeader
                      )}
                    />

                    <TableListingAdminRecord
                      data-plasmic-name={"tableListingAdminRecord"}
                      data-plasmic-override={overrides.tableListingAdminRecord}
                      className={classNames(
                        "__wab_instance",
                        sty.tableListingAdminRecord
                      )}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarPartnerEdit",
    "sectionPartnerManageListingsHeader",
    "cardHeaderTitleDisplay",
    "sectionPartnerManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingAdminHeader",
    "tableListingAdminRecord"
  ],

  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionPartnerManageListingsHeader: [
    "sectionPartnerManageListingsHeader",
    "cardHeaderTitleDisplay"
  ],

  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  sectionPartnerManageListings: [
    "sectionPartnerManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingAdminHeader",
    "tableListingAdminRecord"
  ],

  cardHeaderTitlePrimary: ["cardHeaderTitlePrimary"],
  listingManagementBlockParent: [
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingAdminHeader",
    "tableListingAdminRecord"
  ],

  listingTotalParent: [
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber"
  ],

  listingNumberParent: ["listingNumberParent", "listingNumber"],
  listingNumber: ["listingNumber"],
  listingSearchFilterParent: [
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg"
  ],

  searchbarPrimary: ["searchbarPrimary"],
  listingSearchFilterDropdownParent: ["listingSearchFilterDropdownParent"],
  buttonPrimary: ["buttonPrimary", "svg"],
  svg: ["svg"],
  listingManagementTableColumnParent: [
    "listingManagementTableColumnParent",
    "tableListingAdminHeader",
    "tableListingAdminRecord"
  ],

  tableListingAdminHeader: ["tableListingAdminHeader"],
  tableListingAdminRecord: ["tableListingAdminRecord"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPartnermanagelistings__ArgProps,
      internalVariantPropNames: PlasmicPartnermanagelistings__VariantProps
    });

    return PlasmicPartnermanagelistings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPartnermanagelistings";
  } else {
    func.displayName = `PlasmicPartnermanagelistings.${nodeName}`;
  }
  return func;
}

export const PlasmicPartnermanagelistings = Object.assign(
  // Top-level PlasmicPartnermanagelistings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionPartnerManageListingsHeader: makeNodeComponent(
      "sectionPartnerManageListingsHeader"
    ),

    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    sectionPartnerManageListings: makeNodeComponent(
      "sectionPartnerManageListings"
    ),

    cardHeaderTitlePrimary: makeNodeComponent("cardHeaderTitlePrimary"),
    listingManagementBlockParent: makeNodeComponent(
      "listingManagementBlockParent"
    ),

    listingTotalParent: makeNodeComponent("listingTotalParent"),
    listingNumberParent: makeNodeComponent("listingNumberParent"),
    listingNumber: makeNodeComponent("listingNumber"),
    listingSearchFilterParent: makeNodeComponent("listingSearchFilterParent"),
    searchbarPrimary: makeNodeComponent("searchbarPrimary"),
    listingSearchFilterDropdownParent: makeNodeComponent(
      "listingSearchFilterDropdownParent"
    ),

    buttonPrimary: makeNodeComponent("buttonPrimary"),
    svg: makeNodeComponent("svg"),
    listingManagementTableColumnParent: makeNodeComponent(
      "listingManagementTableColumnParent"
    ),

    tableListingAdminHeader: makeNodeComponent("tableListingAdminHeader"),
    tableListingAdminRecord: makeNodeComponent("tableListingAdminRecord"),
    // Metadata about props expected for PlasmicPartnermanagelistings
    internalVariantProps: PlasmicPartnermanagelistings__VariantProps,
    internalArgProps: PlasmicPartnermanagelistings__ArgProps
  }
);

export default PlasmicPartnermanagelistings;
/* prettier-ignore-end */
