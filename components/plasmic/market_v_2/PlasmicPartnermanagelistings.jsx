// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: o7uPWO-dXgo
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: BXWgCr5-vns/component
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: ta5dUay7HZW/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import SearchbarPrimary from "../../SearchbarPrimary"; // plasmic-import: MorSLptejY/component
import SelectDropdownPrimary from "../../SelectDropdownPrimary"; // plasmic-import: T_qFWEqz1I6/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import TableListingManagementHeader from "../../TableListingManagementHeader"; // plasmic-import: j0LNFrWCIRj/component
import TableListingManagementRecord from "../../TableListingManagementRecord"; // plasmic-import: -CTzxsSFaeA/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPartnermanagelistings.module.css"; // plasmic-import: o7uPWO-dXgo/css
import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: NNbE63A0Ys/icon

export const PlasmicPartnermanagelistings__VariantProps = new Array();

export const PlasmicPartnermanagelistings__ArgProps = new Array();

function PlasmicPartnermanagelistings__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
            navItems={["notifications", "reviews", "messages", "wallet"]}
            selected={"listings"}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionPartnerManageListingsHeader"}
            data-plasmic-override={overrides.sectionPartnerManageListingsHeader}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionPartnerManageListingsHeader
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay
              )}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__t5HAg
                  )}
                >
                  {"Manage your listings"}
                </div>
              }
              textDisplay={"Listings"}
              textSubhead={
                "Manage or edit your listings to increase your earnings"
              }
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionPartnerManageListings"}
            data-plasmic-override={overrides.sectionPartnerManageListings}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionPartnerManageListings
            )}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__aPXdG)}
            >
              <CardHeaderTitlePrimary
                data-plasmic-name={"cardHeaderTitlePrimary"}
                data-plasmic-override={overrides.cardHeaderTitlePrimary}
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___675Gy
                    )}
                  >
                    {"Listings status, price and terms"}
                  </div>
                }
              >
                {"Services"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"listingManagementBlockParent"}
                data-plasmic-override={overrides.listingManagementBlockParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.listingManagementBlockParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"listingTotalParent"}
                  data-plasmic-override={overrides.listingTotalParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.listingTotalParent)}
                >
                  <div
                    data-plasmic-name={"listingNumberParent"}
                    data-plasmic-override={overrides.listingNumberParent}
                    className={classNames(
                      defaultcss.all,
                      sty.listingNumberParent
                    )}
                  >
                    <div
                      data-plasmic-name={"listingNumber"}
                      data-plasmic-override={overrides.listingNumber}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.listingNumber
                      )}
                    >
                      {"3"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__rr92D
                    )}
                  >
                    {"Listings"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__xulmc)}
                >
                  <div
                    data-plasmic-name={"listingSearchFilterParent"}
                    data-plasmic-override={overrides.listingSearchFilterParent}
                    className={classNames(
                      defaultcss.all,
                      sty.listingSearchFilterParent
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box___4Lom7)}
                    >
                      <SearchbarPrimary
                        data-plasmic-name={"searchbarPrimary"}
                        data-plasmic-override={overrides.searchbarPrimary}
                        className={classNames(
                          "__wab_instance",
                          sty.searchbarPrimary
                        )}
                        width={"_540"}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"listingSearchFilterDropdownParent"}
                        data-plasmic-override={
                          overrides.listingSearchFilterDropdownParent
                        }
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.listingSearchFilterDropdownParent
                        )}
                      >
                        <SelectDropdownPrimary
                          className={classNames(
                            "__wab_instance",
                            sty.selectDropdownPrimary__uyKzy
                          )}
                          placeholder={"Status"}
                          width={"_160"}
                        />

                        <SelectDropdownPrimary
                          className={classNames(
                            "__wab_instance",
                            sty.selectDropdownPrimary__rgWaR
                          )}
                          placeholder={"Content"}
                          width={"_160"}
                        />
                      </p.Stack>
                    </p.Stack>

                    <ButtonPrimary
                      data-plasmic-name={"buttonPrimary"}
                      data-plasmic-override={overrides.buttonPrimary}
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary
                      )}
                      color={"brand"}
                      size={"_140"}
                      svgIcon={
                        <ListingIcon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(defaultcss.all, sty.svg)}
                          role={"img"}
                        />
                      }
                      type={"icon"}
                    >
                      {"New listing"}
                    </ButtonPrimary>
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"listingManagementTableColumnParent"}
                    data-plasmic-override={
                      overrides.listingManagementTableColumnParent
                    }
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.listingManagementTableColumnParent
                    )}
                  >
                    <TableListingManagementHeader
                      data-plasmic-name={"tableListingManagementHeader"}
                      data-plasmic-override={
                        overrides.tableListingManagementHeader
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.tableListingManagementHeader
                      )}
                    />

                    <TableListingManagementRecord
                      data-plasmic-name={"tableListingManagementRecord"}
                      data-plasmic-override={
                        overrides.tableListingManagementRecord
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.tableListingManagementRecord
                      )}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarPartnerEdit",
    "sectionPartnerManageListingsHeader",
    "cardHeaderTitleDisplay",
    "sectionPartnerManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingManagementHeader",
    "tableListingManagementRecord",
    "footerB"
  ],

  navbarInternal: ["navbarInternal"],
  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionPartnerManageListingsHeader: [
    "sectionPartnerManageListingsHeader",
    "cardHeaderTitleDisplay"
  ],

  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  sectionPartnerManageListings: [
    "sectionPartnerManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingManagementHeader",
    "tableListingManagementRecord"
  ],

  cardHeaderTitlePrimary: ["cardHeaderTitlePrimary"],
  listingManagementBlockParent: [
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingManagementHeader",
    "tableListingManagementRecord"
  ],

  listingTotalParent: [
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber"
  ],

  listingNumberParent: ["listingNumberParent", "listingNumber"],
  listingNumber: ["listingNumber"],
  listingSearchFilterParent: [
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg"
  ],

  searchbarPrimary: ["searchbarPrimary"],
  listingSearchFilterDropdownParent: ["listingSearchFilterDropdownParent"],
  buttonPrimary: ["buttonPrimary", "svg"],
  svg: ["svg"],
  listingManagementTableColumnParent: [
    "listingManagementTableColumnParent",
    "tableListingManagementHeader",
    "tableListingManagementRecord"
  ],

  tableListingManagementHeader: ["tableListingManagementHeader"],
  tableListingManagementRecord: ["tableListingManagementRecord"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPartnermanagelistings__ArgProps,
      internalVariantPropNames: PlasmicPartnermanagelistings__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPartnermanagelistings__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPartnermanagelistings";
  } else {
    func.displayName = `PlasmicPartnermanagelistings.${nodeName}`;
  }
  return func;
}

export const PlasmicPartnermanagelistings = Object.assign(
  // Top-level PlasmicPartnermanagelistings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionPartnerManageListingsHeader: makeNodeComponent(
      "sectionPartnerManageListingsHeader"
    ),

    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    sectionPartnerManageListings: makeNodeComponent(
      "sectionPartnerManageListings"
    ),

    cardHeaderTitlePrimary: makeNodeComponent("cardHeaderTitlePrimary"),
    listingManagementBlockParent: makeNodeComponent(
      "listingManagementBlockParent"
    ),

    listingTotalParent: makeNodeComponent("listingTotalParent"),
    listingNumberParent: makeNodeComponent("listingNumberParent"),
    listingNumber: makeNodeComponent("listingNumber"),
    listingSearchFilterParent: makeNodeComponent("listingSearchFilterParent"),
    searchbarPrimary: makeNodeComponent("searchbarPrimary"),
    listingSearchFilterDropdownParent: makeNodeComponent(
      "listingSearchFilterDropdownParent"
    ),

    buttonPrimary: makeNodeComponent("buttonPrimary"),
    svg: makeNodeComponent("svg"),
    listingManagementTableColumnParent: makeNodeComponent(
      "listingManagementTableColumnParent"
    ),

    tableListingManagementHeader: makeNodeComponent(
      "tableListingManagementHeader"
    ),

    tableListingManagementRecord: makeNodeComponent(
      "tableListingManagementRecord"
    ),

    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicPartnermanagelistings
    internalVariantProps: PlasmicPartnermanagelistings__VariantProps,
    internalArgProps: PlasmicPartnermanagelistings__ArgProps
  }
);

export default PlasmicPartnermanagelistings;
/* prettier-ignore-end */
