// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Hh6LXHL9Zp
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicIconListItem.module.css"; // plasmic-import: Hh6LXHL9Zp/css

export const PlasmicIconListItem__VariantProps = new Array("vertical");

export const PlasmicIconListItem__ArgProps = new Array("icon", "label");

function PlasmicIconListItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        { [sty.root__vertical]: hasVariant(variants, "vertical", "vertical") }
      )}
    >
      <div
        data-plasmic-name={"iconWrapper"}
        data-plasmic-override={overrides.iconWrapper}
        className={classNames(defaultcss.all, projectcss.all, sty.iconWrapper)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <svg
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg__dIszo
              )}
              role={"img"}
            />
          ),

          value: args.icon
        })}
      </div>

      <div
        data-plasmic-name={"textWrapper"}
        data-plasmic-override={overrides.textWrapper}
        className={classNames(defaultcss.all, projectcss.all, sty.textWrapper, {
          [sty.textWrapper__vertical]: hasVariant(
            variants,
            "vertical",
            "vertical"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents:
            "Global access to over 27,000 SMBs and professionals",
          value: args.label,
          className: classNames(sty.slotTargetLabel, {
            [sty.slotTargetLabel__vertical]: hasVariant(
              variants,
              "vertical",
              "vertical"
            )
          })
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "iconWrapper", "textWrapper"],
  iconWrapper: ["iconWrapper"],
  textWrapper: ["textWrapper"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicIconListItem__ArgProps,
      internalVariantPropNames: PlasmicIconListItem__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicIconListItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIconListItem";
  } else {
    func.displayName = `PlasmicIconListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicIconListItem = Object.assign(
  // Top-level PlasmicIconListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconWrapper: makeNodeComponent("iconWrapper"),
    textWrapper: makeNodeComponent("textWrapper"),
    // Metadata about props expected for PlasmicIconListItem
    internalVariantProps: PlasmicIconListItem__VariantProps,
    internalArgProps: PlasmicIconListItem__ArgProps
  }
);

export default PlasmicIconListItem;
/* prettier-ignore-end */
