// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: M6TX-0ESZQ
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicToggleA.module.css"; // plasmic-import: M6TX-0ESZQ/css

export const PlasmicToggleA__VariantProps = new Array(
  "_switch",
  "disabled",
  "color"
);

export const PlasmicToggleA__ArgProps = new Array();

function PlasmicToggleA__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root___switch]: hasVariant(variants, "_switch", "_switch"),
        [sty.root__color_brand__switch]:
          hasVariant(variants, "color", "brand") &&
          hasVariant(variants, "_switch", "_switch"),
        [sty.root__disabled_closed]: hasVariant(variants, "disabled", "closed"),
        [sty.root__disabled_open]: hasVariant(variants, "disabled", "open"),
        [sty.root__disabled_open_color_brand]:
          hasVariant(variants, "disabled", "open") &&
          hasVariant(variants, "color", "brand")
      })}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box, {
          [sty.box___switch]: hasVariant(variants, "_switch", "_switch"),
          [sty.box__disabled_closed]: hasVariant(
            variants,
            "disabled",
            "closed"
          ),

          [sty.box__disabled_open]: hasVariant(variants, "disabled", "open"),
          [sty.box__disabled_open_color_brand]:
            hasVariant(variants, "disabled", "open") &&
            hasVariant(variants, "color", "brand")
        })}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "box"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicToggleA__ArgProps,
      internalVariantPropNames: PlasmicToggleA__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicToggleA__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToggleA";
  } else {
    func.displayName = `PlasmicToggleA.${nodeName}`;
  }
  return func;
}

export const PlasmicToggleA = Object.assign(
  // Top-level PlasmicToggleA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicToggleA
    internalVariantProps: PlasmicToggleA__VariantProps,
    internalArgProps: PlasmicToggleA__ArgProps
  }
);

export default PlasmicToggleA;
/* prettier-ignore-end */
