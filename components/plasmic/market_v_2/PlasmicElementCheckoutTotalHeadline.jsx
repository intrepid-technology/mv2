// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: gmFIW2AzJW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicElementCheckoutTotalHeadline.module.css"; // plasmic-import: gmFIW2AzJW/css

export const PlasmicElementCheckoutTotalHeadline__VariantProps = new Array();

export const PlasmicElementCheckoutTotalHeadline__ArgProps = new Array(
  "currency"
);

function PlasmicElementCheckoutTotalHeadline__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Total"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"currencyTotalValueParent"}
        data-plasmic-override={overrides.currencyTotalValueParent}
        hasGap={true}
        className={classNames(projectcss.all, sty.currencyTotalValueParent)}
      >
        <div
          data-plasmic-name={"currencyParent"}
          data-plasmic-override={overrides.currencyParent}
          className={classNames(projectcss.all, sty.currencyParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "$",
            value: args.currency,
            className: classNames(sty.slotTargetCurrency)
          })}
        </div>

        <div
          data-plasmic-name={"totalValueNumberParent"}
          data-plasmic-override={overrides.totalValueNumberParent}
          className={classNames(projectcss.all, sty.totalValueNumberParent)}
        >
          <div
            data-plasmic-name={"totalValueNumber"}
            data-plasmic-override={overrides.totalValueNumber}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.totalValueNumber
            )}
          >
            {"0.00"}
          </div>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "text",
    "currencyTotalValueParent",
    "currencyParent",
    "totalValueNumberParent",
    "totalValueNumber"
  ],

  freeBox: ["freeBox", "text"],
  text: ["text"],
  currencyTotalValueParent: [
    "currencyTotalValueParent",
    "currencyParent",
    "totalValueNumberParent",
    "totalValueNumber"
  ],

  currencyParent: ["currencyParent"],
  totalValueNumberParent: ["totalValueNumberParent", "totalValueNumber"],
  totalValueNumber: ["totalValueNumber"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementCheckoutTotalHeadline__ArgProps,
      internalVariantPropNames:
        PlasmicElementCheckoutTotalHeadline__VariantProps
    });

    return PlasmicElementCheckoutTotalHeadline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementCheckoutTotalHeadline";
  } else {
    func.displayName = `PlasmicElementCheckoutTotalHeadline.${nodeName}`;
  }
  return func;
}

export const PlasmicElementCheckoutTotalHeadline = Object.assign(
  // Top-level PlasmicElementCheckoutTotalHeadline renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    currencyTotalValueParent: makeNodeComponent("currencyTotalValueParent"),
    currencyParent: makeNodeComponent("currencyParent"),
    totalValueNumberParent: makeNodeComponent("totalValueNumberParent"),
    totalValueNumber: makeNodeComponent("totalValueNumber"),
    // Metadata about props expected for PlasmicElementCheckoutTotalHeadline
    internalVariantProps: PlasmicElementCheckoutTotalHeadline__VariantProps,
    internalArgProps: PlasmicElementCheckoutTotalHeadline__ArgProps
  }
);

export default PlasmicElementCheckoutTotalHeadline;
/* prettier-ignore-end */
