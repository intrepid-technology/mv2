// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: ESb2G2fq56P
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import MenuIconListItem from "../../MenuIconListItem"; // plasmic-import: 61axZSTp8Y/component
import Button from "../../Button"; // plasmic-import: ftJnovScMuV/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPanelPartnerSectionPartner.module.css"; // plasmic-import: ESb2G2fq56P/css
import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: eMAeU2OiF/icon
import TeamPartnersIcon from "./icons/PlasmicIcon__TeamPartners"; // plasmic-import: nykSsHgmL/icon
import WalletEarningsIcon from "./icons/PlasmicIcon__WalletEarnings"; // plasmic-import: yPY5MrAZTs/icon

export const PlasmicPanelPartnerSectionPartner__VariantProps = new Array();

export const PlasmicPanelPartnerSectionPartner__ArgProps = new Array();

function PlasmicPanelPartnerSectionPartner__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___8Dh5C
          )}
        >
          {"Partner"}
        </div>
      </p.Stack>

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__dsDoA)}
        destination={"/team/profile"}
        navIcon={
          <UserIcon
            data-plasmic-name={"navImage2"}
            data-plasmic-override={overrides.navImage2}
            className={classNames(projectcss.all, sty.navImage2)}
            role={"img"}
          />
        }
        navText={"Profile"}
        renderContext={"sidebar"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__lqd7E)}
        destination={"/edit/team"}
        navIcon={
          <TeamPartnersIcon
            data-plasmic-name={"navImage3"}
            data-plasmic-override={overrides.navImage3}
            className={classNames(projectcss.all, sty.navImage3)}
            role={"img"}
          />
        }
        navText={"Team"}
        renderContext={"sidebar"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__jjVq7)}
        destination={"/wallet"}
        navIcon={
          <WalletEarningsIcon
            data-plasmic-name={"navImage"}
            data-plasmic-override={overrides.navImage}
            className={classNames(projectcss.all, sty.navImage)}
            role={"img"}
          />
        }
        navText={"Wallet"}
        renderContext={"sidebar"}
      />

      <Button
        data-plasmic-name={"switchToMemberButton"}
        data-plasmic-override={overrides.switchToMemberButton}
        className={classNames("__wab_instance", sty.switchToMemberButton)}
        color={"brand"}
        preventDefault={"true"}
        rounded={"rounded"}
        type={"link"}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__r0JTu
          )}
        >
          {"Switch to Member"}
        </div>
      </Button>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "navImage2",
    "navImage3",
    "navImage",
    "switchToMemberButton"
  ],

  freeBox: ["freeBox"],
  navImage2: ["navImage2"],
  navImage3: ["navImage3"],
  navImage: ["navImage"],
  switchToMemberButton: ["switchToMemberButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelPartnerSectionPartner__ArgProps,
      internalVariantPropNames: PlasmicPanelPartnerSectionPartner__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPanelPartnerSectionPartner__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelPartnerSectionPartner";
  } else {
    func.displayName = `PlasmicPanelPartnerSectionPartner.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelPartnerSectionPartner = Object.assign(
  // Top-level PlasmicPanelPartnerSectionPartner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    navImage2: makeNodeComponent("navImage2"),
    navImage3: makeNodeComponent("navImage3"),
    navImage: makeNodeComponent("navImage"),
    switchToMemberButton: makeNodeComponent("switchToMemberButton"),
    // Metadata about props expected for PlasmicPanelPartnerSectionPartner
    internalVariantProps: PlasmicPanelPartnerSectionPartner__VariantProps,
    internalArgProps: PlasmicPanelPartnerSectionPartner__ArgProps
  }
);

export default PlasmicPanelPartnerSectionPartner;
/* prettier-ignore-end */
