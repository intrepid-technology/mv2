// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: ESb2G2fq56P
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import MenuIconListItem from "../../MenuIconListItem"; // plasmic-import: 61axZSTp8Y/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPanelPartnerSectionPartner.module.css"; // plasmic-import: ESb2G2fq56P/css
import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: eMAeU2OiF/icon
import TeamPartnersIcon from "./icons/PlasmicIcon__TeamPartners"; // plasmic-import: nykSsHgmL/icon
import WalletEarningsIcon from "./icons/PlasmicIcon__WalletEarnings"; // plasmic-import: yPY5MrAZTs/icon
import SwitchUserIcon from "./icons/PlasmicIcon__SwitchUser"; // plasmic-import: fiW_1GB84/icon

export const PlasmicPanelPartnerSectionPartner__VariantProps = new Array();

export const PlasmicPanelPartnerSectionPartner__ArgProps = new Array();

function PlasmicPanelPartnerSectionPartner__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__ryHdz)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox___8Dh5C
          )}
        >
          {"Partner"}
        </div>
      </p.Stack>

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__dsDoA)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__w3J4U)}>
            <UserIcon
              className={classNames(defaultcss.all, sty.svg__j0I4C)}
              role={"img"}
            />
          </div>
        }
        navText={"Profile"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__lqd7E)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__zzN6S)}>
            <TeamPartnersIcon
              className={classNames(defaultcss.all, sty.svg__reL48)}
              role={"img"}
            />
          </div>
        }
        navText={"Team"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__jjVq7)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__uYn32)}>
            <WalletEarningsIcon
              className={classNames(defaultcss.all, sty.svg__jDd6)}
              role={"img"}
            />
          </div>
        }
        navText={"Wallet"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__f163K)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__dpjsj)}>
            <SwitchUserIcon
              className={classNames(defaultcss.all, sty.svg__x4M1B)}
              role={"img"}
            />
          </div>
        }
        navText={"Switch to Member"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelPartnerSectionPartner__ArgProps,
      internalVariantPropNames: PlasmicPanelPartnerSectionPartner__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPanelPartnerSectionPartner__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelPartnerSectionPartner";
  } else {
    func.displayName = `PlasmicPanelPartnerSectionPartner.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelPartnerSectionPartner = Object.assign(
  // Top-level PlasmicPanelPartnerSectionPartner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicPanelPartnerSectionPartner
    internalVariantProps: PlasmicPanelPartnerSectionPartner__VariantProps,
    internalArgProps: PlasmicPanelPartnerSectionPartner__ArgProps
  }
);

export default PlasmicPanelPartnerSectionPartner;
/* prettier-ignore-end */
