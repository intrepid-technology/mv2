// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: fNbAgFgAmx
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicElementProfileAbout.module.css"; // plasmic-import: fNbAgFgAmx/css

export const PlasmicElementProfileAbout__VariantProps = new Array();

export const PlasmicElementProfileAbout__ArgProps = new Array();

function PlasmicElementProfileAbout__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      {true ? (
        <div
          data-plasmic-name={"about"}
          data-plasmic-override={overrides.about}
          className={classNames(projectcss.all, sty.about)}
        >
          <div
            data-plasmic-name={"aboutText"}
            data-plasmic-override={overrides.aboutText}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.aboutText
            )}
          >
            {"About"}
          </div>
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"textParent"}
          data-plasmic-override={overrides.textParent}
          className={classNames(projectcss.all, sty.textParent)}
        >
          <div
            data-plasmic-name={"text170Characters"}
            data-plasmic-override={overrides.text170Characters}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text170Characters
            )}
          >
            {
              "I'm an independent designer and engineer who has worked for Uber and Shopify.\n\nI tried a few startups and now I'm starting my own studio.\n\nI enjoy travel and exploring new cultures.\n\nI especially love trying new foods and working in new places"
            }
          </div>
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "about", "aboutText", "textParent", "text170Characters"],
  about: ["about", "aboutText"],
  aboutText: ["aboutText"],
  textParent: ["textParent", "text170Characters"],
  text170Characters: ["text170Characters"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementProfileAbout__ArgProps,
      internalVariantPropNames: PlasmicElementProfileAbout__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicElementProfileAbout__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementProfileAbout";
  } else {
    func.displayName = `PlasmicElementProfileAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicElementProfileAbout = Object.assign(
  // Top-level PlasmicElementProfileAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    about: makeNodeComponent("about"),
    aboutText: makeNodeComponent("aboutText"),
    textParent: makeNodeComponent("textParent"),
    text170Characters: makeNodeComponent("text170Characters"),
    // Metadata about props expected for PlasmicElementProfileAbout
    internalVariantProps: PlasmicElementProfileAbout__VariantProps,
    internalArgProps: PlasmicElementProfileAbout__ArgProps
  }
);

export default PlasmicElementProfileAbout;
/* prettier-ignore-end */
