// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Q6uFqZTeF8
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SwitchInput from "../../SwitchInput"; // plasmic-import: q4oa9NmA8gP/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicFormSwitchInput.module.css"; // plasmic-import: Q6uFqZTeF8/css

export const PlasmicFormSwitchInput__VariantProps = new Array("on", "disabled");

export const PlasmicFormSwitchInput__ArgProps = new Array("content", "name");

function PlasmicFormSwitchInput__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <SwitchInput
        data-plasmic-name={"switchInput"}
        data-plasmic-override={overrides.switchInput}
        className={classNames("__wab_instance", sty.switchInput, {
          [sty.switchInput__disabled]: hasVariant(
            variants,
            "disabled",
            "disabled"
          ),

          [sty.switchInput__on]: hasVariant(variants, "on", "on"),
          [sty.switchInput__on_disabled]:
            hasVariant(variants, "on", "on") &&
            hasVariant(variants, "disabled", "disabled")
        })}
        content={p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.content
        })}
        disabled={
          hasVariant(variants, "disabled", "disabled") ? true : undefined
        }
        name={args.name}
        on={hasVariant(variants, "on", "on") ? true : undefined}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "switchInput"],
  switchInput: ["switchInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFormSwitchInput__ArgProps,
      internalVariantPropNames: PlasmicFormSwitchInput__VariantProps
    });

    return PlasmicFormSwitchInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormSwitchInput";
  } else {
    func.displayName = `PlasmicFormSwitchInput.${nodeName}`;
  }
  return func;
}

export const PlasmicFormSwitchInput = Object.assign(
  // Top-level PlasmicFormSwitchInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    switchInput: makeNodeComponent("switchInput"),
    // Metadata about props expected for PlasmicFormSwitchInput
    internalVariantProps: PlasmicFormSwitchInput__VariantProps,
    internalArgProps: PlasmicFormSwitchInput__ArgProps
  }
);

export default PlasmicFormSwitchInput;
/* prettier-ignore-end */
