// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 7hi-uHtvzE
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SwitchPrimary from "../../SwitchPrimary"; // plasmic-import: M6TX-0ESZQ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicToggleSubscriptionCard.module.css"; // plasmic-import: 7hi-uHtvzE/css

export const PlasmicToggleSubscriptionCard__VariantProps = new Array(
  "active",
  "inactive"
);

export const PlasmicToggleSubscriptionCard__ArgProps = new Array();

function PlasmicToggleSubscriptionCard__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__x3Lz4)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox___59Etq)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___7BqmP,
              {
                [sty.freeBox__active_autorenew___7BqmPlnhdG]: hasVariant(
                  variants,
                  "active",
                  "autorenew"
                ),

                [sty.freeBox__active_placement___7BqmP6LMlB]: hasVariant(
                  variants,
                  "active",
                  "placement"
                ),

                [sty.freeBox__active_yearly___7BqmPcmaHv]: hasVariant(
                  variants,
                  "active",
                  "yearly"
                ),

                [sty.freeBox__inactive_autorenew___7BqmPeReNk]: hasVariant(
                  variants,
                  "inactive",
                  "autorenew"
                ),

                [sty.freeBox__inactive_placement___7BqmP1Wg4F]: hasVariant(
                  variants,
                  "inactive",
                  "placement"
                ),

                [sty.freeBox__inactive_yearly___7BqmPw0RxE]: hasVariant(
                  variants,
                  "inactive",
                  "yearly"
                )
              }
            )}
          >
            {hasVariant(variants, "inactive", "placement")
              ? "Standard"
              : hasVariant(variants, "inactive", "autorenew")
              ? "Autorenew"
              : hasVariant(variants, "inactive", "yearly")
              ? "Yearly"
              : hasVariant(variants, "active", "placement")
              ? "Priority"
              : hasVariant(variants, "active", "autorenew")
              ? "Autorenew"
              : hasVariant(variants, "active", "yearly")
              ? "Yearly"
              : "Monthly"}
          </div>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__ljIaA)}
      >
        <SwitchPrimary
          data-plasmic-name={"switchPrimary"}
          data-plasmic-override={overrides.switchPrimary}
          _switch={
            hasVariant(variants, "active", "placement")
              ? "_switch"
              : hasVariant(variants, "active", "autorenew")
              ? "_switch"
              : hasVariant(variants, "active", "yearly")
              ? "_switch"
              : undefined
          }
          className={classNames("__wab_instance", sty.switchPrimary, {
            [sty.switchPrimary__active_autorenew]: hasVariant(
              variants,
              "active",
              "autorenew"
            ),

            [sty.switchPrimary__active_placement]: hasVariant(
              variants,
              "active",
              "placement"
            ),

            [sty.switchPrimary__active_yearly]: hasVariant(
              variants,
              "active",
              "yearly"
            ),

            [sty.switchPrimary__inactive_autorenew]: hasVariant(
              variants,
              "inactive",
              "autorenew"
            ),

            [sty.switchPrimary__inactive_placement]: hasVariant(
              variants,
              "inactive",
              "placement"
            ),

            [sty.switchPrimary__inactive_yearly]: hasVariant(
              variants,
              "inactive",
              "yearly"
            )
          })}
          color={hasVariant(variants, "inactive", "yearly") ? [] : undefined}
        />
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "switchPrimary"],
  switchPrimary: ["switchPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicToggleSubscriptionCard__ArgProps,
      internalVariantPropNames: PlasmicToggleSubscriptionCard__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicToggleSubscriptionCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToggleSubscriptionCard";
  } else {
    func.displayName = `PlasmicToggleSubscriptionCard.${nodeName}`;
  }
  return func;
}

export const PlasmicToggleSubscriptionCard = Object.assign(
  // Top-level PlasmicToggleSubscriptionCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    switchPrimary: makeNodeComponent("switchPrimary"),
    // Metadata about props expected for PlasmicToggleSubscriptionCard
    internalVariantProps: PlasmicToggleSubscriptionCard__VariantProps,
    internalArgProps: PlasmicToggleSubscriptionCard__ArgProps
  }
);

export default PlasmicToggleSubscriptionCard;
/* prettier-ignore-end */
