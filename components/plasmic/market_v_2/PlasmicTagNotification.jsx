// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: -8KQRPGoiM
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicTagNotification.module.css"; // plasmic-import: -8KQRPGoiM/css

export const PlasmicTagNotification__VariantProps = new Array("state");

export const PlasmicTagNotification__ArgProps = new Array();

function PlasmicTagNotification__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_alert]: hasVariant(variants, "state", "alert"),
        [sty.root__state_urgent]: hasVariant(variants, "state", "urgent"),
        [sty.root__state_warning]: hasVariant(variants, "state", "warning")
      })}
    >
      <div
        data-plasmic-name={"contentParent"}
        data-plasmic-override={overrides.contentParent}
        className={classNames(defaultcss.all, sty.contentParent)}
      >
        <div
          data-plasmic-name={"textContent"}
          data-plasmic-override={overrides.textContent}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.textContent
          )}
        >
          {"1"}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "contentParent", "textContent"],
  contentParent: ["contentParent", "textContent"],
  textContent: ["textContent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTagNotification__ArgProps,
      internalVariantPropNames: PlasmicTagNotification__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTagNotification__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTagNotification";
  } else {
    func.displayName = `PlasmicTagNotification.${nodeName}`;
  }
  return func;
}

export const PlasmicTagNotification = Object.assign(
  // Top-level PlasmicTagNotification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentParent: makeNodeComponent("contentParent"),
    textContent: makeNodeComponent("textContent"),
    // Metadata about props expected for PlasmicTagNotification
    internalVariantProps: PlasmicTagNotification__VariantProps,
    internalArgProps: PlasmicTagNotification__ArgProps
  }
);

export default PlasmicTagNotification;
/* prettier-ignore-end */
