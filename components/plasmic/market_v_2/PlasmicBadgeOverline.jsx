// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: VgxQDgSvqop
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicBadgeOverline.module.css"; // plasmic-import: VgxQDgSvqop/css
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: alaRRmprOn/icon

export const PlasmicBadgeOverline__VariantProps = new Array("type", "colors");

export const PlasmicBadgeOverline__ArgProps = new Array(
  "subjectTextSlot",
  "descriptiveTextSlot"
);

function PlasmicBadgeOverline__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__colors_dark]: hasVariant(variants, "colors", "dark"),
        [sty.root__colors_smoke]: hasVariant(variants, "colors", "smoke"),
        [sty.root__colors_smoke_type_outline]:
          hasVariant(variants, "colors", "smoke") &&
          hasVariant(variants, "type", "outline"),
        [sty.root__type_outline]: hasVariant(variants, "type", "outline")
      })}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___09JR, {
          [sty.freeBox__colors_smoke___09JRc1422]: hasVariant(
            variants,
            "colors",
            "smoke"
          ),

          [sty.freeBox__colors_smoke_type_outline___09JRc1422V9AmM]:
            hasVariant(variants, "colors", "smoke") &&
            hasVariant(variants, "type", "outline"),
          [sty.freeBox__type_outline___09JRv9AmM]: hasVariant(
            variants,
            "type",
            "outline"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__ndql4)}>
          {p.renderPlasmicSlot({
            defaultContents: "Subject Text",
            value: args.subjectTextSlot,
            className: classNames(sty.slotTargetSubjectTextSlot, {
              [sty.slotTargetSubjectTextSlot__colors_smoke]: hasVariant(
                variants,
                "colors",
                "smoke"
              ),

              [sty.slotTargetSubjectTextSlot__type_outline]: hasVariant(
                variants,
                "type",
                "outline"
              ),

              [sty.slotTargetSubjectTextSlot__type_outline_colors_smoke]:
                hasVariant(variants, "type", "outline") &&
                hasVariant(variants, "colors", "smoke")
            })
          })}
        </div>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__exEE)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wskfG)}>
          {p.renderPlasmicSlot({
            defaultContents: "Descriptive Text",
            value: args.descriptiveTextSlot,
            className: classNames(sty.slotTargetDescriptiveTextSlot, {
              [sty.slotTargetDescriptiveTextSlot__colors_smoke]: hasVariant(
                variants,
                "colors",
                "smoke"
              ),

              [sty.slotTargetDescriptiveTextSlot__colors_smoke_type_outline]:
                hasVariant(variants, "colors", "smoke") &&
                hasVariant(variants, "type", "outline"),
              [sty.slotTargetDescriptiveTextSlot__type_outline]: hasVariant(
                variants,
                "type",
                "outline"
              )
            })
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox___5WPk7)}>
          <ChevronRightIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svg__colors_smoke]: hasVariant(variants, "colors", "smoke"),
              [sty.svg__colors_smoke_type_outline]:
                hasVariant(variants, "colors", "smoke") &&
                hasVariant(variants, "type", "outline"),
              [sty.svg__type_outline]: hasVariant(variants, "type", "outline")
            })}
            role={"img"}
          />
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBadgeOverline__ArgProps,
      internalVariantPropNames: PlasmicBadgeOverline__VariantProps
    });

    return PlasmicBadgeOverline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBadgeOverline";
  } else {
    func.displayName = `PlasmicBadgeOverline.${nodeName}`;
  }
  return func;
}

export const PlasmicBadgeOverline = Object.assign(
  // Top-level PlasmicBadgeOverline renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicBadgeOverline
    internalVariantProps: PlasmicBadgeOverline__VariantProps,
    internalArgProps: PlasmicBadgeOverline__ArgProps
  }
);

export default PlasmicBadgeOverline;
/* prettier-ignore-end */
