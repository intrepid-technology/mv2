// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: ccLKsFE6cR
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicElementCheckoutSubHeadlineTotal.module.css"; // plasmic-import: ccLKsFE6cR/css

export const PlasmicElementCheckoutSubHeadlineTotal__VariantProps = new Array();

export const PlasmicElementCheckoutSubHeadlineTotal__ArgProps = new Array(
  "headline",
  "currency",
  "totalvalue"
);

function PlasmicElementCheckoutSubHeadlineTotal__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox___8Spx)}
      >
        <div
          data-plasmic-name={"headlineParent"}
          data-plasmic-override={overrides.headlineParent}
          className={classNames(defaultcss.all, sty.headlineParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Listing",
            value: args.headline,
            className: classNames(sty.slotTargetHeadline)
          })}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"totalCurrencyNumberValue"}
        data-plasmic-override={overrides.totalCurrencyNumberValue}
        hasGap={true}
        className={classNames(defaultcss.all, sty.totalCurrencyNumberValue)}
      >
        <div
          data-plasmic-name={"ccurrencyParent"}
          data-plasmic-override={overrides.ccurrencyParent}
          className={classNames(defaultcss.all, sty.ccurrencyParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "$",
            value: args.currency,
            className: classNames(sty.slotTargetCurrency)
          })}
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__h0Uqh)}>
          <div
            data-plasmic-name={"totalValueParent"}
            data-plasmic-override={overrides.totalValueParent}
            className={classNames(defaultcss.all, sty.totalValueParent)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "0.00",
              value: args.totalvalue,
              className: classNames(sty.slotTargetTotalvalue)
            })}
          </div>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "headlineParent",
    "totalCurrencyNumberValue",
    "ccurrencyParent",
    "totalValueParent"
  ],

  headlineParent: ["headlineParent"],
  totalCurrencyNumberValue: [
    "totalCurrencyNumberValue",
    "ccurrencyParent",
    "totalValueParent"
  ],

  ccurrencyParent: ["ccurrencyParent"],
  totalValueParent: ["totalValueParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementCheckoutSubHeadlineTotal__ArgProps,
      internalVariantPropNames:
        PlasmicElementCheckoutSubHeadlineTotal__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicElementCheckoutSubHeadlineTotal__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementCheckoutSubHeadlineTotal";
  } else {
    func.displayName = `PlasmicElementCheckoutSubHeadlineTotal.${nodeName}`;
  }
  return func;
}

export const PlasmicElementCheckoutSubHeadlineTotal = Object.assign(
  // Top-level PlasmicElementCheckoutSubHeadlineTotal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headlineParent: makeNodeComponent("headlineParent"),
    totalCurrencyNumberValue: makeNodeComponent("totalCurrencyNumberValue"),
    ccurrencyParent: makeNodeComponent("ccurrencyParent"),
    totalValueParent: makeNodeComponent("totalValueParent"),
    // Metadata about props expected for PlasmicElementCheckoutSubHeadlineTotal
    internalVariantProps: PlasmicElementCheckoutSubHeadlineTotal__VariantProps,
    internalArgProps: PlasmicElementCheckoutSubHeadlineTotal__ArgProps
  }
);

export default PlasmicElementCheckoutSubHeadlineTotal;
/* prettier-ignore-end */
