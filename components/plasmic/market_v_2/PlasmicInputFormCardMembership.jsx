// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: xaA58X6UG1B
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import TextLinkUnderlinePrimary from "../../TextLinkUnderlinePrimary"; // plasmic-import: fFeX6kEAMB/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicInputFormCardMembership.module.css"; // plasmic-import: xaA58X6UG1B/css

export const PlasmicInputFormCardMembership__VariantProps = new Array(
  "link",
  "button",
  "border"
);

export const PlasmicInputFormCardMembership__ArgProps = new Array(
  "children",
  "slot",
  "text",
  "slot3",
  "slot4",
  "badge"
);

function PlasmicInputFormCardMembership__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__border]: hasVariant(variants, "border", "border")
      })}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(projectcss.all, sty.parent, {
          [sty.parent__border]: hasVariant(variants, "border", "border")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"headlineParent"}
          data-plasmic-override={overrides.headlineParent}
          hasGap={true}
          className={classNames(projectcss.all, sty.headlineParent, {
            [sty.headlineParent__border]: hasVariant(
              variants,
              "border",
              "border"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubheadParent"}
            data-plasmic-override={overrides.headlineSubheadParent}
            hasGap={true}
            className={classNames(projectcss.all, sty.headlineSubheadParent)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"headline"}
              data-plasmic-override={overrides.headline}
              hasGap={true}
              className={classNames(projectcss.all, sty.headline)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__n8Yg)}>
                <div className={classNames(projectcss.all, sty.freeBox__adCaL)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "Membership",
                    value: args.children,
                    className: classNames(sty.slotTargetChildren)
                  })}
                </div>
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"subhead"}
              data-plasmic-override={overrides.subhead}
              className={classNames(projectcss.all, sty.subhead)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "Your personal account membership plan details",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </div>

            <div
              data-plasmic-name={"badgeParent"}
              data-plasmic-override={overrides.badgeParent}
              className={classNames(projectcss.all, sty.badgeParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <ChipBadgeDisplay color={"brand"} type={"ghost"}>
                    {"Creator"}
                  </ChipBadgeDisplay>
                ),

                value: args.badge
              })}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"multiLineTextParent"}
            data-plasmic-override={overrides.multiLineTextParent}
            hasGap={true}
            className={classNames(projectcss.all, sty.multiLineTextParent)}
          >
            <div
              data-plasmic-name={"multiLineText"}
              data-plasmic-override={overrides.multiLineText}
              className={classNames(projectcss.all, sty.multiLineText)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "Our Creator and Maker member accounts are free forever. To get the most from the Intrepid community, for professional purposes, or to work with a team, get started by creating a company or contacting sales.",
                value: args.text,
                className: classNames(sty.slotTargetText, {
                  [sty.slotTargetText__border_link]:
                    hasVariant(variants, "border", "border") &&
                    hasVariant(variants, "link", "link")
                })
              })}
            </div>
          </p.Stack>
        </p.Stack>

        <div
          data-plasmic-name={"descriptionParent"}
          data-plasmic-override={overrides.descriptionParent}
          className={classNames(projectcss.all, sty.descriptionParent, {
            [sty.descriptionParent__border_link]:
              hasVariant(variants, "border", "border") &&
              hasVariant(variants, "link", "link"),
            [sty.descriptionParent__button_link]:
              hasVariant(variants, "button", "button") &&
              hasVariant(variants, "link", "link"),
            [sty.descriptionParent__link]: hasVariant(variants, "link", "link")
          })}
        >
          <div
            data-plasmic-name={"textLinkParent"}
            data-plasmic-override={overrides.textLinkParent}
            className={classNames(projectcss.all, sty.textLinkParent, {
              [sty.textLinkParent__border_link]:
                hasVariant(variants, "border", "border") &&
                hasVariant(variants, "link", "link"),
              [sty.textLinkParent__link]: hasVariant(variants, "link", "link")
            })}
          >
            <TextLinkUnderlinePrimary
              data-plasmic-name={"textLinkUnderlinePrimary"}
              data-plasmic-override={overrides.textLinkUnderlinePrimary}
              className={classNames(
                "__wab_instance",
                sty.textLinkUnderlinePrimary
              )}
              text={p.renderPlasmicSlot({
                defaultContents: "Contact sales",
                value: args.slot3
              })}
            />
          </div>

          {p.renderPlasmicSlot({
            defaultContents: true ? (
              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary__xvxaF
                )}
                size={"_140"}
              >
                {"Upgrade"}
              </ButtonPrimary>
            ) : null,
            value: args.slot4
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "badgeParent",
    "multiLineTextParent",
    "multiLineText",
    "descriptionParent",
    "textLinkParent",
    "textLinkUnderlinePrimary"
  ],

  parent: [
    "parent",
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "badgeParent",
    "multiLineTextParent",
    "multiLineText",
    "descriptionParent",
    "textLinkParent",
    "textLinkUnderlinePrimary"
  ],

  headlineParent: [
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "badgeParent",
    "multiLineTextParent",
    "multiLineText"
  ],

  headlineSubheadParent: [
    "headlineSubheadParent",
    "headline",
    "subhead",
    "badgeParent"
  ],

  headline: ["headline"],
  subhead: ["subhead"],
  badgeParent: ["badgeParent"],
  multiLineTextParent: ["multiLineTextParent", "multiLineText"],
  multiLineText: ["multiLineText"],
  descriptionParent: [
    "descriptionParent",
    "textLinkParent",
    "textLinkUnderlinePrimary"
  ],

  textLinkParent: ["textLinkParent", "textLinkUnderlinePrimary"],
  textLinkUnderlinePrimary: ["textLinkUnderlinePrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputFormCardMembership__ArgProps,
      internalVariantPropNames: PlasmicInputFormCardMembership__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicInputFormCardMembership__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputFormCardMembership";
  } else {
    func.displayName = `PlasmicInputFormCardMembership.${nodeName}`;
  }
  return func;
}

export const PlasmicInputFormCardMembership = Object.assign(
  // Top-level PlasmicInputFormCardMembership renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    headlineParent: makeNodeComponent("headlineParent"),
    headlineSubheadParent: makeNodeComponent("headlineSubheadParent"),
    headline: makeNodeComponent("headline"),
    subhead: makeNodeComponent("subhead"),
    badgeParent: makeNodeComponent("badgeParent"),
    multiLineTextParent: makeNodeComponent("multiLineTextParent"),
    multiLineText: makeNodeComponent("multiLineText"),
    descriptionParent: makeNodeComponent("descriptionParent"),
    textLinkParent: makeNodeComponent("textLinkParent"),
    textLinkUnderlinePrimary: makeNodeComponent("textLinkUnderlinePrimary"),
    // Metadata about props expected for PlasmicInputFormCardMembership
    internalVariantProps: PlasmicInputFormCardMembership__VariantProps,
    internalArgProps: PlasmicInputFormCardMembership__ArgProps
  }
);

export default PlasmicInputFormCardMembership;
/* prettier-ignore-end */
