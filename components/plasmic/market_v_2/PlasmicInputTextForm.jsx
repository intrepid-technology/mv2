// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Hp_zc6XLro
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicInputTextForm.module.css"; // plasmic-import: Hp_zc6XLro/css

export const PlasmicInputTextForm__VariantProps = new Array(
  "label",
  "subhead",
  "type",
  "width",
  "height"
);

export const PlasmicInputTextForm__ArgProps = new Array(
  "labelHeadline",
  "description"
);

function PlasmicInputTextForm__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__label]: hasVariant(variants, "label", "label"),
        [sty.root__width__180]: hasVariant(variants, "width", "_180"),
        [sty.root__width__360]: hasVariant(variants, "width", "_360"),
        [sty.root__width__380]: hasVariant(variants, "width", "_380")
      })}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__label]: hasVariant(variants, "label", "label"),
          [sty.parent__width__120]: hasVariant(variants, "width", "_120"),
          [sty.parent__width__144]: hasVariant(variants, "width", "_144"),
          [sty.parent__width__160]: hasVariant(variants, "width", "_160"),
          [sty.parent__width__180]: hasVariant(variants, "width", "_180"),
          [sty.parent__width__270]: hasVariant(variants, "width", "_270"),
          [sty.parent__width__360]: hasVariant(variants, "width", "_360"),
          [sty.parent__width__380]: hasVariant(variants, "width", "_380"),
          [sty.parent__width__540]: hasVariant(variants, "width", "_540"),
          [sty.parent__width__720]: hasVariant(variants, "width", "_720")
        })}
      >
        <div
          data-plasmic-name={"labelHeadlineParent"}
          data-plasmic-override={overrides.labelHeadlineParent}
          className={classNames(defaultcss.all, sty.labelHeadlineParent, {
            [sty.labelHeadlineParent__label]: hasVariant(
              variants,
              "label",
              "label"
            ),

            [sty.labelHeadlineParent__subhead]: hasVariant(
              variants,
              "subhead",
              "subhead"
            ),

            [sty.labelHeadlineParent__width__120]: hasVariant(
              variants,
              "width",
              "_120"
            ),

            [sty.labelHeadlineParent__width__180]: hasVariant(
              variants,
              "width",
              "_180"
            ),

            [sty.labelHeadlineParent__width__270]: hasVariant(
              variants,
              "width",
              "_270"
            ),

            [sty.labelHeadlineParent__width__380]: hasVariant(
              variants,
              "width",
              "_380"
            ),

            [sty.labelHeadlineParent__width__540]: hasVariant(
              variants,
              "width",
              "_540"
            )
          })}
        >
          {(hasVariant(variants, "label", "label") ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: "Headline",
                value: args.labelHeadline,
                className: classNames(sty.slotTargetLabelHeadline, {
                  [sty.slotTargetLabelHeadline__label]: hasVariant(
                    variants,
                    "label",
                    "label"
                  ),

                  [sty.slotTargetLabelHeadline__width__180]: hasVariant(
                    variants,
                    "width",
                    "_180"
                  ),

                  [sty.slotTargetLabelHeadline__width__270]: hasVariant(
                    variants,
                    "width",
                    "_270"
                  ),

                  [sty.slotTargetLabelHeadline__width__380]: hasVariant(
                    variants,
                    "width",
                    "_380"
                  ),

                  [sty.slotTargetLabelHeadline__width__540]: hasVariant(
                    variants,
                    "width",
                    "_540"
                  ),

                  [sty.slotTargetLabelHeadline__width__720]: hasVariant(
                    variants,
                    "width",
                    "_720"
                  )
                })
              })
            : null}
        </div>

        <div
          data-plasmic-name={"inputParent"}
          data-plasmic-override={overrides.inputParent}
          className={classNames(defaultcss.all, sty.inputParent, {
            [sty.inputParent__height__48]: hasVariant(
              variants,
              "height",
              "_48"
            ),

            [sty.inputParent__width__120]: hasVariant(
              variants,
              "width",
              "_120"
            ),

            [sty.inputParent__width__180]: hasVariant(
              variants,
              "width",
              "_180"
            ),

            [sty.inputParent__width__270]: hasVariant(
              variants,
              "width",
              "_270"
            ),

            [sty.inputParent__width__360]: hasVariant(
              variants,
              "width",
              "_360"
            ),

            [sty.inputParent__width__380]: hasVariant(variants, "width", "_380")
          })}
        >
          {(triggers.hover_root ? true : true) ? (
            <input
              data-plasmic-name={"textbox"}
              data-plasmic-override={overrides.textbox}
              className={classNames(defaultcss.input, sty.textbox, {
                [sty.textbox__height__32]: hasVariant(
                  variants,
                  "height",
                  "_32"
                ),

                [sty.textbox__height__36]: hasVariant(
                  variants,
                  "height",
                  "_36"
                ),

                [sty.textbox__height__40]: hasVariant(
                  variants,
                  "height",
                  "_40"
                ),

                [sty.textbox__height__48]: hasVariant(
                  variants,
                  "height",
                  "_48"
                ),

                [sty.textbox__type_primary]: hasVariant(
                  variants,
                  "type",
                  "primary"
                ),

                [sty.textbox__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                ),

                [sty.textbox__width__720]: hasVariant(variants, "width", "_720")
              })}
              placeholder={
                triggers.hover_root
                  ? "Enter text"
                  : hasVariant(variants, "type", "primary")
                  ? ""
                  : ""
              }
              size={1}
              type={"text"}
              value={triggers.hover_root ? "" : ""}
            />
          ) : null}
        </div>

        {(
          hasVariant(variants, "subhead", "subhead")
            ? false
            : hasVariant(variants, "label", "label")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"descriptionParent"}
            data-plasmic-override={overrides.descriptionParent}
            className={classNames(defaultcss.all, sty.descriptionParent, {
              [sty.descriptionParent__label]: hasVariant(
                variants,
                "label",
                "label"
              ),

              [sty.descriptionParent__subhead]: hasVariant(
                variants,
                "subhead",
                "subhead"
              ),

              [sty.descriptionParent__width__120]: hasVariant(
                variants,
                "width",
                "_120"
              ),

              [sty.descriptionParent__width__180]: hasVariant(
                variants,
                "width",
                "_180"
              ),

              [sty.descriptionParent__width__270]: hasVariant(
                variants,
                "width",
                "_270"
              ),

              [sty.descriptionParent__width__380]: hasVariant(
                variants,
                "width",
                "_380"
              ),

              [sty.descriptionParent__width__540]: hasVariant(
                variants,
                "width",
                "_540"
              )
            })}
          >
            {(hasVariant(variants, "label", "label") ? true : true)
              ? p.renderPlasmicSlot({
                  defaultContents: "Description",
                  value: args.description,
                  className: classNames(sty.slotTargetDescription, {
                    [sty.slotTargetDescription__label]: hasVariant(
                      variants,
                      "label",
                      "label"
                    ),

                    [sty.slotTargetDescription__width__180]: hasVariant(
                      variants,
                      "width",
                      "_180"
                    ),

                    [sty.slotTargetDescription__width__270]: hasVariant(
                      variants,
                      "width",
                      "_270"
                    ),

                    [sty.slotTargetDescription__width__380]: hasVariant(
                      variants,
                      "width",
                      "_380"
                    ),

                    [sty.slotTargetDescription__width__540]: hasVariant(
                      variants,
                      "width",
                      "_540"
                    ),

                    [sty.slotTargetDescription__width__720]: hasVariant(
                      variants,
                      "width",
                      "_720"
                    )
                  })
                })
              : null}
          </div>
        ) : null}
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "labelHeadlineParent",
    "inputParent",
    "textbox",
    "descriptionParent"
  ],

  parent: [
    "parent",
    "labelHeadlineParent",
    "inputParent",
    "textbox",
    "descriptionParent"
  ],

  labelHeadlineParent: ["labelHeadlineParent"],
  inputParent: ["inputParent", "textbox"],
  textbox: ["textbox"],
  descriptionParent: ["descriptionParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputTextForm__ArgProps,
      internalVariantPropNames: PlasmicInputTextForm__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicInputTextForm__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputTextForm";
  } else {
    func.displayName = `PlasmicInputTextForm.${nodeName}`;
  }
  return func;
}

export const PlasmicInputTextForm = Object.assign(
  // Top-level PlasmicInputTextForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    labelHeadlineParent: makeNodeComponent("labelHeadlineParent"),
    inputParent: makeNodeComponent("inputParent"),
    textbox: makeNodeComponent("textbox"),
    descriptionParent: makeNodeComponent("descriptionParent"),
    // Metadata about props expected for PlasmicInputTextForm
    internalVariantProps: PlasmicInputTextForm__VariantProps,
    internalArgProps: PlasmicInputTextForm__ArgProps
  }
);

export default PlasmicInputTextForm;
/* prettier-ignore-end */
