// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: F_iWPxEqO6X
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatar from "../../UserAvatar"; // plasmic-import: KmwWxjrE8L/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicElementMemberProfileConnections.module.css"; // plasmic-import: F_iWPxEqO6X/css

export const PlasmicElementMemberProfileConnections__VariantProps = new Array();

export const PlasmicElementMemberProfileConnections__ArgProps = new Array();

function PlasmicElementMemberProfileConnections__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <div
          data-plasmic-name={"connectionsHealine"}
          data-plasmic-override={overrides.connectionsHealine}
          className={classNames(defaultcss.all, sty.connectionsHealine)}
        >
          <div
            data-plasmic-name={"connectionsHeadlineText"}
            data-plasmic-override={overrides.connectionsHeadlineText}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.connectionsHeadlineText
            )}
          >
            {hasVariant(globalVariants, "screen", "desktop")
              ? "Connections"
              : "Connections"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"memberConnectionsParent"}
          data-plasmic-override={overrides.memberConnectionsParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.memberConnectionsParent)}
        >
          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__sbwC6)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__iDk2)}
                role={"img"}
                src={"/plasmic/market_v_2/images/collinHbs2014Jpg.jpeg"}
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar___00A20)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__qdWwr)}
                role={"img"}
                src={"/plasmic/market_v_2/images/memberHero11Png.jpeg"}
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__vwX2N)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__rwAvc)}
                role={"img"}
                src={"/plasmic/market_v_2/images/peopleCreative3Jpg.jpeg"}
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__nopbF)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img___0Ehi8)}
                role={"img"}
                src={"/plasmic/market_v_2/images/image32.png"}
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar___9S2Ix)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__epUpT)}
                role={"img"}
                src={
                  "/plasmic/market_v_2/images/brookeCagleW7Pk4FfrSy0Unsplashjpg.jpeg"
                }
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__q6Iwb)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__ydvV2)}
                role={"img"}
                src={
                  "/plasmic/market_v_2/images/charlesDeluvioKVg2Dqtak7CUnsplashjpg.jpeg"
                }
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__ul2Xw)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__lxX9L)}
                role={"img"}
                src={
                  "/plasmic/market_v_2/images/cesarRinconXhVpWcr5GrQUnsplashjpg.jpeg"
                }
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__fflUh)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__nLx6Q)}
                role={"img"}
                src={
                  "/plasmic/market_v_2/images/giftHabeshawZmSk6Is2YQ4Unsplashjpg.jpeg"
                }
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__iwNAj)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__lBZxJ)}
                role={"img"}
                src={
                  "/plasmic/market_v_2/images/hustWilsonWyDr1Kfs23YUnsplashjpg.jpeg"
                }
              />
            }
            size={"_48"}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__yVaFc)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__gg49Z)}
                role={"img"}
                src={
                  "/plasmic/market_v_2/images/jonGroganKUdeP8QQMgUnsplashjpg.jpeg"
                }
              />
            }
            size={"_48"}
          />
        </p.Stack>

        <div
          data-plasmic-name={"linkConnectionsViewAllParent"}
          data-plasmic-override={overrides.linkConnectionsViewAllParent}
          className={classNames(
            defaultcss.all,
            sty.linkConnectionsViewAllParent
          )}
        >
          <p.PlasmicLink
            data-plasmic-name={"linkConnectionsViewAll"}
            data-plasmic-override={overrides.linkConnectionsViewAll}
            className={classNames(defaultcss.all, sty.linkConnectionsViewAll)}
            component={Link}
            platform={"nextjs"}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox
              )}
            >
              {"View all connections"}
            </div>
          </p.PlasmicLink>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "connectionsHealine",
    "connectionsHeadlineText",
    "memberConnectionsParent",
    "linkConnectionsViewAllParent",
    "linkConnectionsViewAll",
    "freeBox"
  ],

  parent: [
    "parent",
    "connectionsHealine",
    "connectionsHeadlineText",
    "memberConnectionsParent",
    "linkConnectionsViewAllParent",
    "linkConnectionsViewAll",
    "freeBox"
  ],

  connectionsHealine: ["connectionsHealine", "connectionsHeadlineText"],
  connectionsHeadlineText: ["connectionsHeadlineText"],
  memberConnectionsParent: ["memberConnectionsParent"],
  linkConnectionsViewAllParent: [
    "linkConnectionsViewAllParent",
    "linkConnectionsViewAll",
    "freeBox"
  ],

  linkConnectionsViewAll: ["linkConnectionsViewAll", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementMemberProfileConnections__ArgProps,
      internalVariantPropNames:
        PlasmicElementMemberProfileConnections__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicElementMemberProfileConnections__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementMemberProfileConnections";
  } else {
    func.displayName = `PlasmicElementMemberProfileConnections.${nodeName}`;
  }
  return func;
}

export const PlasmicElementMemberProfileConnections = Object.assign(
  // Top-level PlasmicElementMemberProfileConnections renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    connectionsHealine: makeNodeComponent("connectionsHealine"),
    connectionsHeadlineText: makeNodeComponent("connectionsHeadlineText"),
    memberConnectionsParent: makeNodeComponent("memberConnectionsParent"),
    linkConnectionsViewAllParent: makeNodeComponent(
      "linkConnectionsViewAllParent"
    ),

    linkConnectionsViewAll: makeNodeComponent("linkConnectionsViewAll"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicElementMemberProfileConnections
    internalVariantProps: PlasmicElementMemberProfileConnections__VariantProps,
    internalArgProps: PlasmicElementMemberProfileConnections__ArgProps
  }
);

export default PlasmicElementMemberProfileConnections;
/* prettier-ignore-end */
