// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 0x12FzmUo9P
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import PanelHeaderDisplayPartner from "../../PanelHeaderDisplayPartner"; // plasmic-import: yNsN5_wXEjo/component
import PanelButtonHeader from "../../PanelButtonHeader"; // plasmic-import: l8x-1W9kbZ/component
import PanelCommunityScores from "../../PanelCommunityScores"; // plasmic-import: JsYhtV8o3HC/component
import PanelListingScores from "../../PanelListingScores"; // plasmic-import: mNo76Uc_Jdn/component
import PanelPartnerSectionMarket from "../../PanelPartnerSectionMarket"; // plasmic-import: i3ai6jIm4VK/component
import PanelPartnerSectionPartner from "../../PanelPartnerSectionPartner"; // plasmic-import: ESb2G2fq56P/component
import PanelPartnerSectionAccount from "../../PanelPartnerSectionAccount"; // plasmic-import: frbDg7XY-m/component
import PanelFooter from "../../PanelFooter"; // plasmic-import: y532Y0sDIf/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPanelPartner.module.css"; // plasmic-import: 0x12FzmUo9P/css

export const PlasmicPanelPartner__VariantProps = new Array();

export const PlasmicPanelPartner__ArgProps = new Array();

function PlasmicPanelPartner__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"headerPanelMainPartner"}
        data-plasmic-override={overrides.headerPanelMainPartner}
        className={classNames(defaultcss.all, sty.headerPanelMainPartner)}
      >
        <PanelHeaderDisplayPartner
          data-plasmic-name={"partnerHeaderDisplay"}
          data-plasmic-override={overrides.partnerHeaderDisplay}
          className={classNames("__wab_instance", sty.partnerHeaderDisplay)}
        />

        <PanelButtonHeader
          data-plasmic-name={"partnerButtonHeader"}
          data-plasmic-override={overrides.partnerButtonHeader}
          className={classNames("__wab_instance", sty.partnerButtonHeader)}
          user={"partner"}
        />
      </div>

      <PanelCommunityScores
        data-plasmic-name={"partnerCommunityScores"}
        data-plasmic-override={overrides.partnerCommunityScores}
        className={classNames("__wab_instance", sty.partnerCommunityScores)}
        user={"partner"}
      />

      <PanelListingScores
        data-plasmic-name={"partnerListingScores"}
        data-plasmic-override={overrides.partnerListingScores}
        className={classNames("__wab_instance", sty.partnerListingScores)}
      />

      <PanelPartnerSectionMarket
        data-plasmic-name={"partnerMarket"}
        data-plasmic-override={overrides.partnerMarket}
        className={classNames("__wab_instance", sty.partnerMarket)}
      />

      <PanelPartnerSectionPartner
        data-plasmic-name={"partnerProfile"}
        data-plasmic-override={overrides.partnerProfile}
        className={classNames("__wab_instance", sty.partnerProfile)}
      />

      <PanelPartnerSectionAccount
        data-plasmic-name={"partnerAccount"}
        data-plasmic-override={overrides.partnerAccount}
        className={classNames("__wab_instance", sty.partnerAccount)}
      />

      <PanelFooter
        data-plasmic-name={"panelPartnerFooter"}
        data-plasmic-override={overrides.panelPartnerFooter}
        className={classNames("__wab_instance", sty.panelPartnerFooter)}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerPanelMainPartner",
    "partnerHeaderDisplay",
    "partnerButtonHeader",
    "partnerCommunityScores",
    "partnerListingScores",
    "partnerMarket",
    "partnerProfile",
    "partnerAccount",
    "panelPartnerFooter"
  ],

  headerPanelMainPartner: [
    "headerPanelMainPartner",
    "partnerHeaderDisplay",
    "partnerButtonHeader"
  ],

  partnerHeaderDisplay: ["partnerHeaderDisplay"],
  partnerButtonHeader: ["partnerButtonHeader"],
  partnerCommunityScores: ["partnerCommunityScores"],
  partnerListingScores: ["partnerListingScores"],
  partnerMarket: ["partnerMarket"],
  partnerProfile: ["partnerProfile"],
  partnerAccount: ["partnerAccount"],
  panelPartnerFooter: ["panelPartnerFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelPartner__ArgProps,
      internalVariantPropNames: PlasmicPanelPartner__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPanelPartner__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelPartner";
  } else {
    func.displayName = `PlasmicPanelPartner.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelPartner = Object.assign(
  // Top-level PlasmicPanelPartner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerPanelMainPartner: makeNodeComponent("headerPanelMainPartner"),
    partnerHeaderDisplay: makeNodeComponent("partnerHeaderDisplay"),
    partnerButtonHeader: makeNodeComponent("partnerButtonHeader"),
    partnerCommunityScores: makeNodeComponent("partnerCommunityScores"),
    partnerListingScores: makeNodeComponent("partnerListingScores"),
    partnerMarket: makeNodeComponent("partnerMarket"),
    partnerProfile: makeNodeComponent("partnerProfile"),
    partnerAccount: makeNodeComponent("partnerAccount"),
    panelPartnerFooter: makeNodeComponent("panelPartnerFooter"),
    // Metadata about props expected for PlasmicPanelPartner
    internalVariantProps: PlasmicPanelPartner__VariantProps,
    internalArgProps: PlasmicPanelPartner__ArgProps
  }
);

export default PlasmicPanelPartner;
/* prettier-ignore-end */
