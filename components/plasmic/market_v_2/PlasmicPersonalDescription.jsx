// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: qyQq7MXvr3e
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputFormCardPrimary from "../../InputFormCardPrimary"; // plasmic-import: 7K8uSXduxTH/component
import InputFormCardEmailSearchBadge from "../../InputFormCardEmailSearchBadge"; // plasmic-import: 0JndNhJNnle/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPersonalDescription.module.css"; // plasmic-import: qyQq7MXvr3e/css

export const PlasmicPersonalDescription__VariantProps = new Array();

export const PlasmicPersonalDescription__ArgProps = new Array();

function PlasmicPersonalDescription__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__i8Yd2)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box___2Mkva)}
            >
              <InputFormCardPrimary
                data-plasmic-name={"personalDescriptionCard"}
                data-plasmic-override={overrides.personalDescriptionCard}
                button={"button"}
                className={classNames(
                  "__wab_instance",
                  sty.personalDescriptionCard
                )}
                description={"150 characters maximum."}
                headline={"Description"}
                multiLineText={"multiLineText"}
                subDescription={"subDescription"}
                subHead={"Please describe yourself and your interests. "}
              >
                <textarea
                  data-plasmic-name={"textarea"}
                  data-plasmic-override={overrides.textarea}
                  className={classNames(defaultcss.textarea, sty.textarea)}
                  placeholder={"Describe yourself...."}
                  value={""}
                />
              </InputFormCardPrimary>

              <InputFormCardPrimary
                data-plasmic-name={"personalJobCard"}
                data-plasmic-override={overrides.personalJobCard}
                button={"button"}
                className={classNames("__wab_instance", sty.personalJobCard)}
                description={"Only shown to other members and followers."}
                headline={"Industry & job"}
                inputType={"dropdownText"}
                label={"Industry"}
                slotLabel={"Job Title"}
                subDescription={"subDescription"}
                subHead={
                  "Please enter the industry you work in and your role in your company."
                }
              />

              <InputFormCardPrimary
                data-plasmic-name={"personalLanguageCard"}
                data-plasmic-override={overrides.personalLanguageCard}
                button={"button"}
                className={classNames(
                  "__wab_instance",
                  sty.personalLanguageCard
                )}
                description={"Helps with matching you to the right members "}
                descriptionA={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__bm2Ei
                    )}
                  >
                    {"Description"}
                  </div>
                }
                descriptionB={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__jce4D
                    )}
                  >
                    {"Description"}
                  </div>
                }
                headline={"Languages"}
                inputType={"dropdownDropdown"}
                subDescription={"subDescription"}
                subHead={"Enter the languages you speak"}
              />

              <InputFormCardEmailSearchBadge
                data-plasmic-name={"personalSkillsCard"}
                data-plasmic-override={overrides.personalSkillsCard}
                button={"button"}
                className={classNames("__wab_instance", sty.personalSkillsCard)}
                description={"Add up to 8 skills or strengths"}
                email={
                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox)}
                    placeholder={"search for skills.."}
                    size={1}
                    type={"text"}
                    value={""}
                  />
                }
                headline={"Skills"}
                search={"search"}
                subDescription={"subDescription"}
                subHead={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__rlmGz
                    )}
                  >
                    {
                      "Search and enter your skills and strengths, separated by commas"
                    }
                  </div>
                }
              />
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "personalDescriptionCard",
    "textarea",
    "personalJobCard",
    "personalLanguageCard",
    "personalSkillsCard",
    "textbox"
  ],

  personalDescriptionCard: ["personalDescriptionCard", "textarea"],
  textarea: ["textarea"],
  personalJobCard: ["personalJobCard"],
  personalLanguageCard: ["personalLanguageCard"],
  personalSkillsCard: ["personalSkillsCard", "textbox"],
  textbox: ["textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPersonalDescription__ArgProps,
      internalVariantPropNames: PlasmicPersonalDescription__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPersonalDescription__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPersonalDescription";
  } else {
    func.displayName = `PlasmicPersonalDescription.${nodeName}`;
  }
  return func;
}

export const PlasmicPersonalDescription = Object.assign(
  // Top-level PlasmicPersonalDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    personalDescriptionCard: makeNodeComponent("personalDescriptionCard"),
    textarea: makeNodeComponent("textarea"),
    personalJobCard: makeNodeComponent("personalJobCard"),
    personalLanguageCard: makeNodeComponent("personalLanguageCard"),
    personalSkillsCard: makeNodeComponent("personalSkillsCard"),
    textbox: makeNodeComponent("textbox"),
    // Metadata about props expected for PlasmicPersonalDescription
    internalVariantProps: PlasmicPersonalDescription__VariantProps,
    internalArgProps: PlasmicPersonalDescription__ArgProps
  }
);

export default PlasmicPersonalDescription;
/* prettier-ignore-end */
