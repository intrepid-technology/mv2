// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: V-SFFoHu_mr
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicInputTextRich.module.css"; // plasmic-import: V-SFFoHu_mr/css

export const PlasmicInputTextRich__VariantProps = new Array(
  "headline",
  "description",
  "size"
);

export const PlasmicInputTextRich__ArgProps = new Array("children", "slot");

function PlasmicInputTextRich__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__270]: hasVariant(variants, "size", "_270"),
        [sty.root__size__540]: hasVariant(variants, "size", "_540")
      })}
    >
      {(hasVariant(variants, "headline", "headline") ? false : true) ? (
        <div
          className={classNames(defaultcss.all, sty.box__hg1Ev, {
            [sty.box__description__hg1Ev4Muag]: hasVariant(
              variants,
              "description",
              "description"
            ),

            [sty.box__headline__hg1EvffCdm]: hasVariant(
              variants,
              "headline",
              "headline"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Sub Headline",
            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__headline]: hasVariant(
                variants,
                "headline",
                "headline"
              )
            })
          })}
        </div>
      ) : null}

      <textarea
        data-plasmic-name={"textarea"}
        data-plasmic-override={overrides.textarea}
        className={classNames(defaultcss.textarea, sty.textarea, {
          [sty.textarea__size__270]: hasVariant(variants, "size", "_270"),
          [sty.textarea__size__540]: hasVariant(variants, "size", "_540")
        })}
        placeholder={"Describe"}
        value={""}
      />

      {(hasVariant(variants, "description", "description") ? false : true) ? (
        <div
          className={classNames(defaultcss.all, sty.box__kpLTn, {
            [sty.box__description__kpLTn4Muag]: hasVariant(
              variants,
              "description",
              "description"
            )
          })}
        >
          <div
            className={classNames(defaultcss.all, sty.box__xspKr, {
              [sty.box__description__xspKr4Muag]: hasVariant(
                variants,
                "description",
                "description"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Sub body",
              value: args.slot,
              className: classNames(sty.slotSlot, {
                [sty.slotSlot__description]: hasVariant(
                  variants,
                  "description",
                  "description"
                )
              })
            })}
          </div>
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "textarea"],
  textarea: ["textarea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputTextRich__ArgProps,
      internalVariantPropNames: PlasmicInputTextRich__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicInputTextRich__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputTextRich";
  } else {
    func.displayName = `PlasmicInputTextRich.${nodeName}`;
  }
  return func;
}

export const PlasmicInputTextRich = Object.assign(
  // Top-level PlasmicInputTextRich renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textarea: makeNodeComponent("textarea"),
    // Metadata about props expected for PlasmicInputTextRich
    internalVariantProps: PlasmicInputTextRich__VariantProps,
    internalArgProps: PlasmicInputTextRich__ArgProps
  }
);

export default PlasmicInputTextRich;
/* prettier-ignore-end */
