// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: W3C_J23Z38
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicChipCategoryHeader.module.css"; // plasmic-import: W3C_J23Z38/css
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: alaRRmprOn/icon

export const PlasmicChipCategoryHeader__VariantProps = new Array(
  "color",
  "size"
);

export const PlasmicChipCategoryHeader__ArgProps = new Array(
  "children",
  "slot",
  "target"
);

function PlasmicChipCategoryHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        sty.root,
        {
          [sty.rootcolor_bgBlueLight]: hasVariant(
            variants,
            "color",
            "bgBlueLight"
          ),

          [sty.rootcolor_bgBrandLight]: hasVariant(
            variants,
            "color",
            "bgBrandLight"
          ),

          [sty.rootcolor_bgDarkA]: hasVariant(variants, "color", "bgDarkA"),
          [sty.rootcolor_bgLightB]: hasVariant(variants, "color", "bgLightB"),
          [sty.rootcolor_bgMagentaLight]: hasVariant(
            variants,
            "color",
            "bgMagentaLight"
          ),

          [sty.rootcolor_bgMagentaLight_size__180]:
            hasVariant(variants, "color", "bgMagentaLight") &&
            hasVariant(variants, "size", "_180"),
          [sty.rootcolor_bgPinkLight]: hasVariant(
            variants,
            "color",
            "bgPinkLight"
          ),

          [sty.rootsize__180]: hasVariant(variants, "size", "_180"),
          [sty.rootsize__270]: hasVariant(variants, "size", "_270"),
          [sty.rootsize__360]: hasVariant(variants, "size", "_360")
        }
      )}
      component={Link}
      platform={"nextjs"}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__uhVUx, {
          [sty.freeBoxsize__180__uhVUxQnr2J]: hasVariant(
            variants,
            "size",
            "_180"
          ),

          [sty.freeBoxsize__360__uhVUxfWtpd]: hasVariant(
            variants,
            "size",
            "_360"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__eEq7)}
              role={"img"}
            />
          ),

          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolor_bgDarkA]: hasVariant(
              variants,
              "color",
              "bgDarkA"
            ),

            [sty.slotTargetChildrencolor_bgLightB]: hasVariant(
              variants,
              "color",
              "bgLightB"
            ),

            [sty.slotTargetChildrensize__180]: hasVariant(
              variants,
              "size",
              "_180"
            ),

            [sty.slotTargetChildrensize__360]: hasVariant(
              variants,
              "size",
              "_360"
            )
          })
        })}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__uu7Pz, {
          [sty.freeBoxsize__360__uu7PzfWtpd]: hasVariant(
            variants,
            "size",
            "_360"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__qlHli, {
            [sty.freeBoxcolor_bgDarkA__qlHli0VGYe]: hasVariant(
              variants,
              "color",
              "bgDarkA"
            ),

            [sty.freeBoxsize__360__qlHlIfWtpd]: hasVariant(
              variants,
              "size",
              "_360"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Headline category",
            value: args.slot,
            className: classNames(sty.slotTargetSlot, {
              [sty.slotTargetSlotcolor_bgDarkA]: hasVariant(
                variants,
                "color",
                "bgDarkA"
              ),

              [sty.slotTargetSlotcolor_bgLightB]: hasVariant(
                variants,
                "color",
                "bgLightB"
              ),

              [sty.slotTargetSlotsize__180]: hasVariant(
                variants,
                "size",
                "_180"
              ),

              [sty.slotTargetSlotsize__270]: hasVariant(
                variants,
                "size",
                "_270"
              ),

              [sty.slotTargetSlotsize__360]: hasVariant(
                variants,
                "size",
                "_360"
              )
            })
          })}
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChipCategoryHeader__ArgProps,
      internalVariantPropNames: PlasmicChipCategoryHeader__VariantProps
    });

    return PlasmicChipCategoryHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChipCategoryHeader";
  } else {
    func.displayName = `PlasmicChipCategoryHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicChipCategoryHeader = Object.assign(
  // Top-level PlasmicChipCategoryHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicChipCategoryHeader
    internalVariantProps: PlasmicChipCategoryHeader__VariantProps,
    internalArgProps: PlasmicChipCategoryHeader__ArgProps
  }
);

export default PlasmicChipCategoryHeader;
/* prettier-ignore-end */
