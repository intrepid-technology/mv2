// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: GbL35coVdJ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicChipSearchFilterButton.module.css"; // plasmic-import: GbL35coVdJ/css

export const PlasmicChipSearchFilterButton__VariantProps = new Array(
  "trigger",
  "type",
  "color",
  "size"
);

export const PlasmicChipSearchFilterButton__ArgProps = new Array(
  "text",
  "target"
);

function PlasmicChipSearchFilterButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <button
      data-plasmic-name={"buttonTrigger"}
      data-plasmic-override={overrides.buttonTrigger}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.buttonTrigger,
        {
          [sty.buttonTrigger__trigger_disabled]: hasVariant(
            variants,
            "trigger",
            "disabled"
          )
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Search",
        value: args.text,
        className: classNames(sty.slotTargetText, {
          [sty.slotTargetText__trigger_disabled]: hasVariant(
            variants,
            "trigger",
            "disabled"
          )
        })
      })}
    </button>
  );
}

const PlasmicDescendants = {
  buttonTrigger: ["buttonTrigger"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChipSearchFilterButton__ArgProps,
      internalVariantPropNames: PlasmicChipSearchFilterButton__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicChipSearchFilterButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "buttonTrigger") {
    func.displayName = "PlasmicChipSearchFilterButton";
  } else {
    func.displayName = `PlasmicChipSearchFilterButton.${nodeName}`;
  }
  return func;
}

export const PlasmicChipSearchFilterButton = Object.assign(
  // Top-level PlasmicChipSearchFilterButton renders the root element
  makeNodeComponent("buttonTrigger"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicChipSearchFilterButton
    internalVariantProps: PlasmicChipSearchFilterButton__VariantProps,
    internalArgProps: PlasmicChipSearchFilterButton__ArgProps
  }
);

export default PlasmicChipSearchFilterButton;
/* prettier-ignore-end */
