// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: UHEuX3OG9AY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ElementCheckoutHeadlineTotal from "../../ElementCheckoutHeadlineTotal"; // plasmic-import: YO302UKdvF/component
import ElementCheckoutSubHeadlineTotal from "../../ElementCheckoutSubHeadlineTotal"; // plasmic-import: ccLKsFE6cR/component
import ElementCheckoutListItemUnitInterval from "../../ElementCheckoutListItemUnitInterval"; // plasmic-import: HED2s-i8gO9/component
import TextFormInput from "../../TextFormInput"; // plasmic-import: Hp_zc6XLro/component
import ElementCheckoutPromotionPercentTotalValue from "../../ElementCheckoutPromotionPercentTotalValue"; // plasmic-import: v-uWcZLOPTn/component
import ElementCheckoutTotalHeadline from "../../ElementCheckoutTotalHeadline"; // plasmic-import: gmFIW2AzJW/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCheckoutServiceListing.module.css"; // plasmic-import: UHEuX3OG9AY/css
import CellDividerIcon from "./icons/PlasmicIcon__CellDivider"; // plasmic-import: n34VWl8XDZ4/icon

export const PlasmicCheckoutServiceListing__VariantProps = new Array();

export const PlasmicCheckoutServiceListing__ArgProps = new Array();

function PlasmicCheckoutServiceListing__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"checkoutHeadlineText"}
        data-plasmic-override={overrides.checkoutHeadlineText}
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.checkoutHeadlineText
        )}
      >
        {"Checkout"}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"checkoutSubTotalListItemBlock"}
        data-plasmic-override={overrides.checkoutSubTotalListItemBlock}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          sty.checkoutSubTotalListItemBlock
        )}
      >
        <ElementCheckoutHeadlineTotal
          data-plasmic-name={"elementCheckoutHeadlineTotal"}
          data-plasmic-override={overrides.elementCheckoutHeadlineTotal}
          className={classNames(
            "__wab_instance",
            sty.elementCheckoutHeadlineTotal
          )}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"checkoutListItems"}
          data-plasmic-override={overrides.checkoutListItems}
          hasGap={true}
          className={classNames(defaultcss.all, sty.checkoutListItems)}
        >
          <ElementCheckoutSubHeadlineTotal
            data-plasmic-name={"elementCheckoutSubHeadlineTotal"}
            data-plasmic-override={overrides.elementCheckoutSubHeadlineTotal}
            className={classNames(
              "__wab_instance",
              sty.elementCheckoutSubHeadlineTotal
            )}
          />

          <ElementCheckoutListItemUnitInterval
            data-plasmic-name={"elementCheckoutListItemUnitInterval"}
            data-plasmic-override={
              overrides.elementCheckoutListItemUnitInterval
            }
            className={classNames(
              "__wab_instance",
              sty.elementCheckoutListItemUnitInterval
            )}
          />

          <div
            data-plasmic-name={"placementHeadline"}
            data-plasmic-override={overrides.placementHeadline}
            className={classNames(defaultcss.all, sty.placementHeadline)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__d20Mo)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__hnkjh
                )}
              >
                {"Placement"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__ulvEc)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__mRg2O
                )}
              >
                {"$"}
              </div>

              <div className={classNames(defaultcss.all, sty.box__w6Xdr)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__n2Tbz
                  )}
                >
                  {"0.00"}
                </div>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(defaultcss.all, sty.box__mj7GH)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__fbCfP)}
            >
              <div className={classNames(defaultcss.all, sty.box__zplQa)}>
                <div className={classNames(defaultcss.all, sty.box__nCvGr)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__nNdhn
                    )}
                  >
                    {"1"}
                  </div>
                </div>
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__c2ZN7
                )}
              >
                {"Priority"}
              </div>

              <div className={classNames(defaultcss.all, sty.box__xzFrb)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__rdiZ6
                  )}
                >
                  {"x"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__lTtnn)}
              >
                <div className={classNames(defaultcss.all, sty.box__ayWyh)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___4Olga
                    )}
                  >
                    {"Month"}
                  </div>
                </div>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__ioo18)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__rYWv
                )}
              >
                {"$"}
              </div>

              <div className={classNames(defaultcss.all, sty.box__fOqvL)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__yHrcu
                  )}
                >
                  {"0.00"}
                </div>
              </div>
            </p.Stack>
          </div>
        </p.Stack>
      </p.Stack>

      <CellDividerIcon
        className={classNames(defaultcss.all, sty.svg__xmCJi)}
        role={"img"}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"checkoutPromotionInput"}
        data-plasmic-override={overrides.checkoutPromotionInput}
        hasGap={true}
        className={classNames(defaultcss.all, sty.checkoutPromotionInput)}
      >
        <TextFormInput
          data-plasmic-name={"inputCheckoutPromotion"}
          data-plasmic-override={overrides.inputCheckoutPromotion}
          className={classNames("__wab_instance", sty.inputCheckoutPromotion)}
          inputText={
            <input
              data-plasmic-name={"inputText"}
              data-plasmic-override={overrides.inputText}
              className={classNames(defaultcss.input, sty.inputText)}
              placeholder={"Enter code"}
              size={1}
              type={"text"}
              value={""}
            />
          }
          labelHeadline={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__holu8
              )}
            >
              {"Promotion"}
            </div>
          }
          size={"_360"}
        />

        <ElementCheckoutPromotionPercentTotalValue
          data-plasmic-name={"elementCheckoutPromotionPercentTotalValue"}
          data-plasmic-override={
            overrides.elementCheckoutPromotionPercentTotalValue
          }
          className={classNames(
            "__wab_instance",
            sty.elementCheckoutPromotionPercentTotalValue
          )}
        />
      </p.Stack>

      <CellDividerIcon
        className={classNames(defaultcss.all, sty.svg__ar5S)}
        role={"img"}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"checkoutTotalButtonBlock"}
        data-plasmic-override={overrides.checkoutTotalButtonBlock}
        hasGap={true}
        className={classNames(defaultcss.all, sty.checkoutTotalButtonBlock)}
      >
        <ElementCheckoutTotalHeadline
          data-plasmic-name={"elementCheckoutTotalHeadline"}
          data-plasmic-override={overrides.elementCheckoutTotalHeadline}
          className={classNames(
            "__wab_instance",
            sty.elementCheckoutTotalHeadline
          )}
        />

        <ButtonPrimary
          data-plasmic-name={"checkoutPlaceOrder"}
          data-plasmic-override={overrides.checkoutPlaceOrder}
          className={classNames("__wab_instance", sty.checkoutPlaceOrder)}
          color={"brand"}
          id={"checkout-button"}
          size={"_360"}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__ycT5E
            )}
          >
            {"Place Order"}
          </div>
        </ButtonPrimary>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkoutHeadlineText",
    "checkoutSubTotalListItemBlock",
    "elementCheckoutHeadlineTotal",
    "checkoutListItems",
    "elementCheckoutSubHeadlineTotal",
    "elementCheckoutListItemUnitInterval",
    "placementHeadline",
    "checkoutPromotionInput",
    "inputCheckoutPromotion",
    "inputText",
    "elementCheckoutPromotionPercentTotalValue",
    "checkoutTotalButtonBlock",
    "elementCheckoutTotalHeadline",
    "checkoutPlaceOrder"
  ],

  checkoutHeadlineText: ["checkoutHeadlineText"],
  checkoutSubTotalListItemBlock: [
    "checkoutSubTotalListItemBlock",
    "elementCheckoutHeadlineTotal",
    "checkoutListItems",
    "elementCheckoutSubHeadlineTotal",
    "elementCheckoutListItemUnitInterval",
    "placementHeadline"
  ],

  elementCheckoutHeadlineTotal: ["elementCheckoutHeadlineTotal"],
  checkoutListItems: [
    "checkoutListItems",
    "elementCheckoutSubHeadlineTotal",
    "elementCheckoutListItemUnitInterval",
    "placementHeadline"
  ],

  elementCheckoutSubHeadlineTotal: ["elementCheckoutSubHeadlineTotal"],
  elementCheckoutListItemUnitInterval: ["elementCheckoutListItemUnitInterval"],
  placementHeadline: ["placementHeadline"],
  checkoutPromotionInput: [
    "checkoutPromotionInput",
    "inputCheckoutPromotion",
    "inputText",
    "elementCheckoutPromotionPercentTotalValue"
  ],

  inputCheckoutPromotion: ["inputCheckoutPromotion", "inputText"],
  inputText: ["inputText"],
  elementCheckoutPromotionPercentTotalValue: [
    "elementCheckoutPromotionPercentTotalValue"
  ],

  checkoutTotalButtonBlock: [
    "checkoutTotalButtonBlock",
    "elementCheckoutTotalHeadline",
    "checkoutPlaceOrder"
  ],

  elementCheckoutTotalHeadline: ["elementCheckoutTotalHeadline"],
  checkoutPlaceOrder: ["checkoutPlaceOrder"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCheckoutServiceListing__ArgProps,
      internalVariantPropNames: PlasmicCheckoutServiceListing__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCheckoutServiceListing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckoutServiceListing";
  } else {
    func.displayName = `PlasmicCheckoutServiceListing.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckoutServiceListing = Object.assign(
  // Top-level PlasmicCheckoutServiceListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkoutHeadlineText: makeNodeComponent("checkoutHeadlineText"),
    checkoutSubTotalListItemBlock: makeNodeComponent(
      "checkoutSubTotalListItemBlock"
    ),

    elementCheckoutHeadlineTotal: makeNodeComponent(
      "elementCheckoutHeadlineTotal"
    ),

    checkoutListItems: makeNodeComponent("checkoutListItems"),
    elementCheckoutSubHeadlineTotal: makeNodeComponent(
      "elementCheckoutSubHeadlineTotal"
    ),

    elementCheckoutListItemUnitInterval: makeNodeComponent(
      "elementCheckoutListItemUnitInterval"
    ),

    placementHeadline: makeNodeComponent("placementHeadline"),
    checkoutPromotionInput: makeNodeComponent("checkoutPromotionInput"),
    inputCheckoutPromotion: makeNodeComponent("inputCheckoutPromotion"),
    inputText: makeNodeComponent("inputText"),
    elementCheckoutPromotionPercentTotalValue: makeNodeComponent(
      "elementCheckoutPromotionPercentTotalValue"
    ),

    checkoutTotalButtonBlock: makeNodeComponent("checkoutTotalButtonBlock"),
    elementCheckoutTotalHeadline: makeNodeComponent(
      "elementCheckoutTotalHeadline"
    ),

    checkoutPlaceOrder: makeNodeComponent("checkoutPlaceOrder"),
    // Metadata about props expected for PlasmicCheckoutServiceListing
    internalVariantProps: PlasmicCheckoutServiceListing__VariantProps,
    internalArgProps: PlasmicCheckoutServiceListing__ArgProps
  }
);

export default PlasmicCheckoutServiceListing;
/* prettier-ignore-end */
