// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: J5QAJR3-82-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LogoHeader from "../../LogoHeader"; // plasmic-import: 9wNFT5FYWe/component
import NavLink from "../../NavLink"; // plasmic-import: jGROxaZ_Hy/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicNavbarCta.module.css"; // plasmic-import: J5QAJR3-82-/css

export const PlasmicNavbarCta__VariantProps = new Array("color", "persona");

export const PlasmicNavbarCta__ArgProps = new Array();

function PlasmicNavbarCta__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootcolor]: hasVariant(variants, "color", "color"),
        [sty.rootcolor_persona_member]:
          hasVariant(variants, "color", "color") &&
          hasVariant(variants, "persona", "member"),
        [sty.rootcolor_persona_partner]:
          hasVariant(variants, "color", "color") &&
          hasVariant(variants, "persona", "partner"),
        [sty.rootpersona_member]: hasVariant(variants, "persona", "member"),
        [sty.rootpersona_partner]: hasVariant(variants, "persona", "partner")
      })}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__z4Gl)}>
          <LogoHeader
            data-plasmic-name={"logoHeader"}
            data-plasmic-override={overrides.logoHeader}
            className={classNames("__wab_instance", sty.logoHeader, {
              [sty.logoHeaderpersona_member]: hasVariant(
                variants,
                "persona",
                "member"
              )
            })}
          />
        </div>

        {(
          hasVariant(globalVariants, "screen", "iphone12ProMax") ? false : false
        ) ? (
          <div className={classNames(projectcss.all, sty.column__g2M7Q)}>
            {(
              hasVariant(globalVariants, "screen", "iphone12ProMax")
                ? false
                : false
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox, {
                  [sty.freeBoxcolor]: hasVariant(variants, "color", "color")
                })}
              >
                {false ? (
                  <NavLink
                    className={classNames(
                      "__wab_instance",
                      sty.navLink__gAgnA,
                      {
                        [sty.navLinkcolor__gAgnAncUjG]: hasVariant(
                          variants,
                          "color",
                          "color"
                        )
                      }
                    )}
                    color={
                      hasVariant(variants, "color", "color")
                        ? "light"
                        : undefined
                    }
                    linkText={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fu5Me,
                          {
                            [sty.textcolor__fu5MencUjG]: hasVariant(
                              variants,
                              "color",
                              "color"
                            )
                          }
                        )}
                      >
                        {"Design"}
                      </div>
                    }
                  />
                ) : null}
                {false ? (
                  <NavLink
                    className={classNames(
                      "__wab_instance",
                      sty.navLink__fpcJz,
                      {
                        [sty.navLinkcolor__fpcJZncUjG]: hasVariant(
                          variants,
                          "color",
                          "color"
                        ),

                        [sty.navLinkpersona_member__fpcJzDtKy1]: hasVariant(
                          variants,
                          "persona",
                          "member"
                        ),

                        [sty.navLinkpersona_partner__fpcJz9HLiC]: hasVariant(
                          variants,
                          "persona",
                          "partner"
                        )
                      }
                    )}
                    color={
                      hasVariant(variants, "color", "color")
                        ? "light"
                        : undefined
                    }
                    linkText={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qfmI4
                        )}
                      >
                        {"Mobile"}
                      </div>
                    }
                  />
                ) : null}

                <NavLink
                  className={classNames("__wab_instance", sty.navLink__zTpu0, {
                    [sty.navLinkcolor__zTpu0NcUjG]: hasVariant(
                      variants,
                      "color",
                      "color"
                    )
                  })}
                  color={
                    hasVariant(variants, "color", "color") ? "light" : undefined
                  }
                  linkText={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rZjHv
                      )}
                    >
                      {"Web"}
                    </div>
                  }
                />

                <NavLink
                  className={classNames("__wab_instance", sty.navLink___5Pct6, {
                    [sty.navLinkcolor___5Pct6NcUjG]: hasVariant(
                      variants,
                      "color",
                      "color"
                    )
                  })}
                  color={
                    hasVariant(variants, "color", "color") ? "light" : undefined
                  }
                  linkText={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pEnZm,
                        {
                          [sty.textcolor__pEnZMncUjG]: hasVariant(
                            variants,
                            "color",
                            "color"
                          )
                        }
                      )}
                    >
                      {"No code"}
                    </div>
                  }
                />
              </p.Stack>
            ) : null}
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.column__mXhVi)}>
          <ButtonPrimary
            data-plasmic-name={"buttonPrimary"}
            data-plasmic-override={overrides.buttonPrimary}
            className={classNames("__wab_instance", sty.buttonPrimary, {
              [sty.buttonPrimarycolor]: hasVariant(variants, "color", "color"),
              [sty.buttonPrimarycolor_persona_partner]:
                hasVariant(variants, "color", "color") &&
                hasVariant(variants, "persona", "partner"),
              [sty.buttonPrimarypersona_member]: hasVariant(
                variants,
                "persona",
                "member"
              ),

              [sty.buttonPrimarypersona_member_color]:
                hasVariant(variants, "persona", "member") &&
                hasVariant(variants, "color", "color"),
              [sty.buttonPrimarypersona_partner]: hasVariant(
                variants,
                "persona",
                "partner"
              )
            })}
            color={
              hasVariant(variants, "persona", "member") &&
              hasVariant(globalVariants, "screen", "iphone12ProMax")
                ? "primary"
                : hasVariant(variants, "persona", "partner") &&
                  hasVariant(globalVariants, "screen", "iphone12ProMax")
                ? "primary"
                : hasVariant(variants, "color", "color")
                ? "primary"
                : hasVariant(globalVariants, "screen", "iphone12ProMax")
                ? "primary"
                : hasVariant(globalVariants, "screen", "desktop")
                ? "primary"
                : "primary"
            }
            width={
              hasVariant(variants, "color", "color")
                ? "_140"
                : hasVariant(globalVariants, "screen", "desktop")
                ? "_140"
                : undefined
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uwHg0,
                {
                  [sty.textcolor__uwHg0NcUjG]: hasVariant(
                    variants,
                    "color",
                    "color"
                  ),

                  [sty.textcolor_persona_member__uwHg0NcUjGDtKy1]:
                    hasVariant(variants, "color", "color") &&
                    hasVariant(variants, "persona", "member"),
                  [sty.textcolor_persona_partner__uwHg0NcUjG9HLiC]:
                    hasVariant(variants, "color", "color") &&
                    hasVariant(variants, "persona", "partner"),
                  [sty.textpersona_member__uwHg0DtKy1]: hasVariant(
                    variants,
                    "persona",
                    "member"
                  ),

                  [sty.textpersona_partner__uwHg09HLiC]: hasVariant(
                    variants,
                    "persona",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "color", "color") &&
              hasVariant(variants, "persona", "member")
                ? "Request access"
                : hasVariant(variants, "persona", "member")
                ? "Request"
                : hasVariant(variants, "persona", "partner") &&
                  hasVariant(globalVariants, "screen", "iphone12ProMax")
                ? "Apply"
                : hasVariant(variants, "persona", "partner")
                ? "Apply"
                : hasVariant(globalVariants, "screen", "iphone12ProMax")
                ? "Request"
                : hasVariant(globalVariants, "screen", "desktop")
                ? "Request access"
                : "Request access"}
            </div>
          </ButtonPrimary>
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "logoHeader", "freeBox", "buttonPrimary"],
  columns: ["columns", "logoHeader", "freeBox", "buttonPrimary"],
  logoHeader: ["logoHeader"],
  freeBox: ["freeBox"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarCta__ArgProps,
      internalVariantPropNames: PlasmicNavbarCta__VariantProps
    });

    return PlasmicNavbarCta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarCta";
  } else {
    func.displayName = `PlasmicNavbarCta.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarCta = Object.assign(
  // Top-level PlasmicNavbarCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    logoHeader: makeNodeComponent("logoHeader"),
    freeBox: makeNodeComponent("freeBox"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicNavbarCta
    internalVariantProps: PlasmicNavbarCta__VariantProps,
    internalArgProps: PlasmicNavbarCta__ArgProps
  }
);

export default PlasmicNavbarCta;
/* prettier-ignore-end */
