// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: kpT4G-q2jGd
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import ButtonConnectedAccount from "../../ButtonConnectedAccount"; // plasmic-import: 9kU3iljaXN/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardSignUp.module.css"; // plasmic-import: kpT4G-q2jGd/css
import SectionDividerIcon from "./icons/PlasmicIcon__SectionDivider"; // plasmic-import: UzRMlTHWYLl/icon
import Facebook1SvgIcon from "./icons/PlasmicIcon__Facebook1Svg"; // plasmic-import: J85sN8PC4/icon
import GooglesvgIcon from "./icons/PlasmicIcon__Googlesvg"; // plasmic-import: XP-psNmhog/icon

export const PlasmicCardSignUp__VariantProps = new Array();

export const PlasmicCardSignUp__ArgProps = new Array();

function PlasmicCardSignUp__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"form"}
      data-plasmic-name={"formHomeSignUp"}
      data-plasmic-override={overrides.formHomeSignUp}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.formHomeSignUp
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__gxkn)}
      >
        <div
          data-plasmic-name={"signupEmail"}
          data-plasmic-override={overrides.signupEmail}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.signupEmail
          )}
        >
          {"First name"}
        </div>

        <input
          data-plasmic-name={"email"}
          data-plasmic-override={overrides.email}
          className={classNames(defaultcss.input, sty.email)}
          placeholder={"Enter your first name"}
          size={1}
          type={"text"}
          value={""}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__fGYjy)}
      >
        <div
          data-plasmic-name={"signupPassword"}
          data-plasmic-override={overrides.signupPassword}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.signupPassword
          )}
        >
          {"Email"}
        </div>

        <input
          data-plasmic-name={"password"}
          data-plasmic-override={overrides.password}
          className={classNames(defaultcss.input, sty.password)}
          placeholder={"Enter your email address"}
          size={1}
          type={"text"}
          value={""}
        />
      </p.Stack>

      <ButtonPrimary
        className={classNames("__wab_instance", sty.buttonPrimary__mNkKi)}
        size={"_360"}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__mdZl0
          )}
        >
          {"Continue"}
        </div>
      </ButtonPrimary>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__nt7Ug)}
      >
        <SectionDividerIcon
          className={classNames(defaultcss.all, sty.svg__pz4Rl)}
          role={"img"}
        />

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__gKFt7
          )}
        >
          {"or"}
        </div>

        <SectionDividerIcon
          className={classNames(defaultcss.all, sty.svg__uYfz)}
          role={"img"}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__bYQfP)}
      >
        <ButtonConnectedAccount
          data-plasmic-name={"signupFacebookConnection"}
          data-plasmic-override={overrides.signupFacebookConnection}
          className={classNames("__wab_instance", sty.signupFacebookConnection)}
          company={"facebook"}
          svg={
            <Facebook1SvgIcon
              className={classNames(defaultcss.all, sty.svg__o3H0W)}
              role={"img"}
            />
          }
          text={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___0A1MO
              )}
            >
              {"Continue with Facebook"}
            </div>
          }
          width={"_360X48"}
        />

        <ButtonConnectedAccount
          data-plasmic-name={"signupGoogleConnection"}
          data-plasmic-override={overrides.signupGoogleConnection}
          className={classNames("__wab_instance", sty.signupGoogleConnection)}
          company={"google"}
          svg={
            <GooglesvgIcon
              className={classNames(defaultcss.all, sty.svg__sou3Q)}
              role={"img"}
            />
          }
          text={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__fxkwP
              )}
            >
              {"Continue in with Google"}
            </div>
          }
          width={"_360X48"}
        />
      </p.Stack>

      <SectionDividerIcon
        className={classNames(defaultcss.all, sty.svg___5Kp4V)}
        role={"img"}
      />

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__l0Gji
        )}
      >
        {"Already have an account?"}
      </div>

      <ButtonPrimary
        className={classNames("__wab_instance", sty.buttonPrimary__ddkV6)}
        size={"_360"}
        type={"outline"}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__pO6Sb
          )}
        >
          {"Login"}
        </div>
      </ButtonPrimary>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__xc3Gd
        )}
      >
        {
          'By selecting "Continue", I agree to Intrepid\'s Terms of Service, Privacy Policy,  and to receive members-only deals, inspiration, marketing emails, and push notifications. You can opt out of receiving these at any time in your account settings or directly from the marketing notification'
        }
      </div>

      <div
        data-plasmic-name={"signupLegalLinks"}
        data-plasmic-override={overrides.signupLegalLinks}
        className={classNames(defaultcss.all, sty.signupLegalLinks)}
      >
        <p.PlasmicLink
          data-plasmic-name={"signupTos"}
          data-plasmic-override={overrides.signupTos}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.signupTos
          )}
          component={Link}
          href={"/terms-of-service"}
          platform={"nextjs"}
        >
          {"Terms of service"}
        </p.PlasmicLink>

        <p.PlasmicLink
          data-plasmic-name={"signupPrivacy"}
          data-plasmic-override={overrides.signupPrivacy}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.signupPrivacy
          )}
          component={Link}
          href={"/privacy"}
          platform={"nextjs"}
        >
          {"Privacy policy"}
        </p.PlasmicLink>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  formHomeSignUp: [
    "formHomeSignUp",
    "signupEmail",
    "email",
    "signupPassword",
    "password",
    "signupFacebookConnection",
    "signupGoogleConnection",
    "signupLegalLinks",
    "signupTos",
    "signupPrivacy"
  ],

  signupEmail: ["signupEmail"],
  email: ["email"],
  signupPassword: ["signupPassword"],
  password: ["password"],
  signupFacebookConnection: ["signupFacebookConnection"],
  signupGoogleConnection: ["signupGoogleConnection"],
  signupLegalLinks: ["signupLegalLinks", "signupTos", "signupPrivacy"],
  signupTos: ["signupTos"],
  signupPrivacy: ["signupPrivacy"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardSignUp__ArgProps,
      internalVariantPropNames: PlasmicCardSignUp__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCardSignUp__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "formHomeSignUp") {
    func.displayName = "PlasmicCardSignUp";
  } else {
    func.displayName = `PlasmicCardSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicCardSignUp = Object.assign(
  // Top-level PlasmicCardSignUp renders the root element
  makeNodeComponent("formHomeSignUp"),
  {
    // Helper components rendering sub-elements
    signupEmail: makeNodeComponent("signupEmail"),
    email: makeNodeComponent("email"),
    signupPassword: makeNodeComponent("signupPassword"),
    password: makeNodeComponent("password"),
    signupFacebookConnection: makeNodeComponent("signupFacebookConnection"),
    signupGoogleConnection: makeNodeComponent("signupGoogleConnection"),
    signupLegalLinks: makeNodeComponent("signupLegalLinks"),
    signupTos: makeNodeComponent("signupTos"),
    signupPrivacy: makeNodeComponent("signupPrivacy"),
    // Metadata about props expected for PlasmicCardSignUp
    internalVariantProps: PlasmicCardSignUp__VariantProps,
    internalArgProps: PlasmicCardSignUp__ArgProps
  }
);

export default PlasmicCardSignUp;
/* prettier-ignore-end */
