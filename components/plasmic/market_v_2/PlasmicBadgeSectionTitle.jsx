// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: kKmAboE5L2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicBadgeSectionTitle.module.css"; // plasmic-import: kKmAboE5L2/css

export const PlasmicBadgeSectionTitle__VariantProps = new Array(
  "border",
  "colors"
);

export const PlasmicBadgeSectionTitle__ArgProps = new Array("sectionTitleSlot");

function PlasmicBadgeSectionTitle__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__border]: hasVariant(variants, "border", "border"),
        [sty.root__border_colors_brand]:
          hasVariant(variants, "border", "border") &&
          hasVariant(variants, "colors", "brand"),
        [sty.root__colors_brand]: hasVariant(variants, "colors", "brand"),
        [sty.root__colors_dark]: hasVariant(variants, "colors", "dark"),
        [sty.root__colors_light]: hasVariant(variants, "colors", "light")
      })}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBox__colors_brand]: hasVariant(variants, "colors", "brand")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "remote os",
          value: args.sectionTitleSlot,
          className: classNames(sty.slotTargetSectionTitleSlot, {
            [sty.slotTargetSectionTitleSlot__colors_brand]: hasVariant(
              variants,
              "colors",
              "brand"
            ),

            [sty.slotTargetSectionTitleSlot__colors_light]: hasVariant(
              variants,
              "colors",
              "light"
            )
          })
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBadgeSectionTitle__ArgProps,
      internalVariantPropNames: PlasmicBadgeSectionTitle__VariantProps
    });

    return PlasmicBadgeSectionTitle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBadgeSectionTitle";
  } else {
    func.displayName = `PlasmicBadgeSectionTitle.${nodeName}`;
  }
  return func;
}

export const PlasmicBadgeSectionTitle = Object.assign(
  // Top-level PlasmicBadgeSectionTitle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicBadgeSectionTitle
    internalVariantProps: PlasmicBadgeSectionTitle__VariantProps,
    internalArgProps: PlasmicBadgeSectionTitle__ArgProps
  }
);

export default PlasmicBadgeSectionTitle;
/* prettier-ignore-end */
