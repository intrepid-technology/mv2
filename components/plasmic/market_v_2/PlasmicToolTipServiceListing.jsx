// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: GDvJTAih6h
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicToolTipServiceListing.module.css"; // plasmic-import: GDvJTAih6h/css
import Icon100Icon from "./icons/PlasmicIcon__Icon100"; // plasmic-import: 5uujF_PS70/icon

export const PlasmicToolTipServiceListing__VariantProps = new Array();

export const PlasmicToolTipServiceListing__ArgProps = new Array(
  "children",
  "slot",
  "slot2"
);

function PlasmicToolTipServiceListing__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__voudh
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Icon100Icon
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg__c9Med
              )}
              role={"img"}
            />
          ),

          value: args.slot2
        })}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__sccGa
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Headline for tooltip",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__gYt9T
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents:
            "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qu",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicToolTipServiceListing__ArgProps,
      internalVariantPropNames: PlasmicToolTipServiceListing__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicToolTipServiceListing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToolTipServiceListing";
  } else {
    func.displayName = `PlasmicToolTipServiceListing.${nodeName}`;
  }
  return func;
}

export const PlasmicToolTipServiceListing = Object.assign(
  // Top-level PlasmicToolTipServiceListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicToolTipServiceListing
    internalVariantProps: PlasmicToolTipServiceListing__VariantProps,
    internalArgProps: PlasmicToolTipServiceListing__ArgProps
  }
);

export default PlasmicToolTipServiceListing;
/* prettier-ignore-end */
