// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 9kU3iljaXN
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicButtonConnectedAccount.module.css"; // plasmic-import: 9kU3iljaXN/css
import Icon41Icon from "./icons/PlasmicIcon__Icon41"; // plasmic-import: 2SUrgDW3MU/icon

export const PlasmicButtonConnectedAccount__VariantProps = new Array(
  "company",
  "width"
);

export const PlasmicButtonConnectedAccount__ArgProps = new Array("svg", "text");

function PlasmicButtonConnectedAccount__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__company_facebook]: hasVariant(
            variants,
            "company",
            "facebook"
          ),

          [sty.root__company_google]: hasVariant(variants, "company", "google"),
          [sty.root__company_paypal]: hasVariant(variants, "company", "paypal"),
          [sty.root__company_quickbooks]: hasVariant(
            variants,
            "company",
            "quickbooks"
          ),

          [sty.root__company_stripe]: hasVariant(variants, "company", "stripe"),
          [sty.root__company_xero]: hasVariant(variants, "company", "xero"),
          [sty.root__width__320Px]: hasVariant(variants, "width", "_320Px"),
          [sty.root__width__360X48]: hasVariant(variants, "width", "_360X48")
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"iconTextParent"}
        data-plasmic-override={overrides.iconTextParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.iconTextParent)}
      >
        <div
          data-plasmic-name={"svgParent"}
          data-plasmic-override={overrides.svgParent}
          className={classNames(defaultcss.all, sty.svgParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(defaultcss.all, sty.box__qNlOf)}>
                <Icon41Icon
                  className={classNames(defaultcss.all, sty.svg__bjtTc)}
                  role={"img"}
                />
              </div>
            ),

            value: args.svg
          })}
        </div>

        <div
          data-plasmic-name={"box"}
          data-plasmic-override={overrides.box}
          className={classNames(defaultcss.all, sty.box, {
            [sty.box__company_facebook]: hasVariant(
              variants,
              "company",
              "facebook"
            ),

            [sty.box__company_google]: hasVariant(
              variants,
              "company",
              "google"
            ),

            [sty.box__company_paypal]: hasVariant(
              variants,
              "company",
              "paypal"
            ),

            [sty.box__company_stripe]: hasVariant(
              variants,
              "company",
              "stripe"
            ),

            [sty.box__company_xero]: hasVariant(variants, "company", "xero"),
            [sty.box__width__320Px]: hasVariant(variants, "width", "_320Px")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: hasVariant(variants, "company", "paypal")
              ? "Connect with Paypal"
              : hasVariant(variants, "company", "stripe")
              ? "Connect with Stripe"
              : hasVariant(variants, "company", "google")
              ? "Sign in with Google"
              : hasVariant(variants, "company", "facebook")
              ? "Sign in with Facebook"
              : 'Sign in with ".........."',
            value: args.text,
            className: classNames(sty.slotText, {
              [sty.slotText__company_facebook]: hasVariant(
                variants,
                "company",
                "facebook"
              ),

              [sty.slotText__company_google]: hasVariant(
                variants,
                "company",
                "google"
              ),

              [sty.slotText__company_paypal]: hasVariant(
                variants,
                "company",
                "paypal"
              ),

              [sty.slotText__company_stripe]: hasVariant(
                variants,
                "company",
                "stripe"
              )
            })
          })}
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "iconTextParent", "svgParent", "box"],
  iconTextParent: ["iconTextParent", "svgParent", "box"],
  svgParent: ["svgParent"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonConnectedAccount__ArgProps,
      internalVariantPropNames: PlasmicButtonConnectedAccount__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicButtonConnectedAccount__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonConnectedAccount";
  } else {
    func.displayName = `PlasmicButtonConnectedAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonConnectedAccount = Object.assign(
  // Top-level PlasmicButtonConnectedAccount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconTextParent: makeNodeComponent("iconTextParent"),
    svgParent: makeNodeComponent("svgParent"),
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicButtonConnectedAccount
    internalVariantProps: PlasmicButtonConnectedAccount__VariantProps,
    internalArgProps: PlasmicButtonConnectedAccount__ArgProps
  }
);

export default PlasmicButtonConnectedAccount;
/* prettier-ignore-end */
