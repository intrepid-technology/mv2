// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: JvAgiFRYLj
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSectionConfirmEmail.module.css"; // plasmic-import: JvAgiFRYLj/css
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: naG0WWoBul/icon
import SectionDividerIcon from "./icons/PlasmicIcon__SectionDivider"; // plasmic-import: UzRMlTHWYLl/icon

export const PlasmicSectionConfirmEmail__VariantProps = new Array();

export const PlasmicSectionConfirmEmail__ArgProps = new Array(
  "textSlot",
  "buttonHeadlineTextSlot",
  "textSlotB",
  "textSlotC"
);

function PlasmicSectionConfirmEmail__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"formEmailConfirmation"}
        data-plasmic-override={overrides.formEmailConfirmation}
        hasGap={true}
        className={classNames(defaultcss.all, sty.formEmailConfirmation)}
      >
        <p.PlasmicLink
          data-plasmic-name={"svgLinkDiv"}
          data-plasmic-override={overrides.svgLinkDiv}
          className={classNames(defaultcss.all, sty.svgLinkDiv)}
          component={Link}
          href={"/sign-up"}
          platform={"nextjs"}
        >
          <Icon43Icon
            className={classNames(defaultcss.all, sty.svg__kopp7)}
            role={"img"}
          />
        </p.PlasmicLink>

        {(
          hasVariant(globalVariants, "screen", "desktopPrimary") ? true : true
        ) ? (
          <div
            data-plasmic-name={"textHeadline"}
            data-plasmic-override={overrides.textHeadline}
            className={classNames(defaultcss.all, sty.textHeadline)}
          >
            <div
              data-plasmic-name={"headlineTitle"}
              data-plasmic-override={overrides.headlineTitle}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.headlineTitle
              )}
            >
              {"Confirmation"}
            </div>
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"textDivParent"}
          data-plasmic-override={overrides.textDivParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.textDivParent)}
        >
          <div className={classNames(defaultcss.all, sty.box__cMiiQ)}>
            <div
              data-plasmic-name={"textDivA"}
              data-plasmic-override={overrides.textDivA}
              className={classNames(defaultcss.all, sty.textDivA)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "We’re super excited you signed up!",
                value: args.textSlot,
                className: classNames(sty.slotTextSlot)
              })}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.box__yjYWr)}>
            <div
              data-plasmic-name={"textDivB"}
              data-plasmic-override={overrides.textDivB}
              className={classNames(defaultcss.all, sty.textDivB)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "We’ve sent a message to your email address with a link to activate your account.",
                value: args.textSlotB,
                className: classNames(sty.slotTextSlotB)
              })}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.box__kfvvm)}>
            <div
              data-plasmic-name={"textDivC"}
              data-plasmic-override={overrides.textDivC}
              className={classNames(defaultcss.all, sty.textDivC)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "To complete the sign-up process, please follow the instructions",
                value: args.textSlotC,
                className: classNames(sty.slotTextSlotC)
              })}
            </div>
          </div>
        </p.Stack>

        <SectionDividerIcon
          className={classNames(defaultcss.all, sty.svg__xs3K)}
          role={"img"}
        />

        {(
          hasVariant(globalVariants, "screen", "desktopPrimary") ? true : true
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"buttonResendHeadlineParent"}
            data-plasmic-override={overrides.buttonResendHeadlineParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.buttonResendHeadlineParent
            )}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"buttonHeadline"}
              data-plasmic-override={overrides.buttonHeadline}
              hasGap={true}
              className={classNames(defaultcss.all, sty.buttonHeadline)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Didn't receive the email?",
                value: args.buttonHeadlineTextSlot,
                className: classNames(sty.slotButtonHeadlineTextSlot)
              })}
            </p.Stack>

            {(
              hasVariant(globalVariants, "screen", "desktopPrimary")
                ? true
                : true
            ) ? (
              <ButtonPrimary
                data-plasmic-name={"confirmationResend"}
                data-plasmic-override={overrides.confirmationResend}
                className={classNames("__wab_instance", sty.confirmationResend)}
                size={
                  hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "_360"
                    : "_360"
                }
                type={
                  hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "primary"
                    : "primary"
                }
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__iYy4D
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "Re-send confirmation email"
                    : "Re-send confirmation email"}
                </div>
              </ButtonPrimary>
            ) : null}
          </p.Stack>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "desktopPrimary") ? true : true
        ) ? (
          <div
            data-plasmic-name={"buttonGoBackParent"}
            data-plasmic-override={overrides.buttonGoBackParent}
            className={classNames(defaultcss.all, sty.buttonGoBackParent)}
          >
            {(
              hasVariant(globalVariants, "screen", "desktopPrimary")
                ? true
                : true
            ) ? (
              <ButtonPrimary
                data-plasmic-name={"backReturn"}
                data-plasmic-override={overrides.backReturn}
                className={classNames("__wab_instance", sty.backReturn)}
                size={
                  hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "_360"
                    : "_360"
                }
                type={
                  hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "outline"
                    : "outline"
                }
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__nuLrI
                  )}
                >
                  {hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "Go back"
                    : "Go back"}
                </div>
              </ButtonPrimary>
            ) : null}
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "formEmailConfirmation",
    "svgLinkDiv",
    "textHeadline",
    "headlineTitle",
    "textDivParent",
    "textDivA",
    "textDivB",
    "textDivC",
    "buttonResendHeadlineParent",
    "buttonHeadline",
    "confirmationResend",
    "buttonGoBackParent",
    "backReturn"
  ],

  formEmailConfirmation: [
    "formEmailConfirmation",
    "svgLinkDiv",
    "textHeadline",
    "headlineTitle",
    "textDivParent",
    "textDivA",
    "textDivB",
    "textDivC",
    "buttonResendHeadlineParent",
    "buttonHeadline",
    "confirmationResend",
    "buttonGoBackParent",
    "backReturn"
  ],

  svgLinkDiv: ["svgLinkDiv"],
  textHeadline: ["textHeadline", "headlineTitle"],
  headlineTitle: ["headlineTitle"],
  textDivParent: ["textDivParent", "textDivA", "textDivB", "textDivC"],
  textDivA: ["textDivA"],
  textDivB: ["textDivB"],
  textDivC: ["textDivC"],
  buttonResendHeadlineParent: [
    "buttonResendHeadlineParent",
    "buttonHeadline",
    "confirmationResend"
  ],

  buttonHeadline: ["buttonHeadline"],
  confirmationResend: ["confirmationResend"],
  buttonGoBackParent: ["buttonGoBackParent", "backReturn"],
  backReturn: ["backReturn"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionConfirmEmail__ArgProps,
      internalVariantPropNames: PlasmicSectionConfirmEmail__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSectionConfirmEmail__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicSectionConfirmEmail";
  } else {
    func.displayName = `PlasmicSectionConfirmEmail.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionConfirmEmail = Object.assign(
  // Top-level PlasmicSectionConfirmEmail renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    formEmailConfirmation: makeNodeComponent("formEmailConfirmation"),
    svgLinkDiv: makeNodeComponent("svgLinkDiv"),
    textHeadline: makeNodeComponent("textHeadline"),
    headlineTitle: makeNodeComponent("headlineTitle"),
    textDivParent: makeNodeComponent("textDivParent"),
    textDivA: makeNodeComponent("textDivA"),
    textDivB: makeNodeComponent("textDivB"),
    textDivC: makeNodeComponent("textDivC"),
    buttonResendHeadlineParent: makeNodeComponent("buttonResendHeadlineParent"),
    buttonHeadline: makeNodeComponent("buttonHeadline"),
    confirmationResend: makeNodeComponent("confirmationResend"),
    buttonGoBackParent: makeNodeComponent("buttonGoBackParent"),
    backReturn: makeNodeComponent("backReturn"),
    // Metadata about props expected for PlasmicSectionConfirmEmail
    internalVariantProps: PlasmicSectionConfirmEmail__VariantProps,
    internalArgProps: PlasmicSectionConfirmEmail__ArgProps
  }
);

export default PlasmicSectionConfirmEmail;
/* prettier-ignore-end */
