// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: l8x-1W9kbZ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PanelButtonPrimary from "../../PanelButtonPrimary"; // plasmic-import: dNsNyn-hp9/component
import PanelButtonSecondary from "../../PanelButtonSecondary"; // plasmic-import: cwyuvAY7ua/component
import { useLayout } from "./PlasmicGlobalVariant__Layout"; // plasmic-import: yRz57WAHKe/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicPanelButtonHeader.module.css"; // plasmic-import: l8x-1W9kbZ/css

export const PlasmicPanelButtonHeader__VariantProps = new Array("user");

export const PlasmicPanelButtonHeader__ArgProps = new Array();

function PlasmicPanelButtonHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    layout: useLayout()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <PanelButtonPrimary
        data-plasmic-name={"partnerNewListing"}
        data-plasmic-override={overrides.partnerNewListing}
        className={classNames("__wab_instance", sty.partnerNewListing, {
          [sty.partnerNewListingglobal_layout_isSellerView]: hasVariant(
            globalVariants,
            "layout",
            "isSellerView"
          ),

          [sty.partnerNewListinguser_member]: hasVariant(
            variants,
            "user",
            "member"
          ),

          [sty.partnerNewListinguser_partner]: hasVariant(
            variants,
            "user",
            "partner"
          )
        })}
        trigger={""}
      />

      <PanelButtonSecondary
        data-plasmic-name={"partnerPowerUp"}
        data-plasmic-override={overrides.partnerPowerUp}
        className={classNames("__wab_instance", sty.partnerPowerUp, {
          [sty.partnerPowerUpglobal_layout_isSellerView]: hasVariant(
            globalVariants,
            "layout",
            "isSellerView"
          ),

          [sty.partnerPowerUpuser_member]: hasVariant(
            variants,
            "user",
            "member"
          ),

          [sty.partnerPowerUpuser_partner]: hasVariant(
            variants,
            "user",
            "partner"
          )
        })}
        destination={
          hasVariant(variants, "user", "member")
            ? "/member/pricing"
            : "/partner/pricing"
        }
        target={"http://localhost:8000/sellers/stripe/authorize"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "partnerNewListing", "partnerPowerUp"],
  partnerNewListing: ["partnerNewListing"],
  partnerPowerUp: ["partnerPowerUp"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelButtonHeader__ArgProps,
      internalVariantPropNames: PlasmicPanelButtonHeader__VariantProps
    });

    return PlasmicPanelButtonHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelButtonHeader";
  } else {
    func.displayName = `PlasmicPanelButtonHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelButtonHeader = Object.assign(
  // Top-level PlasmicPanelButtonHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    partnerNewListing: makeNodeComponent("partnerNewListing"),
    partnerPowerUp: makeNodeComponent("partnerPowerUp"),
    // Metadata about props expected for PlasmicPanelButtonHeader
    internalVariantProps: PlasmicPanelButtonHeader__VariantProps,
    internalArgProps: PlasmicPanelButtonHeader__ArgProps
  }
);

export default PlasmicPanelButtonHeader;
/* prettier-ignore-end */
