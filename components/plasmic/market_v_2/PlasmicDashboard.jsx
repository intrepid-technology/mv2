// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: BTvI7GKEeD
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import CardDashboardNavDisplay from "../../CardDashboardNavDisplay"; // plasmic-import: XH0SBtjCyV/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: BTvI7GKEeD/css
import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: eMAeU2OiF/icon
import DesignIcon from "./icons/PlasmicIcon__Design"; // plasmic-import: l3isbgQ3dC/icon
import BenefitsHeartIcon from "./icons/PlasmicIcon__BenefitsHeart"; // plasmic-import: jzpsph1Rn/icon
import RecommendationsIcon from "./icons/PlasmicIcon__Recommendations"; // plasmic-import: wWVEzr7B1/icon
import SearchFindIcon from "../remote_v_1/icons/PlasmicIcon__SearchFind"; // plasmic-import: aWyTFWXiRU/icon
import HelpIcon from "./icons/PlasmicIcon__Help"; // plasmic-import: 0BaaB_Gau/icon

export const PlasmicDashboard__VariantProps = new Array();

export const PlasmicDashboard__ArgProps = new Array();

function PlasmicDashboard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Dashboard"}</title>
        <meta key="og:title" property="og:title" content={"Dashboard"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <CardDashboardNavDisplay
              data-plasmic-name={"hireRemote"}
              data-plasmic-override={overrides.hireRemote}
              className={classNames("__wab_instance", sty.hireRemote)}
              destination={""}
              slot={
                <UserIcon
                  className={classNames(projectcss.all, sty.svg__nafFm)}
                  role={"img"}
                />
              }
            />

            <CardDashboardNavDisplay
              data-plasmic-name={"contractFreelancer"}
              data-plasmic-override={overrides.contractFreelancer}
              body={"Contract a freelancer or agency in any country"}
              className={classNames("__wab_instance", sty.contractFreelancer)}
              headline={"Contract a freelancer"}
              slot={
                <DesignIcon
                  className={classNames(projectcss.all, sty.svg__nI4Cu)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ju4Mh
                )}
              >
                {"Hire a freelancer"}
              </div>
            </CardDashboardNavDisplay>

            <CardDashboardNavDisplay
              data-plasmic-name={"giveBenefits"}
              data-plasmic-override={overrides.giveBenefits}
              body={"Create customised insurance and benefits packages"}
              className={classNames("__wab_instance", sty.giveBenefits)}
              headline={"Give my team benefits"}
              slot={
                <BenefitsHeartIcon
                  className={classNames(projectcss.all, sty.svg__adDv)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hxgiB
                )}
              >
                {"Give benefits"}
              </div>
            </CardDashboardNavDisplay>

            <CardDashboardNavDisplay
              data-plasmic-name={"personalisedMatching"}
              data-plasmic-override={overrides.personalisedMatching}
              body={"Get talent and service recommendations"}
              className={classNames("__wab_instance", sty.personalisedMatching)}
              headline={"Personalised matching"}
              slot={
                <RecommendationsIcon
                  className={classNames(projectcss.all, sty.svg__tVqzm)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yex9R
                )}
              >
                {"Set my company needs"}
              </div>
            </CardDashboardNavDisplay>

            <CardDashboardNavDisplay
              data-plasmic-name={"discoverTeams"}
              data-plasmic-override={overrides.discoverTeams}
              body={"Find talent and teams in a global marketplace"}
              className={classNames("__wab_instance", sty.discoverTeams)}
              headline={"Discover teams & talent"}
              slot={
                <SearchFindIcon
                  className={classNames(projectcss.all, sty.svg__zyfp)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r1XFo
                )}
              >
                {"Shop the marketplace"}
              </div>
            </CardDashboardNavDisplay>

            <CardDashboardNavDisplay
              data-plasmic-name={"getHelp"}
              data-plasmic-override={overrides.getHelp}
              body={"Learn how to get the most from the Intrepid community"}
              className={classNames("__wab_instance", sty.getHelp)}
              headline={"Get help"}
              slot={
                <HelpIcon
                  className={classNames(projectcss.all, sty.svg___0Vb9B)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zn2CP
                )}
              >
                {"Learn more"}
              </div>
            </CardDashboardNavDisplay>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "hireRemote",
    "contractFreelancer",
    "giveBenefits",
    "personalisedMatching",
    "discoverTeams",
    "getHelp"
  ],

  freeBox: [
    "freeBox",
    "hireRemote",
    "contractFreelancer",
    "giveBenefits",
    "personalisedMatching",
    "discoverTeams",
    "getHelp"
  ],

  hireRemote: ["hireRemote"],
  contractFreelancer: ["contractFreelancer"],
  giveBenefits: ["giveBenefits"],
  personalisedMatching: ["personalisedMatching"],
  discoverTeams: ["discoverTeams"],
  getHelp: ["getHelp"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDashboard__ArgProps,
      internalVariantPropNames: PlasmicDashboard__VariantProps
    });

    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    hireRemote: makeNodeComponent("hireRemote"),
    contractFreelancer: makeNodeComponent("contractFreelancer"),
    giveBenefits: makeNodeComponent("giveBenefits"),
    personalisedMatching: makeNodeComponent("personalisedMatching"),
    discoverTeams: makeNodeComponent("discoverTeams"),
    getHelp: makeNodeComponent("getHelp"),
    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
