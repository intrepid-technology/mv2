// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: TlHGxonFgD
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicInputEmailB.module.css"; // plasmic-import: TlHGxonFgD/css

export const PlasmicInputEmailB__VariantProps = new Array(
  "description",
  "size"
);

export const PlasmicInputEmailB__ArgProps = new Array("children");

function PlasmicInputEmailB__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootsize__160]: hasVariant(variants, "size", "_160"),
        [sty.rootsize__270]: hasVariant(variants, "size", "_270"),
        [sty.rootsize__360]: hasVariant(variants, "size", "_360"),
        [sty.rootsize__540]: hasVariant(variants, "size", "_540")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___5O3PI, {
          [sty.freeBoxsize__160___5O3PICwFqr]: hasVariant(
            variants,
            "size",
            "_160"
          ),

          [sty.freeBoxsize__270___5O3PImCtWm]: hasVariant(
            variants,
            "size",
            "_270"
          ),

          [sty.freeBoxsize__360___5O3PIlmp10]: hasVariant(
            variants,
            "size",
            "_360"
          ),

          [sty.freeBoxsize__540___5O3PI4Ezsp]: hasVariant(
            variants,
            "size",
            "_540"
          )
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yp4Vd, {
            [sty.freeBoxsize__360__yp4VDlmp10]: hasVariant(
              variants,
              "size",
              "_360"
            )
          })}
        >
          <input
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput ?? overrides.textbox}
            className={classNames(
              projectcss.all,
              projectcss.input,
              sty.textInput,
              {
                [sty.textInputsize__160]: hasVariant(variants, "size", "_160"),
                [sty.textInputsize__270]: hasVariant(variants, "size", "_270"),
                [sty.textInputsize__360]: hasVariant(variants, "size", "_360"),
                [sty.textInputsize__540]: hasVariant(variants, "size", "_540")
              }
            )}
            placeholder={"Enter your email address"}
            size={1}
            type={"text"}
            value={""}
          />

          {(
            hasVariant(variants, "size", "_270")
              ? false
              : hasVariant(variants, "size", "_160")
              ? false
              : true
          ) ? (
            <ButtonPrimary
              className={classNames(
                "__wab_instance",
                sty.buttonPrimary__abtKj,
                {
                  [sty.buttonPrimarysize__160__abtKjCwFqr]: hasVariant(
                    variants,
                    "size",
                    "_160"
                  ),

                  [sty.buttonPrimarysize__270__abtKjMCtWm]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  ),

                  [sty.buttonPrimarysize__360__abtKjlmp10]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  ),

                  [sty.buttonPrimarysize__540__abtKj4Ezsp]: hasVariant(
                    variants,
                    "size",
                    "_540"
                  )
                }
              )}
              color={"primary"}
              width={hasVariant(variants, "size", "_540") ? "_180" : "_120"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kG9Sn,
                  {
                    [sty.textsize__360__kG9SNlmp10]: hasVariant(
                      variants,
                      "size",
                      "_360"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "screen", "iphone12ProMax")
                  ? "Join now"
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? "Apply to join"
                  : "Click me"}
              </div>
            </ButtonPrimary>
          ) : null}
        </p.Stack>

        {(hasVariant(variants, "size", "_270") ? true : false) ? (
          <ButtonPrimary
            className={classNames("__wab_instance", sty.buttonPrimary___42IUc, {
              [sty.buttonPrimarysize__270___42IUcMCtWm]: hasVariant(
                variants,
                "size",
                "_270"
              ),

              [sty.buttonPrimarysize__360___42IUclmp10]: hasVariant(
                variants,
                "size",
                "_360"
              )
            })}
            color={"primary"}
            width={"_120"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qUzY2,
                {
                  [sty.textsize__360__qUzY2Lmp10]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "desktop")
                ? "Apply to join"
                : "Click me"}
            </div>
          </ButtonPrimary>
        ) : null}
        {(
          hasVariant(variants, "size", "_270")
            ? false
            : hasVariant(variants, "size", "_160")
            ? true
            : false
        ) ? (
          <ButtonPrimary
            className={classNames("__wab_instance", sty.buttonPrimary__c34CP, {
              [sty.buttonPrimarysize__160__c34CPCwFqr]: hasVariant(
                variants,
                "size",
                "_160"
              ),

              [sty.buttonPrimarysize__270__c34CPmCtWm]: hasVariant(
                variants,
                "size",
                "_270"
              ),

              [sty.buttonPrimarysize__360__c34CPlmp10]: hasVariant(
                variants,
                "size",
                "_360"
              )
            })}
            color={"primary"}
            width={"_120"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yItrW,
                {
                  [sty.textsize__360__yItrWlmp10]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "desktop")
                ? "Apply to join"
                : "Click me"}
            </div>
          </ButtonPrimary>
        ) : null}
        {(hasVariant(variants, "description", "description") ? false : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__dfyHp, {
              [sty.freeBoxdescription__dfyHpL47Md]: hasVariant(
                variants,
                "description",
                "description"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Free to join, no credit card required. By entering your email, you agree to receive marketing emails from Intrepid.",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrendescription]: hasVariant(
                  variants,
                  "description",
                  "description"
                ),

                [sty.slotTargetChildrensize__160]: hasVariant(
                  variants,
                  "size",
                  "_160"
                ),

                [sty.slotTargetChildrensize__270]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),

                [sty.slotTargetChildrensize__360]: hasVariant(
                  variants,
                  "size",
                  "_360"
                ),

                [sty.slotTargetChildrensize__540]: hasVariant(
                  variants,
                  "size",
                  "_540"
                )
              })
            })}
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox"],
  textInput: ["textInput", "textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputEmailB__ArgProps,
      internalVariantPropNames: PlasmicInputEmailB__VariantProps
    });

    return PlasmicInputEmailB__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputEmailB";
  } else {
    func.displayName = `PlasmicInputEmailB.${nodeName}`;
  }
  return func;
}

export const PlasmicInputEmailB = Object.assign(
  // Top-level PlasmicInputEmailB renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    // Metadata about props expected for PlasmicInputEmailB
    internalVariantProps: PlasmicInputEmailB__VariantProps,
    internalArgProps: PlasmicInputEmailB__ArgProps
  }
);

export default PlasmicInputEmailB;
/* prettier-ignore-end */
