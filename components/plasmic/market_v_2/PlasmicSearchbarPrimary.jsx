// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: MorSLptejY
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSearchbarPrimary.module.css"; // plasmic-import: MorSLptejY/css
import Icon174Icon from "./icons/PlasmicIcon__Icon174"; // plasmic-import: yq36rktOQq/icon

export const PlasmicSearchbarPrimary__VariantProps = new Array(
  "type",
  "width",
  "height"
);

export const PlasmicSearchbarPrimary__ArgProps = new Array();

function PlasmicSearchbarPrimary__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__height__36]: hasVariant(variants, "height", "_36"),
          [sty.root__height__40]: hasVariant(variants, "height", "_40"),
          [sty.root__width__180]: hasVariant(variants, "width", "_180"),
          [sty.root__width__270]: hasVariant(variants, "width", "_270"),
          [sty.root__width__360]: hasVariant(variants, "width", "_360")
        }
      )}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, projectcss.all, sty.parent, {
          [sty.parent__height__36]: hasVariant(variants, "height", "_36"),
          [sty.parent__height__40]: hasVariant(variants, "height", "_40"),
          [sty.parent__type_secondary]: hasVariant(
            variants,
            "type",
            "secondary"
          ),

          [sty.parent__width__180]: hasVariant(variants, "width", "_180"),
          [sty.parent__width__270]: hasVariant(variants, "width", "_270"),
          [sty.parent__width__360]: hasVariant(variants, "width", "_360"),
          [sty.parent__width__360_height__36]:
            hasVariant(variants, "width", "_360") &&
            hasVariant(variants, "height", "_36"),
          [sty.parent__width__360_height__40]:
            hasVariant(variants, "width", "_360") &&
            hasVariant(variants, "height", "_40"),
          [sty.parent__width__540]: hasVariant(variants, "width", "_540"),
          [sty.parent__width__720]: hasVariant(variants, "width", "_720")
        })}
      >
        <div
          data-plasmic-name={"searchSvgbg"}
          data-plasmic-override={overrides.searchSvgbg}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.searchSvgbg,
            {
              [sty.searchSvgbg__height__36]: hasVariant(
                variants,
                "height",
                "_36"
              ),

              [sty.searchSvgbg__height__40]: hasVariant(
                variants,
                "height",
                "_40"
              ),

              [sty.searchSvgbg__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              ),

              [sty.searchSvgbg__width__180]: hasVariant(
                variants,
                "width",
                "_180"
              ),

              [sty.searchSvgbg__width__270]: hasVariant(
                variants,
                "width",
                "_270"
              ),

              [sty.searchSvgbg__width__360]: hasVariant(
                variants,
                "width",
                "_360"
              )
            }
          )}
        >
          <Icon174Icon
            data-plasmic-name={"searchSvg"}
            data-plasmic-override={overrides.searchSvg}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.searchSvg,
              {
                [sty.searchSvg__height__36]: hasVariant(
                  variants,
                  "height",
                  "_36"
                ),

                [sty.searchSvg__height__40]: hasVariant(
                  variants,
                  "height",
                  "_40"
                )
              }
            )}
            role={"img"}
          />
        </div>

        <div
          data-plasmic-name={"textboxParent"}
          data-plasmic-override={overrides.textboxParent}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.textboxParent,
            {
              [sty.textboxParent__type_primary]: hasVariant(
                variants,
                "type",
                "primary"
              ),

              [sty.textboxParent__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              ),

              [sty.textboxParent__width__180]: hasVariant(
                variants,
                "width",
                "_180"
              ),

              [sty.textboxParent__width__270]: hasVariant(
                variants,
                "width",
                "_270"
              ),

              [sty.textboxParent__width__360]: hasVariant(
                variants,
                "width",
                "_360"
              )
            }
          )}
        >
          <input
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput ?? overrides.textbox}
            className={classNames(
              defaultcss.input,
              projectcss.input,
              sty.textInput,
              {
                [sty.textInput__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                )
              }
            )}
            placeholder={""}
            size={1}
            type={"text"}
            value={"Search..."}
          />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "searchSvgbg",
    "searchSvg",
    "textboxParent",
    "textInput"
  ],

  parent: ["parent", "searchSvgbg", "searchSvg", "textboxParent", "textInput"],
  searchSvgbg: ["searchSvgbg", "searchSvg"],
  searchSvg: ["searchSvg"],
  textboxParent: ["textboxParent", "textInput"],
  textInput: ["textInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearchbarPrimary__ArgProps,
      internalVariantPropNames: PlasmicSearchbarPrimary__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSearchbarPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchbarPrimary";
  } else {
    func.displayName = `PlasmicSearchbarPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchbarPrimary = Object.assign(
  // Top-level PlasmicSearchbarPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    searchSvgbg: makeNodeComponent("searchSvgbg"),
    searchSvg: makeNodeComponent("searchSvg"),
    textboxParent: makeNodeComponent("textboxParent"),
    textInput: makeNodeComponent("textInput"),
    // Metadata about props expected for PlasmicSearchbarPrimary
    internalVariantProps: PlasmicSearchbarPrimary__VariantProps,
    internalArgProps: PlasmicSearchbarPrimary__ArgProps
  }
);

export default PlasmicSearchbarPrimary;
/* prettier-ignore-end */
