// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: C8K8aavuz-
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicTagBadge.module.css"; // plasmic-import: C8K8aavuz-/css

export const PlasmicTagBadge__VariantProps = new Array("type", "color", "size");

export const PlasmicTagBadge__ArgProps = new Array(
  "textBase10Px",
  "text6Px",
  "text8Px",
  "text10Px",
  "text12Px",
  "text14Px",
  "textBase10Px2",
  "target"
);

function PlasmicTagBadge__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_blue]: hasVariant(variants, "color", "blue"),
        [sty.root__color_brand]: hasVariant(variants, "color", "brand"),
        [sty.root__color_green]: hasVariant(variants, "color", "green"),
        [sty.root__color_green_type_ghost]:
          hasVariant(variants, "color", "green") &&
          hasVariant(variants, "type", "ghost"),
        [sty.root__color_magenta]: hasVariant(variants, "color", "magenta"),
        [sty.root__color_pink]: hasVariant(variants, "color", "pink"),
        [sty.root__size__12Px]: hasVariant(variants, "size", "_12Px"),
        [sty.root__size__14Px]: hasVariant(variants, "size", "_14Px"),
        [sty.root__size__16Px]: hasVariant(variants, "size", "_16Px"),
        [sty.root__size__18Px]: hasVariant(variants, "size", "_18Px"),
        [sty.root__size__20Px]: hasVariant(variants, "size", "_20Px"),
        [sty.root__type_ghost]: hasVariant(variants, "type", "ghost"),
        [sty.root__type_ghost_color_blue]:
          hasVariant(variants, "type", "ghost") &&
          hasVariant(variants, "color", "blue"),
        [sty.root__type_ghost_color_brand]:
          hasVariant(variants, "type", "ghost") &&
          hasVariant(variants, "color", "brand"),
        [sty.root__type_ghost_color_magenta]:
          hasVariant(variants, "type", "ghost") &&
          hasVariant(variants, "color", "magenta"),
        [sty.root__type_ghost_color_pink]:
          hasVariant(variants, "type", "ghost") &&
          hasVariant(variants, "color", "pink"),
        [sty.root__type_outline]: hasVariant(variants, "type", "outline"),
        [sty.root__type_outline_color_blue]:
          hasVariant(variants, "type", "outline") &&
          hasVariant(variants, "color", "blue"),
        [sty.root__type_outline_color_brand]:
          hasVariant(variants, "type", "outline") &&
          hasVariant(variants, "color", "brand"),
        [sty.root__type_outline_color_green]:
          hasVariant(variants, "type", "outline") &&
          hasVariant(variants, "color", "green"),
        [sty.root__type_outline_color_magenta]:
          hasVariant(variants, "type", "outline") &&
          hasVariant(variants, "color", "magenta"),
        [sty.root__type_outline_color_pink]:
          hasVariant(variants, "type", "outline") &&
          hasVariant(variants, "color", "pink"),
        [sty.root__type_secondary]: hasVariant(variants, "type", "secondary")
      })}
    >
      <div
        data-plasmic-name={"textlinkParent"}
        data-plasmic-override={overrides.textlinkParent}
        className={classNames(projectcss.all, sty.textlinkParent, {
          [sty.textlinkParent__size__12Px]: hasVariant(
            variants,
            "size",
            "_12Px"
          ),

          [sty.textlinkParent__size__14Px]: hasVariant(
            variants,
            "size",
            "_14Px"
          ),

          [sty.textlinkParent__size__16Px]: hasVariant(
            variants,
            "size",
            "_16Px"
          ),

          [sty.textlinkParent__size__18Px]: hasVariant(
            variants,
            "size",
            "_18Px"
          ),

          [sty.textlinkParent__size__20Px]: hasVariant(
            variants,
            "size",
            "_20Px"
          )
        })}
      >
        {(
          hasVariant(variants, "size", "_20Px")
            ? false
            : hasVariant(variants, "size", "_18Px")
            ? false
            : hasVariant(variants, "size", "_16Px")
            ? false
            : hasVariant(variants, "size", "_14Px")
            ? false
            : hasVariant(variants, "size", "_12Px")
            ? false
            : true
        ) ? (
          <p.PlasmicLink
            data-plasmic-name={"tagFilterLinkBase"}
            data-plasmic-override={overrides.tagFilterLinkBase}
            className={classNames(projectcss.a, sty.tagFilterLinkBase, {
              [sty.tagFilterLinkBase__size__12Px]: hasVariant(
                variants,
                "size",
                "_12Px"
              ),

              [sty.tagFilterLinkBase__size__14Px]: hasVariant(
                variants,
                "size",
                "_14Px"
              ),

              [sty.tagFilterLinkBase__size__16Px]: hasVariant(
                variants,
                "size",
                "_16Px"
              ),

              [sty.tagFilterLinkBase__size__18Px]: hasVariant(
                variants,
                "size",
                "_18Px"
              ),

              [sty.tagFilterLinkBase__size__20Px]: hasVariant(
                variants,
                "size",
                "_20Px"
              ),

              [sty.tagFilterLinkBase__type_primary]: hasVariant(
                variants,
                "type",
                "primary"
              ),

              [sty.tagFilterLinkBase__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: "tag",
              value: args.textBase10Px,
              className: classNames(sty.slotTargetTextBase10Px, {
                [sty.slotTargetTextBase10Px__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),

                [sty.slotTargetTextBase10Px__color_green_type_ghost]:
                  hasVariant(variants, "color", "green") &&
                  hasVariant(variants, "type", "ghost"),
                [sty.slotTargetTextBase10Px__size__12Px]: hasVariant(
                  variants,
                  "size",
                  "_12Px"
                ),

                [sty.slotTargetTextBase10Px__size__14Px]: hasVariant(
                  variants,
                  "size",
                  "_14Px"
                ),

                [sty.slotTargetTextBase10Px__size__16Px]: hasVariant(
                  variants,
                  "size",
                  "_16Px"
                ),

                [sty.slotTargetTextBase10Px__size__18Px]: hasVariant(
                  variants,
                  "size",
                  "_18Px"
                ),

                [sty.slotTargetTextBase10Px__size__20Px]: hasVariant(
                  variants,
                  "size",
                  "_20Px"
                ),

                [sty.slotTargetTextBase10Px__type_ghost]: hasVariant(
                  variants,
                  "type",
                  "ghost"
                ),

                [sty.slotTargetTextBase10Px__type_ghost_color_blue]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetTextBase10Px__type_ghost_color_brand]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetTextBase10Px__type_ghost_color_magenta]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetTextBase10Px__type_ghost_color_pink]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetTextBase10Px__type_outline]: hasVariant(
                  variants,
                  "type",
                  "outline"
                ),

                [sty.slotTargetTextBase10Px__type_outline_color_blue]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetTextBase10Px__type_outline_color_brand]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetTextBase10Px__type_outline_color_green]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "green"),
                [sty.slotTargetTextBase10Px__type_outline_color_magenta]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetTextBase10Px__type_outline_color_pink]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetTextBase10Px__type_primary]: hasVariant(
                  variants,
                  "type",
                  "primary"
                ),

                [sty.slotTargetTextBase10Px__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                ),

                [sty.slotTargetTextBase10Px__type_uppercase]: hasVariant(
                  variants,
                  "type",
                  "uppercase"
                )
              })
            })}
          </p.PlasmicLink>
        ) : null}
        {(hasVariant(variants, "size", "_12Px") ? true : false) ? (
          <p.PlasmicLink
            data-plasmic-name={"tagFilterLink6Px"}
            data-plasmic-override={overrides.tagFilterLink6Px}
            className={classNames(projectcss.a, sty.tagFilterLink6Px, {
              [sty.tagFilterLink6Px__size__12Px]: hasVariant(
                variants,
                "size",
                "_12Px"
              ),

              [sty.tagFilterLink6Px__size__20Px]: hasVariant(
                variants,
                "size",
                "_20Px"
              ),

              [sty.tagFilterLink6Px__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: "tag",
              value: args.text6Px,
              className: classNames(sty.slotTargetText6Px, {
                [sty.slotTargetText6Px__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),

                [sty.slotTargetText6Px__color_green_type_ghost]:
                  hasVariant(variants, "color", "green") &&
                  hasVariant(variants, "type", "ghost"),
                [sty.slotTargetText6Px__size__12Px]: hasVariant(
                  variants,
                  "size",
                  "_12Px"
                ),

                [sty.slotTargetText6Px__size__14Px]: hasVariant(
                  variants,
                  "size",
                  "_14Px"
                ),

                [sty.slotTargetText6Px__size__20Px]: hasVariant(
                  variants,
                  "size",
                  "_20Px"
                ),

                [sty.slotTargetText6Px__type_ghost]: hasVariant(
                  variants,
                  "type",
                  "ghost"
                ),

                [sty.slotTargetText6Px__type_ghost_color_blue]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText6Px__type_ghost_color_brand]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText6Px__type_ghost_color_magenta]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText6Px__type_ghost_color_pink]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText6Px__type_outline]: hasVariant(
                  variants,
                  "type",
                  "outline"
                ),

                [sty.slotTargetText6Px__type_outline_color_blue]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText6Px__type_outline_color_brand]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText6Px__type_outline_color_green]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "green"),
                [sty.slotTargetText6Px__type_outline_color_magenta]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText6Px__type_outline_color_pink]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText6Px__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                )
              })
            })}
          </p.PlasmicLink>
        ) : null}
        {(hasVariant(variants, "size", "_14Px") ? true : false) ? (
          <p.PlasmicLink
            data-plasmic-name={"tagFilterLink8Px"}
            data-plasmic-override={overrides.tagFilterLink8Px}
            className={classNames(projectcss.a, sty.tagFilterLink8Px, {
              [sty.tagFilterLink8Px__size__12Px]: hasVariant(
                variants,
                "size",
                "_12Px"
              ),

              [sty.tagFilterLink8Px__size__14Px]: hasVariant(
                variants,
                "size",
                "_14Px"
              ),

              [sty.tagFilterLink8Px__size__20Px]: hasVariant(
                variants,
                "size",
                "_20Px"
              ),

              [sty.tagFilterLink8Px__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: "tag",
              value: args.text8Px,
              className: classNames(sty.slotTargetText8Px, {
                [sty.slotTargetText8Px__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),

                [sty.slotTargetText8Px__color_green_type_ghost]:
                  hasVariant(variants, "color", "green") &&
                  hasVariant(variants, "type", "ghost"),
                [sty.slotTargetText8Px__size__12Px]: hasVariant(
                  variants,
                  "size",
                  "_12Px"
                ),

                [sty.slotTargetText8Px__size__14Px]: hasVariant(
                  variants,
                  "size",
                  "_14Px"
                ),

                [sty.slotTargetText8Px__size__16Px]: hasVariant(
                  variants,
                  "size",
                  "_16Px"
                ),

                [sty.slotTargetText8Px__size__20Px]: hasVariant(
                  variants,
                  "size",
                  "_20Px"
                ),

                [sty.slotTargetText8Px__type_ghost]: hasVariant(
                  variants,
                  "type",
                  "ghost"
                ),

                [sty.slotTargetText8Px__type_ghost_color_blue]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText8Px__type_ghost_color_brand]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText8Px__type_ghost_color_magenta]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText8Px__type_ghost_color_pink]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText8Px__type_outline]: hasVariant(
                  variants,
                  "type",
                  "outline"
                ),

                [sty.slotTargetText8Px__type_outline_color_blue]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText8Px__type_outline_color_brand]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText8Px__type_outline_color_green]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "green"),
                [sty.slotTargetText8Px__type_outline_color_magenta]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText8Px__type_outline_color_pink]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText8Px__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                )
              })
            })}
          </p.PlasmicLink>
        ) : null}
        {(hasVariant(variants, "size", "_16Px") ? true : false) ? (
          <p.PlasmicLink
            data-plasmic-name={"tagFilterLink10Px"}
            data-plasmic-override={overrides.tagFilterLink10Px}
            className={classNames(projectcss.a, sty.tagFilterLink10Px, {
              [sty.tagFilterLink10Px__size__12Px]: hasVariant(
                variants,
                "size",
                "_12Px"
              ),

              [sty.tagFilterLink10Px__size__16Px]: hasVariant(
                variants,
                "size",
                "_16Px"
              ),

              [sty.tagFilterLink10Px__size__20Px]: hasVariant(
                variants,
                "size",
                "_20Px"
              ),

              [sty.tagFilterLink10Px__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: "tag",
              value: args.text10Px,
              className: classNames(sty.slotTargetText10Px, {
                [sty.slotTargetText10Px__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),

                [sty.slotTargetText10Px__color_green_type_ghost]:
                  hasVariant(variants, "color", "green") &&
                  hasVariant(variants, "type", "ghost"),
                [sty.slotTargetText10Px__size__14Px]: hasVariant(
                  variants,
                  "size",
                  "_14Px"
                ),

                [sty.slotTargetText10Px__size__16Px]: hasVariant(
                  variants,
                  "size",
                  "_16Px"
                ),

                [sty.slotTargetText10Px__size__18Px]: hasVariant(
                  variants,
                  "size",
                  "_18Px"
                ),

                [sty.slotTargetText10Px__size__20Px]: hasVariant(
                  variants,
                  "size",
                  "_20Px"
                ),

                [sty.slotTargetText10Px__type_ghost]: hasVariant(
                  variants,
                  "type",
                  "ghost"
                ),

                [sty.slotTargetText10Px__type_ghost_color_blue]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText10Px__type_ghost_color_brand]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText10Px__type_ghost_color_magenta]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText10Px__type_ghost_color_pink]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText10Px__type_outline]: hasVariant(
                  variants,
                  "type",
                  "outline"
                ),

                [sty.slotTargetText10Px__type_outline_color_blue]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText10Px__type_outline_color_brand]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText10Px__type_outline_color_green]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "green"),
                [sty.slotTargetText10Px__type_outline_color_magenta]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText10Px__type_outline_color_pink]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText10Px__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                )
              })
            })}
          </p.PlasmicLink>
        ) : null}
        {(hasVariant(variants, "size", "_18Px") ? true : false) ? (
          <p.PlasmicLink
            data-plasmic-name={"tagFilterLink12Px"}
            data-plasmic-override={overrides.tagFilterLink12Px}
            className={classNames(projectcss.a, sty.tagFilterLink12Px, {
              [sty.tagFilterLink12Px__size__12Px]: hasVariant(
                variants,
                "size",
                "_12Px"
              ),

              [sty.tagFilterLink12Px__size__18Px]: hasVariant(
                variants,
                "size",
                "_18Px"
              ),

              [sty.tagFilterLink12Px__size__20Px]: hasVariant(
                variants,
                "size",
                "_20Px"
              ),

              [sty.tagFilterLink12Px__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: "tag",
              value: args.text12Px,
              className: classNames(sty.slotTargetText12Px, {
                [sty.slotTargetText12Px__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),

                [sty.slotTargetText12Px__color_green_type_ghost]:
                  hasVariant(variants, "color", "green") &&
                  hasVariant(variants, "type", "ghost"),
                [sty.slotTargetText12Px__size__18Px]: hasVariant(
                  variants,
                  "size",
                  "_18Px"
                ),

                [sty.slotTargetText12Px__size__20Px]: hasVariant(
                  variants,
                  "size",
                  "_20Px"
                ),

                [sty.slotTargetText12Px__type_ghost]: hasVariant(
                  variants,
                  "type",
                  "ghost"
                ),

                [sty.slotTargetText12Px__type_ghost_color_blue]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText12Px__type_ghost_color_brand]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText12Px__type_ghost_color_magenta]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText12Px__type_ghost_color_pink]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText12Px__type_outline]: hasVariant(
                  variants,
                  "type",
                  "outline"
                ),

                [sty.slotTargetText12Px__type_outline_color_blue]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText12Px__type_outline_color_brand]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText12Px__type_outline_color_green]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "green"),
                [sty.slotTargetText12Px__type_outline_color_magenta]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText12Px__type_outline_color_pink]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText12Px__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                )
              })
            })}
          </p.PlasmicLink>
        ) : null}
        {(hasVariant(variants, "size", "_20Px") ? true : false) ? (
          <p.PlasmicLink
            data-plasmic-name={"tagFilterLink14Px"}
            data-plasmic-override={overrides.tagFilterLink14Px}
            className={classNames(projectcss.a, sty.tagFilterLink14Px, {
              [sty.tagFilterLink14Px__size__12Px]: hasVariant(
                variants,
                "size",
                "_12Px"
              ),

              [sty.tagFilterLink14Px__size__18Px]: hasVariant(
                variants,
                "size",
                "_18Px"
              ),

              [sty.tagFilterLink14Px__size__20Px]: hasVariant(
                variants,
                "size",
                "_20Px"
              ),

              [sty.tagFilterLink14Px__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: "tag",
              value: args.text14Px,
              className: classNames(sty.slotTargetText14Px, {
                [sty.slotTargetText14Px__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),

                [sty.slotTargetText14Px__color_green_type_ghost]:
                  hasVariant(variants, "color", "green") &&
                  hasVariant(variants, "type", "ghost"),
                [sty.slotTargetText14Px__size__14Px]: hasVariant(
                  variants,
                  "size",
                  "_14Px"
                ),

                [sty.slotTargetText14Px__size__16Px]: hasVariant(
                  variants,
                  "size",
                  "_16Px"
                ),

                [sty.slotTargetText14Px__size__18Px]: hasVariant(
                  variants,
                  "size",
                  "_18Px"
                ),

                [sty.slotTargetText14Px__size__20Px]: hasVariant(
                  variants,
                  "size",
                  "_20Px"
                ),

                [sty.slotTargetText14Px__type_ghost]: hasVariant(
                  variants,
                  "type",
                  "ghost"
                ),

                [sty.slotTargetText14Px__type_ghost_color_blue]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText14Px__type_ghost_color_brand]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText14Px__type_ghost_color_magenta]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText14Px__type_ghost_color_pink]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText14Px__type_outline]: hasVariant(
                  variants,
                  "type",
                  "outline"
                ),

                [sty.slotTargetText14Px__type_outline_color_blue]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetText14Px__type_outline_color_brand]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetText14Px__type_outline_color_green]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "green"),
                [sty.slotTargetText14Px__type_outline_color_magenta]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetText14Px__type_outline_color_pink]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetText14Px__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                )
              })
            })}
          </p.PlasmicLink>
        ) : null}
        {(
          hasVariant(variants, "size", "_20Px")
            ? false
            : hasVariant(variants, "size", "_18Px")
            ? false
            : hasVariant(variants, "size", "_16Px")
            ? false
            : hasVariant(variants, "size", "_14Px")
            ? false
            : hasVariant(variants, "size", "_12Px")
            ? false
            : false
        ) ? (
          <p.PlasmicLink
            data-plasmic-name={"tagFilterLink10Px2"}
            data-plasmic-override={overrides.tagFilterLink10Px2}
            className={classNames(projectcss.a, sty.tagFilterLink10Px2, {
              [sty.tagFilterLink10Px2__size__12Px]: hasVariant(
                variants,
                "size",
                "_12Px"
              ),

              [sty.tagFilterLink10Px2__size__14Px]: hasVariant(
                variants,
                "size",
                "_14Px"
              ),

              [sty.tagFilterLink10Px2__size__16Px]: hasVariant(
                variants,
                "size",
                "_16Px"
              ),

              [sty.tagFilterLink10Px2__size__18Px]: hasVariant(
                variants,
                "size",
                "_18Px"
              ),

              [sty.tagFilterLink10Px2__size__20Px]: hasVariant(
                variants,
                "size",
                "_20Px"
              ),

              [sty.tagFilterLink10Px2__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: "tag",
              value: args.textBase10Px2,
              className: classNames(sty.slotTargetTextBase10Px2, {
                [sty.slotTargetTextBase10Px2__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),

                [sty.slotTargetTextBase10Px2__color_green_type_ghost]:
                  hasVariant(variants, "color", "green") &&
                  hasVariant(variants, "type", "ghost"),
                [sty.slotTargetTextBase10Px2__size__12Px]: hasVariant(
                  variants,
                  "size",
                  "_12Px"
                ),

                [sty.slotTargetTextBase10Px2__size__14Px]: hasVariant(
                  variants,
                  "size",
                  "_14Px"
                ),

                [sty.slotTargetTextBase10Px2__size__16Px]: hasVariant(
                  variants,
                  "size",
                  "_16Px"
                ),

                [sty.slotTargetTextBase10Px2__size__18Px]: hasVariant(
                  variants,
                  "size",
                  "_18Px"
                ),

                [sty.slotTargetTextBase10Px2__size__20Px]: hasVariant(
                  variants,
                  "size",
                  "_20Px"
                ),

                [sty.slotTargetTextBase10Px2__type_ghost]: hasVariant(
                  variants,
                  "type",
                  "ghost"
                ),

                [sty.slotTargetTextBase10Px2__type_ghost_color_blue]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetTextBase10Px2__type_ghost_color_brand]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetTextBase10Px2__type_ghost_color_magenta]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetTextBase10Px2__type_ghost_color_pink]:
                  hasVariant(variants, "type", "ghost") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetTextBase10Px2__type_outline]: hasVariant(
                  variants,
                  "type",
                  "outline"
                ),

                [sty.slotTargetTextBase10Px2__type_outline_color_blue]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "blue"),
                [sty.slotTargetTextBase10Px2__type_outline_color_brand]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "brand"),
                [sty.slotTargetTextBase10Px2__type_outline_color_green]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "green"),
                [sty.slotTargetTextBase10Px2__type_outline_color_magenta]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "magenta"),
                [sty.slotTargetTextBase10Px2__type_outline_color_pink]:
                  hasVariant(variants, "type", "outline") &&
                  hasVariant(variants, "color", "pink"),
                [sty.slotTargetTextBase10Px2__type_secondary]: hasVariant(
                  variants,
                  "type",
                  "secondary"
                )
              })
            })}
          </p.PlasmicLink>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "textlinkParent",
    "tagFilterLinkBase",
    "tagFilterLink6Px",
    "tagFilterLink8Px",
    "tagFilterLink10Px",
    "tagFilterLink12Px",
    "tagFilterLink14Px",
    "tagFilterLink10Px2"
  ],

  textlinkParent: [
    "textlinkParent",
    "tagFilterLinkBase",
    "tagFilterLink6Px",
    "tagFilterLink8Px",
    "tagFilterLink10Px",
    "tagFilterLink12Px",
    "tagFilterLink14Px",
    "tagFilterLink10Px2"
  ],

  tagFilterLinkBase: ["tagFilterLinkBase"],
  tagFilterLink6Px: ["tagFilterLink6Px"],
  tagFilterLink8Px: ["tagFilterLink8Px"],
  tagFilterLink10Px: ["tagFilterLink10Px"],
  tagFilterLink12Px: ["tagFilterLink12Px"],
  tagFilterLink14Px: ["tagFilterLink14Px"],
  tagFilterLink10Px2: ["tagFilterLink10Px2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTagBadge__ArgProps,
      internalVariantPropNames: PlasmicTagBadge__VariantProps
    });

    return PlasmicTagBadge__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTagBadge";
  } else {
    func.displayName = `PlasmicTagBadge.${nodeName}`;
  }
  return func;
}

export const PlasmicTagBadge = Object.assign(
  // Top-level PlasmicTagBadge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textlinkParent: makeNodeComponent("textlinkParent"),
    tagFilterLinkBase: makeNodeComponent("tagFilterLinkBase"),
    tagFilterLink6Px: makeNodeComponent("tagFilterLink6Px"),
    tagFilterLink8Px: makeNodeComponent("tagFilterLink8Px"),
    tagFilterLink10Px: makeNodeComponent("tagFilterLink10Px"),
    tagFilterLink12Px: makeNodeComponent("tagFilterLink12Px"),
    tagFilterLink14Px: makeNodeComponent("tagFilterLink14Px"),
    tagFilterLink10Px2: makeNodeComponent("tagFilterLink10Px2"),
    // Metadata about props expected for PlasmicTagBadge
    internalVariantProps: PlasmicTagBadge__VariantProps,
    internalArgProps: PlasmicTagBadge__ArgProps
  }
);

export default PlasmicTagBadge;
/* prettier-ignore-end */
