// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: frbDg7XY-m
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuIconListItem from "../../MenuIconListItem"; // plasmic-import: 61axZSTp8Y/component
import { useLayout } from "./PlasmicGlobalVariant__Layout"; // plasmic-import: yRz57WAHKe/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPanelPartnerSectionAccount.module.css"; // plasmic-import: frbDg7XY-m/css
import NotificationIcon from "./icons/PlasmicIcon__Notification"; // plasmic-import: rEeGdo5vaH/icon
import SettingsIcon from "./icons/PlasmicIcon__Settings"; // plasmic-import: QA4fGpoajM/icon

export const PlasmicPanelPartnerSectionAccount__VariantProps = new Array();

export const PlasmicPanelPartnerSectionAccount__ArgProps = new Array();

function PlasmicPanelPartnerSectionAccount__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    layout: useLayout()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_layout_isSellerView]: hasVariant(
          globalVariants,
          "layout",
          "isSellerView"
        )
      })}
    >
      <p.Stack
        as={"header"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        hasGap={true}
        className={classNames(projectcss.all, sty.header)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.text__global_layout_isSellerView]: hasVariant(
                globalVariants,
                "layout",
                "isSellerView"
              )
            }
          )}
        >
          {"Account"}
        </div>
      </p.Stack>

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__t17Tz)}
        destination={"/notifications"}
        navIcon={
          <NotificationIcon
            data-plasmic-name={"navImage2"}
            data-plasmic-override={overrides.navImage2}
            className={classNames(projectcss.all, sty.navImage2, {
              [sty.navImage2__global_layout_isSellerView]: hasVariant(
                globalVariants,
                "layout",
                "isSellerView"
              )
            })}
            role={"img"}
          />
        }
        navText={"Notifications"}
        renderContext={"sidebar"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__utJTz)}
        destination={"/edit/team/settings"}
        navIcon={
          <SettingsIcon
            data-plasmic-name={"navImage"}
            data-plasmic-override={overrides.navImage}
            className={classNames(projectcss.all, sty.navImage, {
              [sty.navImage__global_layout_isSellerView]: hasVariant(
                globalVariants,
                "layout",
                "isSellerView"
              )
            })}
            role={"img"}
          />
        }
        navText={"Settings"}
        renderContext={"sidebar"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "text", "navImage2", "navImage"],
  header: ["header", "text"],
  text: ["text"],
  navImage2: ["navImage2"],
  navImage: ["navImage"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelPartnerSectionAccount__ArgProps,
      internalVariantPropNames: PlasmicPanelPartnerSectionAccount__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPanelPartnerSectionAccount__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelPartnerSectionAccount";
  } else {
    func.displayName = `PlasmicPanelPartnerSectionAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelPartnerSectionAccount = Object.assign(
  // Top-level PlasmicPanelPartnerSectionAccount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    text: makeNodeComponent("text"),
    navImage2: makeNodeComponent("navImage2"),
    navImage: makeNodeComponent("navImage"),
    // Metadata about props expected for PlasmicPanelPartnerSectionAccount
    internalVariantProps: PlasmicPanelPartnerSectionAccount__VariantProps,
    internalArgProps: PlasmicPanelPartnerSectionAccount__ArgProps
  }
);

export default PlasmicPanelPartnerSectionAccount;
/* prettier-ignore-end */
