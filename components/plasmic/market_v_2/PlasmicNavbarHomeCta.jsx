// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 5UV_WbRXrs
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarLogo from "../../NavbarLogo"; // plasmic-import: oDDjpt5lQZ/component
import TextLinkUnderlinePrimary from "../../TextLinkUnderlinePrimary"; // plasmic-import: fFeX6kEAMB/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicNavbarHomeCta.module.css"; // plasmic-import: 5UV_WbRXrs/css

export const PlasmicNavbarHomeCta__VariantProps = new Array("color");

export const PlasmicNavbarHomeCta__ArgProps = new Array();

function PlasmicNavbarHomeCta__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_dark]: hasVariant(variants, "color", "dark")
      })}
    >
      <NavbarLogo
        data-plasmic-name={"navbarLogo"}
        data-plasmic-override={overrides.navbarLogo}
        className={classNames("__wab_instance", sty.navbarLogo, {
          [sty.navbarLogo__color_dark]: hasVariant(variants, "color", "dark")
        })}
        light={hasVariant(variants, "color", "dark") ? "light" : undefined}
      />

      {(
        hasVariant(globalVariants, "screen", "mobileAPrimary") ? true : true
      ) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__eV2N, {
            [sty.box__color_dark__eV2N90H3U]: hasVariant(
              variants,
              "color",
              "dark"
            )
          })}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileAPrimary")
              ? false
              : hasVariant(globalVariants, "screen", "desktopPrimary")
              ? true
              : true
          ) ? (
            <TextLinkUnderlinePrimary
              data-plasmic-name={"textLinkUnderlinePrimary"}
              data-plasmic-override={overrides.textLinkUnderlinePrimary}
              className={classNames(
                "__wab_instance",
                sty.textLinkUnderlinePrimary,
                {
                  [sty.textLinkUnderlinePrimary__color_dark]: hasVariant(
                    variants,
                    "color",
                    "dark"
                  )
                }
              )}
              color={
                hasVariant(variants, "color", "dark") ? "light" : undefined
              }
              size={"_14"}
              target={"/member-pricing"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__hyKmE,
                  {
                    [sty.box__color_dark__hyKmE90H3U]: hasVariant(
                      variants,
                      "color",
                      "dark"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "screen", "desktopPrimary")
                  ? "Become a member"
                  : "Become a member"}
              </div>
            </TextLinkUnderlinePrimary>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileAPrimary") ? true : true
          ) ? (
            <ButtonPrimary
              data-plasmic-name={"buttonPrimary"}
              data-plasmic-override={overrides.buttonPrimary}
              className={classNames("__wab_instance")}
              color={"brand"}
              size={
                hasVariant(globalVariants, "screen", "mobileAPrimary")
                  ? "_90"
                  : "_140"
              }
              target={"/partner-pricing"}
              type={"primary"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__msX8U,
                  {
                    [sty.box__color_dark__msX8U90H3U]: hasVariant(
                      variants,
                      "color",
                      "dark"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "screen", "desktopPrimary")
                  ? "Partner"
                  : "Partner"}
              </div>
            </ButtonPrimary>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "navbarLogo", "textLinkUnderlinePrimary", "buttonPrimary"],
  navbarLogo: ["navbarLogo"],
  textLinkUnderlinePrimary: ["textLinkUnderlinePrimary"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarHomeCta__ArgProps,
      internalVariantPropNames: PlasmicNavbarHomeCta__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNavbarHomeCta__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarHomeCta";
  } else {
    func.displayName = `PlasmicNavbarHomeCta.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarHomeCta = Object.assign(
  // Top-level PlasmicNavbarHomeCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarLogo: makeNodeComponent("navbarLogo"),
    textLinkUnderlinePrimary: makeNodeComponent("textLinkUnderlinePrimary"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicNavbarHomeCta
    internalVariantProps: PlasmicNavbarHomeCta__VariantProps,
    internalArgProps: PlasmicNavbarHomeCta__ArgProps
  }
);

export default PlasmicNavbarHomeCta;
/* prettier-ignore-end */
