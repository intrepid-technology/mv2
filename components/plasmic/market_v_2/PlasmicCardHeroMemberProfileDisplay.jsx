// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: YUvGYQ5tJXz
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatar from "../../UserAvatar"; // plasmic-import: KmwWxjrE8L/component
import TagPartnerA from "../../TagPartnerA"; // plasmic-import: EdiwiVT346/component
import BadgeCommunityRating from "../../BadgeCommunityRating"; // plasmic-import: 0Y8M1lpCIf/component
import IconPrimary from "../../IconPrimary"; // plasmic-import: -fEFICkFUf/component
import AvatarGroupPrimary from "../../AvatarGroupPrimary"; // plasmic-import: JOFGXHZCoU/component
import ElementLocationPrimary from "../../ElementLocationPrimary"; // plasmic-import: D70VD4gl3mo/component
import ButtonLinkPrimary from "../../ButtonLinkPrimary"; // plasmic-import: d7dGAYuRCt/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants as useScreenVariantso9SjFZaOqjqz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardHeroMemberProfileDisplay.module.css"; // plasmic-import: YUvGYQ5tJXz/css
import Icon171Icon from "./icons/PlasmicIcon__Icon171"; // plasmic-import: RfkUw6C5x0/icon
import TeamPartnersIcon from "./icons/PlasmicIcon__TeamPartners"; // plasmic-import: nykSsHgmL/icon
import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: 2qZ8N9GyOr/icon

export const PlasmicCardHeroMemberProfileDisplay__VariantProps = new Array(
  "userState"
);

export const PlasmicCardHeroMemberProfileDisplay__ArgProps = new Array();

function PlasmicCardHeroMemberProfileDisplay__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso9SjFZaOqjqz()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(projectcss.all, sty.parent, {
          [sty.parent__userState_loggedIn]: hasVariant(
            variants,
            "userState",
            "loggedIn"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"userProfileHeadline"}
          data-plasmic-override={overrides.userProfileHeadline}
          hasGap={true}
          className={classNames(projectcss.all, sty.userProfileHeadline)}
        >
          <UserAvatar
            data-plasmic-name={"userAvatar"}
            data-plasmic-override={overrides.userAvatar}
            navUserAvatar80={
              <img
                data-plasmic-name={"navUserAvatar80"}
                data-plasmic-override={overrides.navUserAvatar80}
                alt={""}
                className={classNames(projectcss.img, sty.navUserAvatar80)}
                src={
                  "/plasmic/market_v_2/images/userAvatarForPresentationjpg.jpeg"
                }
              />
            }
            size={"_80"}
            verified={
              hasVariant(globalVariants, "screen", "desktop") ? true : true
            }
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"userDetailParent"}
            data-plasmic-override={overrides.userDetailParent}
            hasGap={true}
            className={classNames(projectcss.all, sty.userDetailParent)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"userFirstLastName"}
              data-plasmic-override={overrides.userFirstLastName}
              hasGap={true}
              className={classNames(projectcss.all, sty.userFirstLastName)}
            >
              <div
                data-plasmic-name={"firstNameParent"}
                data-plasmic-override={overrides.firstNameParent}
                className={classNames(projectcss.all, sty.firstNameParent)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a2Y3
                  )}
                >
                  {"Annie"}
                </div>
              </div>

              <div
                data-plasmic-name={"lastNameParent"}
                data-plasmic-override={overrides.lastNameParent}
                className={classNames(projectcss.all, sty.lastNameParent)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mD7Z
                  )}
                >
                  {"Young Son"}
                </div>
              </div>
            </p.Stack>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"displayNameParent2"}
                data-plasmic-override={overrides.displayNameParent2}
                hasGap={true}
                className={classNames(projectcss.all, sty.displayNameParent2)}
              >
                <div
                  data-plasmic-name={"atSignParent"}
                  data-plasmic-override={overrides.atSignParent}
                  className={classNames(projectcss.all, sty.atSignParent)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__men51
                    )}
                  >
                    {"@"}
                  </div>
                </div>

                <div
                  data-plasmic-name={"displayNameheadlineParent"}
                  data-plasmic-override={overrides.displayNameheadlineParent}
                  className={classNames(
                    projectcss.all,
                    sty.displayNameheadlineParent
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9Y1Y0
                    )}
                  >
                    {"pixiedesign"}
                  </div>
                </div>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"companyStatsParent"}
              data-plasmic-override={overrides.companyStatsParent}
              hasGap={true}
              className={classNames(projectcss.all, sty.companyStatsParent)}
            >
              <TagPartnerA
                data-plasmic-name={"memberStatus2"}
                data-plasmic-override={overrides.memberStatus2}
                className={classNames("__wab_instance", sty.memberStatus2)}
              />

              <BadgeCommunityRating
                data-plasmic-name={"individualRating"}
                data-plasmic-override={overrides.individualRating}
                className={classNames("__wab_instance", sty.individualRating)}
              />

              {(
                hasVariant(globalVariants, "screen", "iphone12ProMax")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamAvatarGroupParent"}
                  data-plasmic-override={overrides.teamAvatarGroupParent}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.teamAvatarGroupParent
                  )}
                >
                  {(
                    hasVariant(globalVariants, "screen", "iphone12ProMax")
                      ? true
                      : hasVariant(globalVariants, "screen", "desktop")
                      ? true
                      : true
                  ) ? (
                    <IconPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.iconPrimary___8M9Y
                      )}
                      size={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? "_18Px"
                          : "_18Px"
                      }
                      svgIcon16Px={
                        <p.PlasmicIcon
                          data-plasmic-name={"svgIcon3"}
                          data-plasmic-override={overrides.svgIcon3}
                          PlasmicIconType={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? TeamPartnersIcon
                              : Icon171Icon
                          }
                          className={classNames(projectcss.all, sty.svgIcon3)}
                          role={"img"}
                        />
                      }
                      svgIcon18Px={
                        <p.PlasmicIcon
                          data-plasmic-name={"svgIcon4"}
                          data-plasmic-override={overrides.svgIcon4}
                          PlasmicIconType={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? TeamPartnersIcon
                              : TeamPartnersIcon
                          }
                          className={classNames(projectcss.all, sty.svgIcon4)}
                          role={"img"}
                        />
                      }
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "iphone12ProMax")
                      ? true
                      : true
                  ) ? (
                    <AvatarGroupPrimary
                      data-plasmic-name={"avatarGroupPrimary"}
                      data-plasmic-override={overrides.avatarGroupPrimary}
                      amount={"_3"}
                      className={classNames("__wab_instance")}
                      groupSize={"_16"}
                    />
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>

            {(
              hasVariant(globalVariants, "screen", "iphone12ProMax")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"locationParent"}
                data-plasmic-override={overrides.locationParent}
                hasGap={true}
                className={classNames(projectcss.all, sty.locationParent)}
              >
                <ElementLocationPrimary
                  data-plasmic-name={"elementLocationPrimary"}
                  data-plasmic-override={overrides.elementLocationPrimary}
                  className={classNames(
                    "__wab_instance",
                    sty.elementLocationPrimary
                  )}
                />
              </p.Stack>
            ) : null}
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"userMemberDescription"}
          data-plasmic-override={overrides.userMemberDescription}
          hasGap={true}
          className={classNames(projectcss.all, sty.userMemberDescription)}
        >
          <div
            data-plasmic-name={"_80CharactersMax"}
            data-plasmic-override={overrides._80CharactersMax}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty._80CharactersMax
            )}
          >
            {hasVariant(globalVariants, "screen", "desktop")
              ? "Designer and engineer. Ex Uber, Ex-Shopify. #travel"
              : "Designer and engineer. Ex Uber, Ex-Shopify. #travel"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"userButtons"}
          data-plasmic-override={overrides.userButtons}
          hasGap={true}
          className={classNames(projectcss.all, sty.userButtons, {
            [sty.userButtons__userState_loggedIn]: hasVariant(
              variants,
              "userState",
              "loggedIn"
            )
          })}
        >
          {(hasVariant(variants, "userState", "loggedIn") ? true : false) ? (
            <ButtonLinkPrimary
              data-plasmic-name={"buttonLinkPrimary"}
              data-plasmic-override={overrides.buttonLinkPrimary}
              className={classNames("__wab_instance", sty.buttonLinkPrimary, {
                [sty.buttonLinkPrimary__userState_loggedIn]: hasVariant(
                  variants,
                  "userState",
                  "loggedIn"
                )
              })}
              color={
                hasVariant(variants, "userState", "loggedIn")
                  ? "primary"
                  : undefined
              }
              height={
                hasVariant(variants, "userState", "loggedIn")
                  ? "_36"
                  : undefined
              }
              text={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2RhX,
                    {
                      [sty.text__userState_loggedIn___2RhXmCOui]: hasVariant(
                        variants,
                        "userState",
                        "loggedIn"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "userState", "loggedIn")
                    ? "Edit"
                    : "Hyper Link"}
                </div>
              }
              type={
                hasVariant(variants, "userState", "loggedIn")
                  ? "outline"
                  : undefined
              }
              width={
                hasVariant(variants, "userState", "loggedIn")
                  ? "_120"
                  : undefined
              }
            />
          ) : null}
          {(hasVariant(variants, "userState", "loggedIn") ? false : true) ? (
            <ButtonPrimary
              data-plasmic-name={"buttonPrimary"}
              data-plasmic-override={overrides.buttonPrimary}
              color={
                hasVariant(variants, "userState", "loggedIn")
                  ? "primary"
                  : "primary"
              }
              type={
                hasVariant(variants, "userState", "loggedIn")
                  ? "outline"
                  : "primary"
              }
              width={"_120"}
            >
              {hasVariant(variants, "userState", "loggedIn")
                ? "Edit"
                : "Follow"}
            </ButtonPrimary>
          ) : null}

          <IconPrimary
            className={classNames("__wab_instance", sty.iconPrimary__zkZL)}
            size={"_36Px"}
            svgIcon={
              <BookmarkIcon
                data-plasmic-name={"svgIcon"}
                data-plasmic-override={overrides.svgIcon}
                className={classNames(projectcss.all, sty.svgIcon)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "userProfileHeadline",
    "userAvatar",
    "navUserAvatar80",
    "userDetailParent",
    "userFirstLastName",
    "firstNameParent",
    "lastNameParent",
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent",
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary",
    "locationParent",
    "elementLocationPrimary",
    "userMemberDescription",
    "_80CharactersMax",
    "userButtons",
    "buttonLinkPrimary",
    "buttonPrimary",
    "svgIcon"
  ],

  parent: [
    "parent",
    "userProfileHeadline",
    "userAvatar",
    "navUserAvatar80",
    "userDetailParent",
    "userFirstLastName",
    "firstNameParent",
    "lastNameParent",
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent",
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary",
    "locationParent",
    "elementLocationPrimary",
    "userMemberDescription",
    "_80CharactersMax",
    "userButtons",
    "buttonLinkPrimary",
    "buttonPrimary",
    "svgIcon"
  ],

  userProfileHeadline: [
    "userProfileHeadline",
    "userAvatar",
    "navUserAvatar80",
    "userDetailParent",
    "userFirstLastName",
    "firstNameParent",
    "lastNameParent",
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent",
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary",
    "locationParent",
    "elementLocationPrimary"
  ],

  userAvatar: ["userAvatar", "navUserAvatar80"],
  navUserAvatar80: ["navUserAvatar80"],
  userDetailParent: [
    "userDetailParent",
    "userFirstLastName",
    "firstNameParent",
    "lastNameParent",
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent",
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary",
    "locationParent",
    "elementLocationPrimary"
  ],

  userFirstLastName: ["userFirstLastName", "firstNameParent", "lastNameParent"],
  firstNameParent: ["firstNameParent"],
  lastNameParent: ["lastNameParent"],
  displayNameParent2: [
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent"
  ],

  atSignParent: ["atSignParent"],
  displayNameheadlineParent: ["displayNameheadlineParent"],
  companyStatsParent: [
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary"
  ],

  memberStatus2: ["memberStatus2"],
  individualRating: ["individualRating"],
  teamAvatarGroupParent: [
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary"
  ],

  svgIcon3: ["svgIcon3"],
  svgIcon4: ["svgIcon4"],
  avatarGroupPrimary: ["avatarGroupPrimary"],
  locationParent: ["locationParent", "elementLocationPrimary"],
  elementLocationPrimary: ["elementLocationPrimary"],
  userMemberDescription: ["userMemberDescription", "_80CharactersMax"],
  _80CharactersMax: ["_80CharactersMax"],
  userButtons: ["userButtons", "buttonLinkPrimary", "buttonPrimary", "svgIcon"],
  buttonLinkPrimary: ["buttonLinkPrimary"],
  buttonPrimary: ["buttonPrimary"],
  svgIcon: ["svgIcon"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardHeroMemberProfileDisplay__ArgProps,
      internalVariantPropNames:
        PlasmicCardHeroMemberProfileDisplay__VariantProps
    });

    return PlasmicCardHeroMemberProfileDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardHeroMemberProfileDisplay";
  } else {
    func.displayName = `PlasmicCardHeroMemberProfileDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicCardHeroMemberProfileDisplay = Object.assign(
  // Top-level PlasmicCardHeroMemberProfileDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    userProfileHeadline: makeNodeComponent("userProfileHeadline"),
    userAvatar: makeNodeComponent("userAvatar"),
    navUserAvatar80: makeNodeComponent("navUserAvatar80"),
    userDetailParent: makeNodeComponent("userDetailParent"),
    userFirstLastName: makeNodeComponent("userFirstLastName"),
    firstNameParent: makeNodeComponent("firstNameParent"),
    lastNameParent: makeNodeComponent("lastNameParent"),
    displayNameParent2: makeNodeComponent("displayNameParent2"),
    atSignParent: makeNodeComponent("atSignParent"),
    displayNameheadlineParent: makeNodeComponent("displayNameheadlineParent"),
    companyStatsParent: makeNodeComponent("companyStatsParent"),
    memberStatus2: makeNodeComponent("memberStatus2"),
    individualRating: makeNodeComponent("individualRating"),
    teamAvatarGroupParent: makeNodeComponent("teamAvatarGroupParent"),
    svgIcon3: makeNodeComponent("svgIcon3"),
    svgIcon4: makeNodeComponent("svgIcon4"),
    avatarGroupPrimary: makeNodeComponent("avatarGroupPrimary"),
    locationParent: makeNodeComponent("locationParent"),
    elementLocationPrimary: makeNodeComponent("elementLocationPrimary"),
    userMemberDescription: makeNodeComponent("userMemberDescription"),
    _80CharactersMax: makeNodeComponent("_80CharactersMax"),
    userButtons: makeNodeComponent("userButtons"),
    buttonLinkPrimary: makeNodeComponent("buttonLinkPrimary"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    svgIcon: makeNodeComponent("svgIcon"),
    // Metadata about props expected for PlasmicCardHeroMemberProfileDisplay
    internalVariantProps: PlasmicCardHeroMemberProfileDisplay__VariantProps,
    internalArgProps: PlasmicCardHeroMemberProfileDisplay__ArgProps
  }
);

export default PlasmicCardHeroMemberProfileDisplay;
/* prettier-ignore-end */
