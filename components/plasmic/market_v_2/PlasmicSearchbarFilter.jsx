// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 5wnmDA777-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicSearchbarFilter.module.css"; // plasmic-import: 5wnmDA777-/css
import SearchPlusLightIcon from "../remote_v_1/icons/PlasmicIcon__SearchPlusLight"; // plasmic-import: FewmN1Iq6W/icon
import PlusLightIcon from "./icons/PlasmicIcon__PlusLight"; // plasmic-import: QGTlaxIryG/icon

export const PlasmicSearchbarFilter__VariantProps = new Array(
  "width",
  "height"
);

export const PlasmicSearchbarFilter__ArgProps = new Array();

function PlasmicSearchbarFilter__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootheight__32]: hasVariant(variants, "height", "_32"),
          [sty.rootheight__36]: hasVariant(variants, "height", "_36"),
          [sty.rootheight__40]: hasVariant(variants, "height", "_40"),
          [sty.rootheight__48]: hasVariant(variants, "height", "_48"),
          [sty.rootwidth__180]: hasVariant(variants, "width", "_180"),
          [sty.rootwidth__270]: hasVariant(variants, "width", "_270"),
          [sty.rootwidth__360]: hasVariant(variants, "width", "_360"),
          [sty.rootwidth__540]: hasVariant(variants, "width", "_540"),
          [sty.rootwidth_stretch]: hasVariant(variants, "width", "stretch")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <SearchPlusLightIcon
          className={classNames(projectcss.all, sty.svg__epgKk)}
          role={"img"}
        />
      </div>

      <input
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput ?? overrides.textbox}
        className={classNames(projectcss.all, projectcss.input, sty.textInput)}
        placeholder={""}
        size={1}
        type={"text"}
        value={""}
      />

      <p.Stack
        as={"button"}
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.button, sty.button)}
      >
        <PlusLightIcon
          className={classNames(projectcss.all, sty.svg__hYtaT)}
          role={"img"}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            { [sty.textheight__32]: hasVariant(variants, "height", "_32") }
          )}
        >
          {"Add"}
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "textInput", "textbox", "button", "text"],
  freeBox: ["freeBox"],
  textInput: ["textInput", "textbox"],
  button: ["button", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearchbarFilter__ArgProps,
      internalVariantPropNames: PlasmicSearchbarFilter__VariantProps
    });

    return PlasmicSearchbarFilter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchbarFilter";
  } else {
    func.displayName = `PlasmicSearchbarFilter.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchbarFilter = Object.assign(
  // Top-level PlasmicSearchbarFilter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicSearchbarFilter
    internalVariantProps: PlasmicSearchbarFilter__VariantProps,
    internalArgProps: PlasmicSearchbarFilter__ArgProps
  }
);

export default PlasmicSearchbarFilter;
/* prettier-ignore-end */
