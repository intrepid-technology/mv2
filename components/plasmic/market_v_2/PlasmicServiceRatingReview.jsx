// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: l-dEPw55Sx
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicServiceRatingReview.module.css"; // plasmic-import: l-dEPw55Sx/css
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: mxKobpNi3O/icon

export const PlasmicServiceRatingReview__VariantProps = new Array();

export const PlasmicServiceRatingReview__ArgProps = new Array();

function PlasmicServiceRatingReview__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__t8H1X)}>
        <Icon48Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />
      </div>

      <div
        data-plasmic-name={"serviceAggregateRating"}
        data-plasmic-override={overrides.serviceAggregateRating}
        className={classNames(defaultcss.all, sty.serviceAggregateRating)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__os5Mt
          )}
        >
          {"4.9"}
        </div>
      </div>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__br5LD
        )}
      >
        {"|"}
      </div>

      <div
        data-plasmic-name={"serviceAggregateReviews"}
        data-plasmic-override={overrides.serviceAggregateReviews}
        className={classNames(defaultcss.all, sty.serviceAggregateReviews)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__lsm4G
          )}
        >
          {"10"}
        </div>
      </div>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__iekLt
        )}
      >
        {"Reviews"}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg", "serviceAggregateRating", "serviceAggregateReviews"],
  svg: ["svg"],
  serviceAggregateRating: ["serviceAggregateRating"],
  serviceAggregateReviews: ["serviceAggregateReviews"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServiceRatingReview__ArgProps,
      internalVariantPropNames: PlasmicServiceRatingReview__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicServiceRatingReview__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServiceRatingReview";
  } else {
    func.displayName = `PlasmicServiceRatingReview.${nodeName}`;
  }
  return func;
}

export const PlasmicServiceRatingReview = Object.assign(
  // Top-level PlasmicServiceRatingReview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    serviceAggregateRating: makeNodeComponent("serviceAggregateRating"),
    serviceAggregateReviews: makeNodeComponent("serviceAggregateReviews"),
    // Metadata about props expected for PlasmicServiceRatingReview
    internalVariantProps: PlasmicServiceRatingReview__VariantProps,
    internalArgProps: PlasmicServiceRatingReview__ArgProps
  }
);

export default PlasmicServiceRatingReview;
/* prettier-ignore-end */
