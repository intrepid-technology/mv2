// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: sv774W0v3F
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardCta.module.css"; // plasmic-import: sv774W0v3F/css

export const PlasmicCardCta__VariantProps = new Array("center");

export const PlasmicCardCta__ArgProps = new Array("children", "slot", "slot2");

function PlasmicCardCta__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__center]: hasVariant(variants, "center", "center")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__pjpjd)}
      >
        <div className={classNames(defaultcss.all, sty.box__gTubY)}>
          <div className={classNames(defaultcss.all, sty.box__fQ2Rt)}>
            {p.renderPlasmicSlot({
              defaultContents: "Business Analytics",
              value: args.slot2,
              className: classNames(sty.slotSlot2, {
                [sty.slotSlot2__center]: hasVariant(
                  variants,
                  "center",
                  "center"
                )
              })
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.box__y0NOz)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubHeadline"}
            data-plasmic-override={overrides.headlineSubHeadline}
            hasGap={true}
            className={classNames(defaultcss.all, sty.headlineSubHeadline)}
          >
            <div className={classNames(defaultcss.all, sty.box__g7ETy)}>
              <div className={classNames(defaultcss.all, sty.box__g8YHo)}>
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Manage and grow your business like never before",
                  value: args.children,
                  className: classNames(sty.slotChildren, {
                    [sty.slotChildren__center]: hasVariant(
                      variants,
                      "center",
                      "center"
                    )
                  })
                })}
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.box__ge5FL)}>
              <div className={classNames(defaultcss.all, sty.box__nrSpi)}>
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Gain the insights you need to growâ€”use a single dashboard to manage orders, projects, reviews, and payments from anywhere.\n",
                  value: args.slot,
                  className: classNames(sty.slotSlot, {
                    [sty.slotSlot__center]: hasVariant(
                      variants,
                      "center",
                      "center"
                    )
                  })
                })}
              </div>
            </div>
          </p.Stack>
        </div>
      </p.Stack>

      <ButtonPrimary
        data-plasmic-name={"buttonPrimary"}
        data-plasmic-override={overrides.buttonPrimary}
        className={classNames("__wab_instance", sty.buttonPrimary)}
        color={"brand"}
        size={"_140"}
      >
        {hasVariant(globalVariants, "screen", "desktopPrimary")
          ? "Apply to partner"
          : "Start free trial"}
      </ButtonPrimary>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "headlineSubHeadline", "buttonPrimary"],
  headlineSubHeadline: ["headlineSubHeadline"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardCta__ArgProps,
      internalVariantPropNames: PlasmicCardCta__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCardCta__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardCta";
  } else {
    func.displayName = `PlasmicCardCta.${nodeName}`;
  }
  return func;
}

export const PlasmicCardCta = Object.assign(
  // Top-level PlasmicCardCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headlineSubHeadline: makeNodeComponent("headlineSubHeadline"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicCardCta
    internalVariantProps: PlasmicCardCta__VariantProps,
    internalArgProps: PlasmicCardCta__ArgProps
  }
);

export default PlasmicCardCta;
/* prettier-ignore-end */
