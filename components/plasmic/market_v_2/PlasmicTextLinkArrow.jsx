// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: MlCPfXGkVN
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicTextLinkArrow.module.css"; // plasmic-import: MlCPfXGkVN/css
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: TsoGzKShgI/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: alaRRmprOn/icon

export const PlasmicTextLinkArrow__VariantProps = new Array(
  "direction",
  "color",
  "size"
);

export const PlasmicTextLinkArrow__ArgProps = new Array(
  "children",
  "svgRight",
  "svgLeft",
  "id",
  "destination"
);

function PlasmicTextLinkArrow__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_dark]: hasVariant(variants, "color", "dark"),
          [sty.rootcolor_light]: hasVariant(variants, "color", "light"),
          [sty.rootcolor_primary]: hasVariant(variants, "color", "primary")
        }
      )}
      component={Link}
      href={args.destination}
      id={args.id}
      platform={"nextjs"}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(projectcss.all, sty.parent, {
          [sty.parentdirection_left]: hasVariant(variants, "direction", "left"),
          [sty.parentdirection_right]: hasVariant(
            variants,
            "direction",
            "right"
          )
        })}
      >
        {(hasVariant(variants, "direction", "right") ? false : true) ? (
          <div
            data-plasmic-name={"svgLeftParent"}
            data-plasmic-override={overrides.svgLeftParent}
            className={classNames(projectcss.all, sty.svgLeftParent, {
              [sty.svgLeftParentdirection_left]: hasVariant(
                variants,
                "direction",
                "left"
              ),

              [sty.svgLeftParentdirection_right]: hasVariant(
                variants,
                "direction",
                "right"
              ),

              [sty.svgLeftParentsize__16]: hasVariant(variants, "size", "_16"),
              [sty.svgLeftParentsize__18]: hasVariant(variants, "size", "_18"),
              [sty.svgLeftParentsize__24]: hasVariant(variants, "size", "_24")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <ChevronLeftIcon
                  className={classNames(projectcss.all, sty.svg__f2Wy)}
                  role={"img"}
                />
              ),

              value: args.svgLeft,
              className: classNames(sty.slotTargetSvgLeft, {
                [sty.slotTargetSvgLeftcolor_dark]: hasVariant(
                  variants,
                  "color",
                  "dark"
                ),

                [sty.slotTargetSvgLeftcolor_light]: hasVariant(
                  variants,
                  "color",
                  "light"
                ),

                [sty.slotTargetSvgLeftcolor_primary]: hasVariant(
                  variants,
                  "color",
                  "primary"
                ),

                [sty.slotTargetSvgLeftsize__16]: hasVariant(
                  variants,
                  "size",
                  "_16"
                )
              })
            })}
          </div>
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: "link",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolor_dark]: hasVariant(
              variants,
              "color",
              "dark"
            ),

            [sty.slotTargetChildrencolor_light]: hasVariant(
              variants,
              "color",
              "light"
            ),

            [sty.slotTargetChildrencolor_primary]: hasVariant(
              variants,
              "color",
              "primary"
            ),

            [sty.slotTargetChildrensize__14]: hasVariant(
              variants,
              "size",
              "_14"
            ),

            [sty.slotTargetChildrensize__16]: hasVariant(
              variants,
              "size",
              "_16"
            ),

            [sty.slotTargetChildrensize__18]: hasVariant(
              variants,
              "size",
              "_18"
            ),

            [sty.slotTargetChildrensize__24]: hasVariant(
              variants,
              "size",
              "_24"
            )
          })
        })}

        {(hasVariant(variants, "direction", "left") ? false : true) ? (
          <div
            data-plasmic-name={"svgRightParent"}
            data-plasmic-override={overrides.svgRightParent}
            className={classNames(projectcss.all, sty.svgRightParent, {
              [sty.svgRightParentdirection_left]: hasVariant(
                variants,
                "direction",
                "left"
              ),

              [sty.svgRightParentsize__14]: hasVariant(variants, "size", "_14"),
              [sty.svgRightParentsize__16]: hasVariant(variants, "size", "_16"),
              [sty.svgRightParentsize__18]: hasVariant(variants, "size", "_18"),
              [sty.svgRightParentsize__24]: hasVariant(variants, "size", "_24")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <ChevronRightIcon
                  className={classNames(projectcss.all, sty.svg__apSlW)}
                  role={"img"}
                />
              ),

              value: args.svgRight,
              className: classNames(sty.slotTargetSvgRight, {
                [sty.slotTargetSvgRightcolor_dark]: hasVariant(
                  variants,
                  "color",
                  "dark"
                ),

                [sty.slotTargetSvgRightcolor_light]: hasVariant(
                  variants,
                  "color",
                  "light"
                ),

                [sty.slotTargetSvgRightcolor_primary]: hasVariant(
                  variants,
                  "color",
                  "primary"
                ),

                [sty.slotTargetSvgRightcolor_primary_direction_right]:
                  hasVariant(variants, "color", "primary") &&
                  hasVariant(variants, "direction", "right")
              })
            })}
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "parent", "svgLeftParent", "svgRightParent"],
  parent: ["parent", "svgLeftParent", "svgRightParent"],
  svgLeftParent: ["svgLeftParent"],
  svgRightParent: ["svgRightParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextLinkArrow__ArgProps,
      internalVariantPropNames: PlasmicTextLinkArrow__VariantProps
    });

    return PlasmicTextLinkArrow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextLinkArrow";
  } else {
    func.displayName = `PlasmicTextLinkArrow.${nodeName}`;
  }
  return func;
}

export const PlasmicTextLinkArrow = Object.assign(
  // Top-level PlasmicTextLinkArrow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    svgLeftParent: makeNodeComponent("svgLeftParent"),
    svgRightParent: makeNodeComponent("svgRightParent"),
    // Metadata about props expected for PlasmicTextLinkArrow
    internalVariantProps: PlasmicTextLinkArrow__VariantProps,
    internalArgProps: PlasmicTextLinkArrow__ArgProps
  }
);

export default PlasmicTextLinkArrow;
/* prettier-ignore-end */
