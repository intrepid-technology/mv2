// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: Jh4JXlZHnwY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatarButton from "../../UserAvatarButton"; // plasmic-import: w1GnXfIMuv/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicCardMemberProfile.module.css"; // plasmic-import: Jh4JXlZHnwY/css

export const PlasmicCardMemberProfile__VariantProps = new Array("session");

export const PlasmicCardMemberProfile__ArgProps = new Array();

function PlasmicCardMemberProfile__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.parent, {
        [sty.parent__session]: hasVariant(variants, "session", "session")
      })}
    >
      <UserAvatarButton
        data-plasmic-name={"userProfileAvatar"}
        data-plasmic-override={overrides.userProfileAvatar}
        avatarImage={
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(projectcss.img, sty.img)}
            src={"/plasmic/market_v_2/images/image4.png"}
          />
        }
        className={classNames("__wab_instance", sty.userProfileAvatar)}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__uAf9P)}
      >
        <div
          data-plasmic-name={"userProfileUsernameFirstName2"}
          data-plasmic-override={overrides.userProfileUsernameFirstName2}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.userProfileUsernameFirstName2
          )}
        >
          {"Collin"}
        </div>

        <div
          data-plasmic-name={"userProfileUsernameLastName2"}
          data-plasmic-override={overrides.userProfileUsernameLastName2}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.userProfileUsernameLastName2
          )}
        >
          {"Thompson"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__z3JMv)}
      >
        <div
          data-plasmic-name={"userProfileUsernameLastName"}
          data-plasmic-override={overrides.userProfileUsernameLastName}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.userProfileUsernameLastName
          )}
        >
          {"@techronin"}
        </div>
      </p.Stack>

      <ButtonPrimary
        data-plasmic-name={"buttonPrimary"}
        data-plasmic-override={overrides.buttonPrimary}
        className={classNames("__wab_instance", sty.buttonPrimary, {
          [sty.buttonPrimary__session]: hasVariant(
            variants,
            "session",
            "session"
          )
        })}
        color={"brand"}
        size={"_140"}
      >
        {hasVariant(variants, "session", "session") ? "Edit" : "Follow"}
      </ButtonPrimary>

      <div className={classNames(projectcss.all, sty.freeBox__pyBvT)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___96C2A)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___0SUgg)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__umTdy
            )}
          >
            {"123"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mwYix
            )}
          >
            {"Members"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__e6Bhh)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b1HwQ
            )}
          >
            {"123"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bjRVi
            )}
          >
            {"Partners"}
          </div>
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__wnsf6)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___8TRdX)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__my3Io)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vgpbm
            )}
          >
            {"123"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__d5Eh
            )}
          >
            {"Followers"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__oEqyk)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qrcMn
            )}
          >
            {"123"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lu7Ng
            )}
          >
            {"Following"}
          </div>
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__yYj5)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xf5Vf)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mf9Dv
          )}
        >
          {"Member since"}
        </div>

        <div
          data-plasmic-name={"userProfileTimestamp"}
          data-plasmic-override={overrides.userProfileTimestamp}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.userProfileTimestamp
          )}
        >
          {"January 2021"}
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "userProfileAvatar",
    "img",
    "userProfileUsernameFirstName2",
    "userProfileUsernameLastName2",
    "userProfileUsernameLastName",
    "buttonPrimary",
    "userProfileTimestamp"
  ],

  userProfileAvatar: ["userProfileAvatar", "img"],
  img: ["img"],
  userProfileUsernameFirstName2: ["userProfileUsernameFirstName2"],
  userProfileUsernameLastName2: ["userProfileUsernameLastName2"],
  userProfileUsernameLastName: ["userProfileUsernameLastName"],
  buttonPrimary: ["buttonPrimary"],
  userProfileTimestamp: ["userProfileTimestamp"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardMemberProfile__ArgProps,
      internalVariantPropNames: PlasmicCardMemberProfile__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCardMemberProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicCardMemberProfile";
  } else {
    func.displayName = `PlasmicCardMemberProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicCardMemberProfile = Object.assign(
  // Top-level PlasmicCardMemberProfile renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    userProfileAvatar: makeNodeComponent("userProfileAvatar"),
    img: makeNodeComponent("img"),
    userProfileUsernameFirstName2: makeNodeComponent(
      "userProfileUsernameFirstName2"
    ),

    userProfileUsernameLastName2: makeNodeComponent(
      "userProfileUsernameLastName2"
    ),

    userProfileUsernameLastName: makeNodeComponent(
      "userProfileUsernameLastName"
    ),

    buttonPrimary: makeNodeComponent("buttonPrimary"),
    userProfileTimestamp: makeNodeComponent("userProfileTimestamp"),
    // Metadata about props expected for PlasmicCardMemberProfile
    internalVariantProps: PlasmicCardMemberProfile__VariantProps,
    internalArgProps: PlasmicCardMemberProfile__ArgProps
  }
);

export default PlasmicCardMemberProfile;
/* prettier-ignore-end */
