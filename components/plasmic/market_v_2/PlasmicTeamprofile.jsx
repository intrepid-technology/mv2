// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: YFaZRbHjmq
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: BXWgCr5-vns/component
import SectionTeamProfileHero from "../../SectionTeamProfileHero"; // plasmic-import: HxQLFVQnwjF/component
import NavbarTeamUserProfile from "../../NavbarTeamUserProfile"; // plasmic-import: 6HzrYVr_1ZK/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: KmwWxjrE8L/component
import BadgeVerification from "../../BadgeVerification"; // plasmic-import: _M5uzrbjQp/component
import TagPartnerD from "../../TagPartnerD"; // plasmic-import: cHSOn6vPGV/component
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: e_QdjWvrde/component
import IconPrimary from "../../IconPrimary"; // plasmic-import: -fEFICkFUf/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import IconSocialProfile from "../../IconSocialProfile"; // plasmic-import: IC5nyjlnco/component
import CardUserprofile from "../../CardUserprofile"; // plasmic-import: 0on5_Y1mrei/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicTeamprofile.module.css"; // plasmic-import: YFaZRbHjmq/css
import LocationBIcon from "./icons/PlasmicIcon__LocationB"; // plasmic-import: YysIQ6TyFi/icon
import LocationIcon from "./icons/PlasmicIcon__Location"; // plasmic-import: XbuUvkV9FO/icon
import LanguagesIcon from "./icons/PlasmicIcon__Languages"; // plasmic-import: pqMRsl-YpM/icon
import UserIdIcon from "./icons/PlasmicIcon__UserId"; // plasmic-import: WpmSmHLAP5/icon

export const PlasmicTeamprofile__VariantProps = new Array();

export const PlasmicTeamprofile__ArgProps = new Array();

function PlasmicTeamprofile__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <SectionTeamProfileHero
            data-plasmic-name={"sectionTeamProfileHero"}
            data-plasmic-override={overrides.sectionTeamProfileHero}
            className={classNames("__wab_instance", sty.sectionTeamProfileHero)}
          />

          <NavbarTeamUserProfile
            data-plasmic-name={"navbarTeamUserProfile"}
            data-plasmic-override={overrides.navbarTeamUserProfile}
            className={classNames("__wab_instance", sty.navbarTeamUserProfile)}
            selected={
              hasVariant(globalVariants, "screen", "desktop")
                ? "about"
                : undefined
            }
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"teamAboutInfoSection"}
            data-plasmic-override={overrides.teamAboutInfoSection}
            hasGap={true}
            className={classNames(defaultcss.all, sty.teamAboutInfoSection)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"profileAboutParent"}
              data-plasmic-override={overrides.profileAboutParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.profileAboutParent)}
            >
              <div
                data-plasmic-name={"about"}
                data-plasmic-override={overrides.about}
                className={classNames(defaultcss.all, sty.about)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__aG0Ne
                  )}
                >
                  {"About"}
                </div>
              </div>

              <div
                data-plasmic-name={"textParent"}
                data-plasmic-override={overrides.textParent}
                className={classNames(defaultcss.all, sty.textParent)}
              >
                <div
                  data-plasmic-name={"text170Characters"}
                  data-plasmic-override={overrides.text170Characters}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text170Characters
                  )}
                >
                  {
                    "One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like ba"
                  }
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileCommunityParent"}
              data-plasmic-override={overrides.profileCommunityParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.profileCommunityParent)}
            >
              <div
                data-plasmic-name={"community"}
                data-plasmic-override={overrides.community}
                className={classNames(defaultcss.all, sty.community)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__gJOqe
                  )}
                >
                  {"Community"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"statsParent"}
                data-plasmic-override={overrides.statsParent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.statsParent)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberStatParent"}
                  data-plasmic-override={overrides.memberStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.memberStatParent)}
                >
                  <div
                    data-plasmic-name={"memberNumberCount"}
                    data-plasmic-override={overrides.memberNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.memberNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__qBBbj
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Subscribers"
                      : hasVariant(globalVariants, "screen", "desktop")
                      ? "Subscribers"
                      : "Members"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"partnerStatParent"}
                  data-plasmic-override={overrides.partnerStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.partnerStatParent)}
                >
                  <div
                    data-plasmic-name={"partnerNumberCount"}
                    data-plasmic-override={overrides.partnerNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.partnerNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__logCa
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Connections"
                      : "Partners"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"followersStatParent"}
                  data-plasmic-override={overrides.followersStatParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.followersStatParent
                  )}
                >
                  <div
                    data-plasmic-name={"followingNumberCount"}
                    data-plasmic-override={overrides.followingNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.followingNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__y1Tms
                    )}
                  >
                    {"Followers"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"viewsStatParent"}
                  data-plasmic-override={overrides.viewsStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.viewsStatParent)}
                >
                  <div
                    data-plasmic-name={"viewsNumberCount"}
                    data-plasmic-override={overrides.viewsNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.viewsNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__miuE
                    )}
                  >
                    {"Views"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"reactsStatParent"}
                  data-plasmic-override={overrides.reactsStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.reactsStatParent)}
                >
                  <div
                    data-plasmic-name={"reactsNumberCount"}
                    data-plasmic-override={overrides.reactsNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.reactsNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__cY2Un
                    )}
                  >
                    {"Reacts"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"savesStatParent"}
                  data-plasmic-override={overrides.savesStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.savesStatParent)}
                >
                  <div
                    data-plasmic-name={"savesNumberCount"}
                    data-plasmic-override={overrides.savesNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.savesNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___01TDu
                    )}
                  >
                    {"Saves"}
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"teamTeamCommunitySection"}
            data-plasmic-override={overrides.teamTeamCommunitySection}
            hasGap={true}
            className={classNames(defaultcss.all, sty.teamTeamCommunitySection)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"profileTeamParent"}
              data-plasmic-override={overrides.profileTeamParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.profileTeamParent)}
            >
              <div
                data-plasmic-name={"team"}
                data-plasmic-override={overrides.team}
                className={classNames(defaultcss.all, sty.team)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__koEg
                  )}
                >
                  {"Team"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"teamMemberparent"}
                data-plasmic-override={overrides.teamMemberparent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.teamMemberparent)}
              >
                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__tHlZy
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__pTIuJ
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__ui2Mr
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__xdn3N
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__g3Drd
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__lrhAk
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__lsf3S
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__f70Lx
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__u2F4L
                  )}
                  size={"_48"}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__aBCwn
                  )}
                  size={"_48"}
                />
              </p.Stack>

              <div
                data-plasmic-name={"linkTeamViewAllParent"}
                data-plasmic-override={overrides.linkTeamViewAllParent}
                className={classNames(
                  defaultcss.all,
                  sty.linkTeamViewAllParent
                )}
              >
                <p.PlasmicLink
                  data-plasmic-name={"linkTeamViewAll"}
                  data-plasmic-override={overrides.linkTeamViewAll}
                  className={classNames(defaultcss.all, sty.linkTeamViewAll)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__a24Vi
                    )}
                  >
                    {"View all team members"}
                  </div>
                </p.PlasmicLink>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileInformationParent"}
              data-plasmic-override={overrides.profileInformationParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.profileInformationParent
              )}
            >
              <div className={classNames(defaultcss.all, sty.freeBox__c8D3F)}>
                <div
                  data-plasmic-name={"details"}
                  data-plasmic-override={overrides.details}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.details
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Details"
                    : hasVariant(globalVariants, "screen", "desktop")
                    ? "Details"
                    : "Information"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"textParent5"}
                data-plasmic-override={overrides.textParent5}
                hasGap={true}
                className={classNames(defaultcss.all, sty.textParent5)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberBadges"}
                  data-plasmic-override={overrides.memberBadges}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.memberBadges)}
                >
                  <BadgeVerification
                    data-plasmic-name={"badgeVerification"}
                    data-plasmic-override={overrides.badgeVerification}
                  />

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__dfrvL)}
                  >
                    <TagPartnerD
                      data-plasmic-name={"tagPartnerD"}
                      data-plasmic-override={overrides.tagPartnerD}
                    />
                  </div>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__g8BOl)}
                  >
                    <RatingDisplayDetail
                      data-plasmic-name={"ratingDisplayDetail"}
                      data-plasmic-override={overrides.ratingDisplayDetail}
                    />
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"locationCityCountry"}
                  data-plasmic-override={overrides.locationCityCountry}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.locationCityCountry
                  )}
                >
                  <IconPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.iconPrimary___8LBJo
                    )}
                    size={"_16Px"}
                    svgIcon16Px={
                      <p.PlasmicIcon
                        data-plasmic-name={"svgIcon3"}
                        data-plasmic-override={overrides.svgIcon3}
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? LocationIcon
                            : LocationBIcon
                        }
                        className={classNames(defaultcss.all, sty.svgIcon3)}
                        role={"img"}
                      />
                    }
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"location2"}
                    data-plasmic-override={overrides.location2}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.location2)}
                  >
                    <div
                      data-plasmic-name={"cityText2"}
                      data-plasmic-override={overrides.cityText2}
                      className={classNames(defaultcss.all, sty.cityText2)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__et0L5
                        )}
                      >
                        {"cityName"}
                      </div>

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__nbW2C
                        )}
                      >
                        {","}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"countryText"}
                      data-plasmic-override={overrides.countryText}
                      className={classNames(defaultcss.all, sty.countryText)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__hetsf
                        )}
                      >
                        {"countryName"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"languagesAb"}
                  data-plasmic-override={overrides.languagesAb}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.languagesAb)}
                >
                  <IconPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.iconPrimary___5G8Fp
                    )}
                    size={"_16Px"}
                    svgIcon16Px={
                      <LanguagesIcon
                        data-plasmic-name={"svgIcon21"}
                        data-plasmic-override={overrides.svgIcon21}
                        className={classNames(defaultcss.all, sty.svgIcon21)}
                        role={"img"}
                      />
                    }
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"languageParent"}
                    data-plasmic-override={overrides.languageParent}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.languageParent)}
                  >
                    <div
                      data-plasmic-name={"languageA"}
                      data-plasmic-override={overrides.languageA}
                      className={classNames(defaultcss.all, sty.languageA)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__n0V9G
                        )}
                      >
                        {"languageA"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"languageB"}
                      data-plasmic-override={overrides.languageB}
                      className={classNames(defaultcss.all, sty.languageB)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__dLp3Z
                        )}
                      >
                        {"languageB"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"membershipDateTimestamp"}
                  data-plasmic-override={overrides.membershipDateTimestamp}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.membershipDateTimestamp
                  )}
                >
                  <IconPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.iconPrimary__ytP8H
                    )}
                    size={"_16Px"}
                    svgIcon16Px={
                      <UserIdIcon
                        data-plasmic-name={"svgIcon20"}
                        data-plasmic-override={overrides.svgIcon20}
                        className={classNames(defaultcss.all, sty.svgIcon20)}
                        role={"img"}
                      />
                    }
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"membershipParent"}
                    data-plasmic-override={overrides.membershipParent}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.membershipParent)}
                  >
                    <div
                      data-plasmic-name={"memberTextLabel"}
                      data-plasmic-override={overrides.memberTextLabel}
                      className={classNames(
                        defaultcss.all,
                        sty.memberTextLabel
                      )}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__m3Nuh
                        )}
                      >
                        {"Member since"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"dateTimestampParent"}
                      data-plasmic-override={overrides.dateTimestampParent}
                      className={classNames(
                        defaultcss.all,
                        sty.dateTimestampParent
                      )}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__k9G5V
                        )}
                      >
                        {"[dateTimestamp]"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"teamIndustrySocialSection"}
            data-plasmic-override={overrides.teamIndustrySocialSection}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.teamIndustrySocialSection
            )}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"companyAttributesParent"}
              data-plasmic-override={overrides.companyAttributesParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.companyAttributesParent
              )}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"profileIndustryParent"}
                data-plasmic-override={overrides.profileIndustryParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.profileIndustryParent
                )}
              >
                <div className={classNames(defaultcss.all, sty.freeBox__otHAs)}>
                  <div
                    data-plasmic-name={"industry"}
                    data-plasmic-override={overrides.industry}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.industry
                    )}
                  >
                    {"Industry"}
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"textParent6"}
                  data-plasmic-override={overrides.textParent6}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.textParent6)}
                >
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay___7TWl6
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__wNuF
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"profileCategoriesParent"}
                data-plasmic-override={overrides.profileCategoriesParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.profileCategoriesParent
                )}
              >
                <div className={classNames(defaultcss.all, sty.freeBox__nhMzU)}>
                  <div
                    data-plasmic-name={"categories"}
                    data-plasmic-override={overrides.categories}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.categories
                    )}
                  >
                    {"Categories"}
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"categoryBadgeParent"}
                  data-plasmic-override={overrides.categoryBadgeParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.categoryBadgeParent
                  )}
                >
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay___3H6Pd
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__sTori
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__mVuYm
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"profileSkillsParent"}
                data-plasmic-override={overrides.profileSkillsParent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.profileSkillsParent)}
              >
                <div
                  data-plasmic-name={"skillsTextparent"}
                  data-plasmic-override={overrides.skillsTextparent}
                  className={classNames(defaultcss.all, sty.skillsTextparent)}
                >
                  <div
                    data-plasmic-name={"skills"}
                    data-plasmic-override={overrides.skills}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.skills
                    )}
                  >
                    {"Skills"}
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"skillsBadgeParent"}
                  data-plasmic-override={overrides.skillsBadgeParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.skillsBadgeParent)}
                >
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay___2OCy
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__r59Vg
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__rAi3L
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__owq0C
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__oBxpQ
                    )}
                    color={"brand"}
                    type={"ghost"}
                  />
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileSocialParent"}
              data-plasmic-override={overrides.profileSocialParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.profileSocialParent)}
            >
              <div className={classNames(defaultcss.all, sty.freeBox__wBcDc)}>
                <div
                  data-plasmic-name={"social"}
                  data-plasmic-override={overrides.social}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.social
                  )}
                >
                  {"Social"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"socialIconsParent"}
                data-plasmic-override={overrides.socialIconsParent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.socialIconsParent)}
              >
                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__mkxB
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__mvwv6
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__poQvA
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile___17ZNh
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__lqSHb
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile___0EbeO
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__s7TdY
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__bt08
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__vq0Py
                  )}
                  size={"_45X45"}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__q6EGu
                  )}
                  size={"_45X45"}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : false
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionPartnerSimilarPartners"}
              data-plasmic-override={overrides.sectionPartnerSimilarPartners}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionPartnerSimilarPartners
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"profileTeamCarousellParentB"}
                  data-plasmic-override={overrides.profileTeamCarousellParentB}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.profileTeamCarousellParentB
                  )}
                >
                  <div
                    data-plasmic-name={"headlineMembersAlsoViewed2"}
                    data-plasmic-override={overrides.headlineMembersAlsoViewed2}
                    className={classNames(
                      defaultcss.all,
                      sty.headlineMembersAlsoViewed2
                    )}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__sb7Pn
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Similar partners"
                        : hasVariant(globalVariants, "screen", "desktop")
                        ? "Similar Partners"
                        : "Team"}
                    </div>
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"similarPartnersparenT"}
                      data-plasmic-override={overrides.similarPartnersparenT}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.similarPartnersparenT
                      )}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile___51Uah
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__lRHoT
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__wqe75
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__yakt9
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__hlzOm
                          )}
                        />
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionPartnerAlsoViewed"}
              data-plasmic-override={overrides.sectionPartnerAlsoViewed}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionPartnerAlsoViewed
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"profileTeamCarousellParentA"}
                  data-plasmic-override={overrides.profileTeamCarousellParentA}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.profileTeamCarousellParentA
                  )}
                >
                  <div
                    data-plasmic-name={"headlineMembersAlsoViewed"}
                    data-plasmic-override={overrides.headlineMembersAlsoViewed}
                    className={classNames(
                      defaultcss.all,
                      sty.headlineMembersAlsoViewed
                    )}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__niux4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Members also viewed"
                        : hasVariant(globalVariants, "screen", "desktop")
                        ? "Members also viewed"
                        : "Team"}
                    </div>
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"alsoViewedParent"}
                      data-plasmic-override={overrides.alsoViewedParent}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.alsoViewedParent
                      )}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__m3OKm
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__ko6I7
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__yxVQ
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__zb9HL
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__vco58
                          )}
                        />
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "sectionTeamProfileHero",
    "navbarTeamUserProfile",
    "teamAboutInfoSection",
    "profileAboutParent",
    "about",
    "textParent",
    "text170Characters",
    "profileCommunityParent",
    "community",
    "statsParent",
    "memberStatParent",
    "memberNumberCount",
    "partnerStatParent",
    "partnerNumberCount",
    "followersStatParent",
    "followingNumberCount",
    "viewsStatParent",
    "viewsNumberCount",
    "reactsStatParent",
    "reactsNumberCount",
    "savesStatParent",
    "savesNumberCount",
    "teamTeamCommunitySection",
    "profileTeamParent",
    "team",
    "teamMemberparent",
    "linkTeamViewAllParent",
    "linkTeamViewAll",
    "profileInformationParent",
    "details",
    "textParent5",
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText",
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB",
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent",
    "teamIndustrySocialSection",
    "companyAttributesParent",
    "profileIndustryParent",
    "industry",
    "textParent6",
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent",
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent",
    "profileSocialParent",
    "social",
    "socialIconsParent",
    "sectionPartnerSimilarPartners",
    "profileTeamCarousellParentB",
    "headlineMembersAlsoViewed2",
    "similarPartnersparenT",
    "sectionPartnerAlsoViewed",
    "profileTeamCarousellParentA",
    "headlineMembersAlsoViewed",
    "alsoViewedParent",
    "footerB"
  ],

  navbarInternal: ["navbarInternal"],
  sectionTeamProfileHero: ["sectionTeamProfileHero"],
  navbarTeamUserProfile: ["navbarTeamUserProfile"],
  teamAboutInfoSection: [
    "teamAboutInfoSection",
    "profileAboutParent",
    "about",
    "textParent",
    "text170Characters",
    "profileCommunityParent",
    "community",
    "statsParent",
    "memberStatParent",
    "memberNumberCount",
    "partnerStatParent",
    "partnerNumberCount",
    "followersStatParent",
    "followingNumberCount",
    "viewsStatParent",
    "viewsNumberCount",
    "reactsStatParent",
    "reactsNumberCount",
    "savesStatParent",
    "savesNumberCount"
  ],

  profileAboutParent: [
    "profileAboutParent",
    "about",
    "textParent",
    "text170Characters"
  ],

  about: ["about"],
  textParent: ["textParent", "text170Characters"],
  text170Characters: ["text170Characters"],
  profileCommunityParent: [
    "profileCommunityParent",
    "community",
    "statsParent",
    "memberStatParent",
    "memberNumberCount",
    "partnerStatParent",
    "partnerNumberCount",
    "followersStatParent",
    "followingNumberCount",
    "viewsStatParent",
    "viewsNumberCount",
    "reactsStatParent",
    "reactsNumberCount",
    "savesStatParent",
    "savesNumberCount"
  ],

  community: ["community"],
  statsParent: [
    "statsParent",
    "memberStatParent",
    "memberNumberCount",
    "partnerStatParent",
    "partnerNumberCount",
    "followersStatParent",
    "followingNumberCount",
    "viewsStatParent",
    "viewsNumberCount",
    "reactsStatParent",
    "reactsNumberCount",
    "savesStatParent",
    "savesNumberCount"
  ],

  memberStatParent: ["memberStatParent", "memberNumberCount"],
  memberNumberCount: ["memberNumberCount"],
  partnerStatParent: ["partnerStatParent", "partnerNumberCount"],
  partnerNumberCount: ["partnerNumberCount"],
  followersStatParent: ["followersStatParent", "followingNumberCount"],
  followingNumberCount: ["followingNumberCount"],
  viewsStatParent: ["viewsStatParent", "viewsNumberCount"],
  viewsNumberCount: ["viewsNumberCount"],
  reactsStatParent: ["reactsStatParent", "reactsNumberCount"],
  reactsNumberCount: ["reactsNumberCount"],
  savesStatParent: ["savesStatParent", "savesNumberCount"],
  savesNumberCount: ["savesNumberCount"],
  teamTeamCommunitySection: [
    "teamTeamCommunitySection",
    "profileTeamParent",
    "team",
    "teamMemberparent",
    "linkTeamViewAllParent",
    "linkTeamViewAll",
    "profileInformationParent",
    "details",
    "textParent5",
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText",
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB",
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],

  profileTeamParent: [
    "profileTeamParent",
    "team",
    "teamMemberparent",
    "linkTeamViewAllParent",
    "linkTeamViewAll"
  ],

  team: ["team"],
  teamMemberparent: ["teamMemberparent"],
  linkTeamViewAllParent: ["linkTeamViewAllParent", "linkTeamViewAll"],
  linkTeamViewAll: ["linkTeamViewAll"],
  profileInformationParent: [
    "profileInformationParent",
    "details",
    "textParent5",
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText",
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB",
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],

  details: ["details"],
  textParent5: [
    "textParent5",
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText",
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB",
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],

  memberBadges: [
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail"
  ],

  badgeVerification: ["badgeVerification"],
  tagPartnerD: ["tagPartnerD"],
  ratingDisplayDetail: ["ratingDisplayDetail"],
  locationCityCountry: [
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText"
  ],

  svgIcon3: ["svgIcon3"],
  location2: ["location2", "cityText2", "countryText"],
  cityText2: ["cityText2"],
  countryText: ["countryText"],
  languagesAb: [
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB"
  ],

  svgIcon21: ["svgIcon21"],
  languageParent: ["languageParent", "languageA", "languageB"],
  languageA: ["languageA"],
  languageB: ["languageB"],
  membershipDateTimestamp: [
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],

  svgIcon20: ["svgIcon20"],
  membershipParent: [
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],

  memberTextLabel: ["memberTextLabel"],
  dateTimestampParent: ["dateTimestampParent"],
  teamIndustrySocialSection: [
    "teamIndustrySocialSection",
    "companyAttributesParent",
    "profileIndustryParent",
    "industry",
    "textParent6",
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent",
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent",
    "profileSocialParent",
    "social",
    "socialIconsParent"
  ],

  companyAttributesParent: [
    "companyAttributesParent",
    "profileIndustryParent",
    "industry",
    "textParent6",
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent",
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent"
  ],

  profileIndustryParent: ["profileIndustryParent", "industry", "textParent6"],
  industry: ["industry"],
  textParent6: ["textParent6"],
  profileCategoriesParent: [
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent"
  ],

  categories: ["categories"],
  categoryBadgeParent: ["categoryBadgeParent"],
  profileSkillsParent: [
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent"
  ],

  skillsTextparent: ["skillsTextparent", "skills"],
  skills: ["skills"],
  skillsBadgeParent: ["skillsBadgeParent"],
  profileSocialParent: ["profileSocialParent", "social", "socialIconsParent"],
  social: ["social"],
  socialIconsParent: ["socialIconsParent"],
  sectionPartnerSimilarPartners: [
    "sectionPartnerSimilarPartners",
    "profileTeamCarousellParentB",
    "headlineMembersAlsoViewed2",
    "similarPartnersparenT"
  ],

  profileTeamCarousellParentB: [
    "profileTeamCarousellParentB",
    "headlineMembersAlsoViewed2",
    "similarPartnersparenT"
  ],

  headlineMembersAlsoViewed2: ["headlineMembersAlsoViewed2"],
  similarPartnersparenT: ["similarPartnersparenT"],
  sectionPartnerAlsoViewed: [
    "sectionPartnerAlsoViewed",
    "profileTeamCarousellParentA",
    "headlineMembersAlsoViewed",
    "alsoViewedParent"
  ],

  profileTeamCarousellParentA: [
    "profileTeamCarousellParentA",
    "headlineMembersAlsoViewed",
    "alsoViewedParent"
  ],

  headlineMembersAlsoViewed: ["headlineMembersAlsoViewed"],
  alsoViewedParent: ["alsoViewedParent"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTeamprofile__ArgProps,
      internalVariantPropNames: PlasmicTeamprofile__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTeamprofile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamprofile";
  } else {
    func.displayName = `PlasmicTeamprofile.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamprofile = Object.assign(
  // Top-level PlasmicTeamprofile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    sectionTeamProfileHero: makeNodeComponent("sectionTeamProfileHero"),
    navbarTeamUserProfile: makeNodeComponent("navbarTeamUserProfile"),
    teamAboutInfoSection: makeNodeComponent("teamAboutInfoSection"),
    profileAboutParent: makeNodeComponent("profileAboutParent"),
    about: makeNodeComponent("about"),
    textParent: makeNodeComponent("textParent"),
    text170Characters: makeNodeComponent("text170Characters"),
    profileCommunityParent: makeNodeComponent("profileCommunityParent"),
    community: makeNodeComponent("community"),
    statsParent: makeNodeComponent("statsParent"),
    memberStatParent: makeNodeComponent("memberStatParent"),
    memberNumberCount: makeNodeComponent("memberNumberCount"),
    partnerStatParent: makeNodeComponent("partnerStatParent"),
    partnerNumberCount: makeNodeComponent("partnerNumberCount"),
    followersStatParent: makeNodeComponent("followersStatParent"),
    followingNumberCount: makeNodeComponent("followingNumberCount"),
    viewsStatParent: makeNodeComponent("viewsStatParent"),
    viewsNumberCount: makeNodeComponent("viewsNumberCount"),
    reactsStatParent: makeNodeComponent("reactsStatParent"),
    reactsNumberCount: makeNodeComponent("reactsNumberCount"),
    savesStatParent: makeNodeComponent("savesStatParent"),
    savesNumberCount: makeNodeComponent("savesNumberCount"),
    teamTeamCommunitySection: makeNodeComponent("teamTeamCommunitySection"),
    profileTeamParent: makeNodeComponent("profileTeamParent"),
    team: makeNodeComponent("team"),
    teamMemberparent: makeNodeComponent("teamMemberparent"),
    linkTeamViewAllParent: makeNodeComponent("linkTeamViewAllParent"),
    linkTeamViewAll: makeNodeComponent("linkTeamViewAll"),
    profileInformationParent: makeNodeComponent("profileInformationParent"),
    details: makeNodeComponent("details"),
    textParent5: makeNodeComponent("textParent5"),
    memberBadges: makeNodeComponent("memberBadges"),
    badgeVerification: makeNodeComponent("badgeVerification"),
    tagPartnerD: makeNodeComponent("tagPartnerD"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),
    locationCityCountry: makeNodeComponent("locationCityCountry"),
    svgIcon3: makeNodeComponent("svgIcon3"),
    location2: makeNodeComponent("location2"),
    cityText2: makeNodeComponent("cityText2"),
    countryText: makeNodeComponent("countryText"),
    languagesAb: makeNodeComponent("languagesAb"),
    svgIcon21: makeNodeComponent("svgIcon21"),
    languageParent: makeNodeComponent("languageParent"),
    languageA: makeNodeComponent("languageA"),
    languageB: makeNodeComponent("languageB"),
    membershipDateTimestamp: makeNodeComponent("membershipDateTimestamp"),
    svgIcon20: makeNodeComponent("svgIcon20"),
    membershipParent: makeNodeComponent("membershipParent"),
    memberTextLabel: makeNodeComponent("memberTextLabel"),
    dateTimestampParent: makeNodeComponent("dateTimestampParent"),
    teamIndustrySocialSection: makeNodeComponent("teamIndustrySocialSection"),
    companyAttributesParent: makeNodeComponent("companyAttributesParent"),
    profileIndustryParent: makeNodeComponent("profileIndustryParent"),
    industry: makeNodeComponent("industry"),
    textParent6: makeNodeComponent("textParent6"),
    profileCategoriesParent: makeNodeComponent("profileCategoriesParent"),
    categories: makeNodeComponent("categories"),
    categoryBadgeParent: makeNodeComponent("categoryBadgeParent"),
    profileSkillsParent: makeNodeComponent("profileSkillsParent"),
    skillsTextparent: makeNodeComponent("skillsTextparent"),
    skills: makeNodeComponent("skills"),
    skillsBadgeParent: makeNodeComponent("skillsBadgeParent"),
    profileSocialParent: makeNodeComponent("profileSocialParent"),
    social: makeNodeComponent("social"),
    socialIconsParent: makeNodeComponent("socialIconsParent"),
    sectionPartnerSimilarPartners: makeNodeComponent(
      "sectionPartnerSimilarPartners"
    ),

    profileTeamCarousellParentB: makeNodeComponent(
      "profileTeamCarousellParentB"
    ),

    headlineMembersAlsoViewed2: makeNodeComponent("headlineMembersAlsoViewed2"),
    similarPartnersparenT: makeNodeComponent("similarPartnersparenT"),
    sectionPartnerAlsoViewed: makeNodeComponent("sectionPartnerAlsoViewed"),
    profileTeamCarousellParentA: makeNodeComponent(
      "profileTeamCarousellParentA"
    ),

    headlineMembersAlsoViewed: makeNodeComponent("headlineMembersAlsoViewed"),
    alsoViewedParent: makeNodeComponent("alsoViewedParent"),
    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicTeamprofile
    internalVariantProps: PlasmicTeamprofile__VariantProps,
    internalArgProps: PlasmicTeamprofile__ArgProps
  }
);

export default PlasmicTeamprofile;
/* prettier-ignore-end */
