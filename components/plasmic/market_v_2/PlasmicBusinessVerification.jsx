// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: DV0DKqDB_qx
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InputFormCardPrimary from "../../InputFormCardPrimary"; // plasmic-import: 7K8uSXduxTH/component
import ConnectedAccounting from "../../ConnectedAccounting"; // plasmic-import: N7O712pA3UT/component
import ConnectedPayouts from "../../ConnectedPayouts"; // plasmic-import: MWF4dfPCn0i/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicBusinessVerification.module.css"; // plasmic-import: DV0DKqDB_qx/css

export const PlasmicBusinessVerification__VariantProps = new Array();

export const PlasmicBusinessVerification__ArgProps = new Array();

function PlasmicBusinessVerification__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style global jsx>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__ho6LV)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__tfQu0)}
            >
              <InputFormCardPrimary
                data-plasmic-name={"companyLegalNameCard"}
                data-plasmic-override={overrides.companyLegalNameCard}
                border={
                  hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "border"
                    : undefined
                }
                className={classNames(
                  "__wab_instance",
                  sty.companyLegalNameCard
                )}
                description={"70 characters maximum."}
                headline={
                  hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "Company legal name"
                    : "Company Legal Name"
                }
                singleLineText={"singleLineText"}
                singleLineTextContainer={
                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox)}
                    placeholder={"Some placeholder"}
                    size={1}
                    type={"text"}
                    value={
                      hasVariant(globalVariants, "screen", "desktopPrimary")
                        ? "Master of the Universe Inc"
                        : "Some value"
                    }
                  />
                }
                subDescription={
                  hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "subDescription"
                    : undefined
                }
                subHead={"Enter the legal name of your company"}
              >
                <textarea
                  data-plasmic-name={"textarea"}
                  data-plasmic-override={overrides.textarea}
                  className={classNames(defaultcss.textarea, sty.textarea)}
                  value={"Describe yourself...."}
                />
              </InputFormCardPrimary>

              <ConnectedAccounting
                data-plasmic-name={"connectedAccounting"}
                data-plasmic-override={overrides.connectedAccounting}
                className={classNames(
                  "__wab_instance",
                  sty.connectedAccounting
                )}
                closed={"closed"}
              />

              <ConnectedPayouts
                data-plasmic-name={"connectedPayouts"}
                data-plasmic-override={overrides.connectedPayouts}
                className={classNames("__wab_instance", sty.connectedPayouts)}
                closed={
                  hasVariant(globalVariants, "screen", "desktopPrimary")
                    ? "closed"
                    : "closed"
                }
              />
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "companyLegalNameCard",
    "textarea",
    "textbox",
    "connectedAccounting",
    "connectedPayouts"
  ],

  companyLegalNameCard: ["companyLegalNameCard", "textarea", "textbox"],
  textarea: ["textarea"],
  textbox: ["textbox"],
  connectedAccounting: ["connectedAccounting"],
  connectedPayouts: ["connectedPayouts"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBusinessVerification__ArgProps,
      internalVariantPropNames: PlasmicBusinessVerification__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicBusinessVerification__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBusinessVerification";
  } else {
    func.displayName = `PlasmicBusinessVerification.${nodeName}`;
  }
  return func;
}

export const PlasmicBusinessVerification = Object.assign(
  // Top-level PlasmicBusinessVerification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    companyLegalNameCard: makeNodeComponent("companyLegalNameCard"),
    textarea: makeNodeComponent("textarea"),
    textbox: makeNodeComponent("textbox"),
    connectedAccounting: makeNodeComponent("connectedAccounting"),
    connectedPayouts: makeNodeComponent("connectedPayouts"),
    // Metadata about props expected for PlasmicBusinessVerification
    internalVariantProps: PlasmicBusinessVerification__VariantProps,
    internalArgProps: PlasmicBusinessVerification__ArgProps
  }
);

export default PlasmicBusinessVerification;
/* prettier-ignore-end */
