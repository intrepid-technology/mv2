// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: DreZnHdEQY
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSearchBadge.module.css"; // plasmic-import: DreZnHdEQY/css

export const PlasmicSearchBadge__VariantProps = new Array();

export const PlasmicSearchBadge__ArgProps = new Array("children");

function PlasmicSearchBadge__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <input
        data-plasmic-name={"serviceIndustry"}
        data-plasmic-override={overrides.serviceIndustry}
        className={classNames(defaultcss.input, sty.serviceIndustry)}
        placeholder={"Search and enter"}
        size={1}
        type={"text"}
        value={""}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <ChipBadgeDisplay
              className={classNames(
                "__wab_instance",
                sty.chipBadgeDisplay__c7GRb
              )}
              type={"ghost"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__ryVaq
                )}
              >
                {"Badge"}
              </div>
            </ChipBadgeDisplay>
          ),

          value: args.children
        })}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "serviceIndustry", "freeBox"],
  serviceIndustry: ["serviceIndustry"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearchBadge__ArgProps,
      internalVariantPropNames: PlasmicSearchBadge__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSearchBadge__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchBadge";
  } else {
    func.displayName = `PlasmicSearchBadge.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchBadge = Object.assign(
  // Top-level PlasmicSearchBadge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    serviceIndustry: makeNodeComponent("serviceIndustry"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicSearchBadge
    internalVariantProps: PlasmicSearchBadge__VariantProps,
    internalArgProps: PlasmicSearchBadge__ArgProps
  }
);

export default PlasmicSearchBadge;
/* prettier-ignore-end */
