// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: TS--ged0zI
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicTextMultiLineA.module.css"; // plasmic-import: TS--ged0zI/css

export const PlasmicTextMultiLineA__VariantProps = new Array("size");

export const PlasmicTextMultiLineA__ArgProps = new Array("children");

function PlasmicTextMultiLineA__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size_medium]: hasVariant(variants, "size", "medium")
      })}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Headline",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildren__size_medium]: hasVariant(
            variants,
            "size",
            "medium"
          )
        })
      })}

      <textarea
        data-plasmic-name={"textarea"}
        data-plasmic-override={overrides.textarea}
        className={classNames(projectcss.textarea, sty.textarea, {
          [sty.textarea__size_large]: hasVariant(variants, "size", "large"),
          [sty.textarea__size_medium]: hasVariant(variants, "size", "medium")
        })}
        value={"This is a text area."}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "textarea"],
  textarea: ["textarea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextMultiLineA__ArgProps,
      internalVariantPropNames: PlasmicTextMultiLineA__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTextMultiLineA__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextMultiLineA";
  } else {
    func.displayName = `PlasmicTextMultiLineA.${nodeName}`;
  }
  return func;
}

export const PlasmicTextMultiLineA = Object.assign(
  // Top-level PlasmicTextMultiLineA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textarea: makeNodeComponent("textarea"),
    // Metadata about props expected for PlasmicTextMultiLineA
    internalVariantProps: PlasmicTextMultiLineA__VariantProps,
    internalArgProps: PlasmicTextMultiLineA__ArgProps
  }
);

export default PlasmicTextMultiLineA;
/* prettier-ignore-end */
