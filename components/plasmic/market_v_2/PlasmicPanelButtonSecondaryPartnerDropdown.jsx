// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: xL0tU70qtK
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import PanelButtonMenuItem from "../../PanelButtonMenuItem"; // plasmic-import: b7t7JoTYk7/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPanelButtonSecondaryPartnerDropdown.module.css"; // plasmic-import: xL0tU70qtK/css

export const PlasmicPanelButtonSecondaryPartnerDropdown__VariantProps =
  new Array();

export const PlasmicPanelButtonSecondaryPartnerDropdown__ArgProps = new Array();

function PlasmicPanelButtonSecondaryPartnerDropdown__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <PanelButtonMenuItem
        className={classNames("__wab_instance", sty.panelButtonMenuItem__viTcw)}
        headlineText={"Partner"}
        subheadText={"A team or professional on Intrepid"}
      />

      <PanelButtonMenuItem
        className={classNames("__wab_instance", sty.panelButtonMenuItem__v7Bmg)}
        headlineText={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1C3Dy
            )}
          >
            {"New professional"}
          </div>
        }
        subheadText={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bu3Vw
            )}
          >
            {"A professional outside of Intrepid"}
          </div>
        }
      />

      <PanelButtonMenuItem
        className={classNames("__wab_instance", sty.panelButtonMenuItem__i4TxM)}
        headlineText={"New company"}
        subheadText={"A business outside of Intrepid"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames:
        PlasmicPanelButtonSecondaryPartnerDropdown__ArgProps,
      internalVariantPropNames:
        PlasmicPanelButtonSecondaryPartnerDropdown__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPanelButtonSecondaryPartnerDropdown__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelButtonSecondaryPartnerDropdown";
  } else {
    func.displayName = `PlasmicPanelButtonSecondaryPartnerDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelButtonSecondaryPartnerDropdown = Object.assign(
  // Top-level PlasmicPanelButtonSecondaryPartnerDropdown renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicPanelButtonSecondaryPartnerDropdown
    internalVariantProps:
      PlasmicPanelButtonSecondaryPartnerDropdown__VariantProps,
    internalArgProps: PlasmicPanelButtonSecondaryPartnerDropdown__ArgProps
  }
);

export default PlasmicPanelButtonSecondaryPartnerDropdown;
/* prettier-ignore-end */
