// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 0muBfRPqWS
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputFormCardAvatar from "../../InputFormCardAvatar"; // plasmic-import: 6byT-fD8VwZ/component
import InputFormCardPrimary from "../../InputFormCardPrimary"; // plasmic-import: 7K8uSXduxTH/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicPersonalProfile.module.css"; // plasmic-import: 0muBfRPqWS/css

export const PlasmicPersonalProfile__VariantProps = new Array();

export const PlasmicPersonalProfile__ArgProps = new Array();

function PlasmicPersonalProfile__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box___5Zuew)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__lqK8Z)}
            >
              <InputFormCardAvatar
                data-plasmic-name={"personalAvatarCard"}
                data-plasmic-override={overrides.personalAvatarCard}
                description={"An avatar is optional but strongly recommended."}
                headline={"Image"}
                subDescription={"subDescription"}
                subHead={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__siEc5
                    )}
                  >
                    {
                      "Click on the avatar to upload a custom image from your files."
                    }
                  </div>
                }
              />

              <InputFormCardPrimary
                data-plasmic-name={"personalUsernameCard"}
                data-plasmic-override={overrides.personalUsernameCard}
                button={"button"}
                className={classNames(
                  "__wab_instance",
                  sty.personalUsernameCard
                )}
                description={"50 characters maximum."}
                headline={"Username"}
                inputType={"username"}
                subDescription={"subDescription"}
                subHead={
                  "This is your URL namespace within the Intrepid community"
                }
              />

              <InputFormCardPrimary
                data-plasmic-name={"personalNameCard"}
                data-plasmic-override={overrides.personalNameCard}
                button={"button"}
                className={classNames("__wab_instance", sty.personalNameCard)}
                description={"Only shown to other members and followers."}
                headline={"Personal name"}
                subDescription={"subDescription"}
                subHead={"Please enter your full name."}
              />
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "personalAvatarCard",
    "personalUsernameCard",
    "personalNameCard"
  ],

  personalAvatarCard: ["personalAvatarCard"],
  personalUsernameCard: ["personalUsernameCard"],
  personalNameCard: ["personalNameCard"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPersonalProfile__ArgProps,
      internalVariantPropNames: PlasmicPersonalProfile__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPersonalProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPersonalProfile";
  } else {
    func.displayName = `PlasmicPersonalProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicPersonalProfile = Object.assign(
  // Top-level PlasmicPersonalProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    personalAvatarCard: makeNodeComponent("personalAvatarCard"),
    personalUsernameCard: makeNodeComponent("personalUsernameCard"),
    personalNameCard: makeNodeComponent("personalNameCard"),
    // Metadata about props expected for PlasmicPersonalProfile
    internalVariantProps: PlasmicPersonalProfile__VariantProps,
    internalArgProps: PlasmicPersonalProfile__ArgProps
  }
);

export default PlasmicPersonalProfile;
/* prettier-ignore-end */
