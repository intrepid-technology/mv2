// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: cHSOn6vPGV
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicTagPartnerD.module.css"; // plasmic-import: cHSOn6vPGV/css

export const PlasmicTagPartnerD__VariantProps = new Array("inset");

export const PlasmicTagPartnerD__ArgProps = new Array();

function PlasmicTagPartnerD__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootinset]: hasVariant(variants, "inset", "inset") }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textinset]: hasVariant(variants, "inset", "inset")
        })}
      >
        {"maker"}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTagPartnerD__ArgProps,
      internalVariantPropNames: PlasmicTagPartnerD__VariantProps
    });

    return PlasmicTagPartnerD__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTagPartnerD";
  } else {
    func.displayName = `PlasmicTagPartnerD.${nodeName}`;
  }
  return func;
}

export const PlasmicTagPartnerD = Object.assign(
  // Top-level PlasmicTagPartnerD renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicTagPartnerD
    internalVariantProps: PlasmicTagPartnerD__VariantProps,
    internalArgProps: PlasmicTagPartnerD__ArgProps
  }
);

export default PlasmicTagPartnerD;
/* prettier-ignore-end */
