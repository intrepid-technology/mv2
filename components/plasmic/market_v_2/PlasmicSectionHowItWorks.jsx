// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: s37w-cXOVAT
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardValueProposition from "../../CardValueProposition"; // plasmic-import: oaNvs68b2k/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicSectionHowItWorks.module.css"; // plasmic-import: s37w-cXOVAT/css
import Icon80Icon from "./icons/PlasmicIcon__Icon80"; // plasmic-import: D324HBXmDd/icon
import MemberPartnerAddIcon from "./icons/PlasmicIcon__MemberPartnerAdd"; // plasmic-import: FGYq1z2nvF/icon
import Icon88Icon from "./icons/PlasmicIcon__Icon88"; // plasmic-import: l8RMAH59eK/icon

export const PlasmicSectionHowItWorks__VariantProps = new Array();

export const PlasmicSectionHowItWorks__ArgProps = new Array();

function PlasmicSectionHowItWorks__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          defaultcss.__wab_text,
          sty.text
        )}
      >
        {"How it works"}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(defaultcss.all, projectcss.all, sty.freeBox)}
      >
        <CardValueProposition
          background={"bgLightB"}
          className={classNames(
            "__wab_instance",
            sty.cardValueProposition__qxULz
          )}
          headline={"Setup a profile"}
          svg={
            <Icon80Icon
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg__ihrsS
              )}
              role={"img"}
            />
          }
          textBody={
            "Tell us about your needs and a few key details about your goals."
          }
        />

        <CardValueProposition
          background={"bgLightB"}
          className={classNames(
            "__wab_instance",
            sty.cardValueProposition__n76U
          )}
          headline={"Invite your team"}
          svg={
            <MemberPartnerAddIcon
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg___3UCI
              )}
              role={"img"}
            />
          }
          textBody={"Add team members to collaborate and manage your projects."}
        />

        <CardValueProposition
          background={"bgLightB"}
          className={classNames(
            "__wab_instance",
            sty.cardValueProposition__rmGdj
          )}
          headline={"Find products & services"}
          svg={
            <Icon88Icon
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg__h8KeO
              )}
              role={"img"}
            />
          }
          textBody={
            hasVariant(globalVariants, "screen", "desktop")
              ? "Shop digital products and services from a curated group of makers."
              : "shop digital products and services from a curated group of makers."
          }
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "freeBox"],
  text: ["text"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionHowItWorks__ArgProps,
      internalVariantPropNames: PlasmicSectionHowItWorks__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSectionHowItWorks__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionHowItWorks";
  } else {
    func.displayName = `PlasmicSectionHowItWorks.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionHowItWorks = Object.assign(
  // Top-level PlasmicSectionHowItWorks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicSectionHowItWorks
    internalVariantProps: PlasmicSectionHowItWorks__VariantProps,
    internalArgProps: PlasmicSectionHowItWorks__ArgProps
  }
);

export default PlasmicSectionHowItWorks;
/* prettier-ignore-end */
