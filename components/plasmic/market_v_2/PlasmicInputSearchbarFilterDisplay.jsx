// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: zockkqCMBP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SearchbarFilter from "../../SearchbarFilter"; // plasmic-import: 5wnmDA777-/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: 9_NbJKBtbu/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicInputSearchbarFilterDisplay.module.css"; // plasmic-import: zockkqCMBP/css

export const PlasmicInputSearchbarFilterDisplay__VariantProps = new Array(
  "label"
);

export const PlasmicInputSearchbarFilterDisplay__ArgProps = new Array(
  "children"
);

function PlasmicInputSearchbarFilterDisplay__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (hasVariant(variants, "label", "label") ? true : true) ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootlabel]: hasVariant(variants, "label", "label") }
      )}
    >
      {(hasVariant(variants, "label", "label") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__qALfu, {
            [sty.freeBoxlabel__qALfuvkPho]: hasVariant(
              variants,
              "label",
              "label"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Label",
            value: args.children
          })}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__cWcUk, {
          [sty.freeBoxlabel__cWcUkvkPho]: hasVariant(variants, "label", "label")
        })}
      >
        <SearchbarFilter
          data-plasmic-name={"searchbarFilter"}
          data-plasmic-override={overrides.searchbarFilter}
          className={classNames("__wab_instance", sty.searchbarFilter, {
            [sty.searchbarFilterlabel]: hasVariant(variants, "label", "label")
          })}
          height={"_40"}
          width={"_360"}
        />

        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"badgeDisplayParent"}
            data-plasmic-override={overrides.badgeDisplayParent}
            hasGap={true}
            className={classNames(projectcss.all, sty.badgeDisplayParent)}
          >
            <ChipBadgeDisplay
              data-plasmic-name={"chipBadgeDisplay"}
              data-plasmic-override={overrides.chipBadgeDisplay}
              className={classNames("__wab_instance", sty.chipBadgeDisplay)}
              size={"_24"}
              type={"primary"}
            />
          </p.Stack>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "searchbarFilter", "badgeDisplayParent", "chipBadgeDisplay"],
  searchbarFilter: ["searchbarFilter"],
  badgeDisplayParent: ["badgeDisplayParent", "chipBadgeDisplay"],
  chipBadgeDisplay: ["chipBadgeDisplay"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputSearchbarFilterDisplay__ArgProps,
      internalVariantPropNames: PlasmicInputSearchbarFilterDisplay__VariantProps
    });

    return PlasmicInputSearchbarFilterDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputSearchbarFilterDisplay";
  } else {
    func.displayName = `PlasmicInputSearchbarFilterDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicInputSearchbarFilterDisplay = Object.assign(
  // Top-level PlasmicInputSearchbarFilterDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    searchbarFilter: makeNodeComponent("searchbarFilter"),
    badgeDisplayParent: makeNodeComponent("badgeDisplayParent"),
    chipBadgeDisplay: makeNodeComponent("chipBadgeDisplay"),
    // Metadata about props expected for PlasmicInputSearchbarFilterDisplay
    internalVariantProps: PlasmicInputSearchbarFilterDisplay__VariantProps,
    internalArgProps: PlasmicInputSearchbarFilterDisplay__ArgProps
  }
);

export default PlasmicInputSearchbarFilterDisplay;
/* prettier-ignore-end */
