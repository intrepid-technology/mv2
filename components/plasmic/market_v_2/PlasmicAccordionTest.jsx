// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: zBPnerMe5_
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicAccordionTest.module.css"; // plasmic-import: zBPnerMe5_/css
import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: QGTlaxIryG/icon

export const PlasmicAccordionTest__VariantProps = new Array();

export const PlasmicAccordionTest__ArgProps = new Array("children", "slot");

function PlasmicAccordionTest__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__oKtaK)}>
        <div className={classNames(defaultcss.all, sty.freeBox__prkZ)}>
          <div className={classNames(defaultcss.all, sty.freeBox__rLze9)}>
            {p.renderPlasmicSlot({
              defaultContents: "Overview",
              value: args.slot,
              className: classNames(sty.slotSlot)
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__kZbvK)}>
          <Icon52Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__rRv3G)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__eClnO
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Dictum porttitor faucibus viverra eget nibh aliquam. Venenatis maecenas at diam amet. Ac odio vitae morbi fermentum, morbi odio leo volutpat. Fringilla habitant nibh placerat rhoncus, turpis. Urna ipsum purus nam sapien faucibus.\n\nSit egestas faucibus mauris, lorem. Massa ultrices netus velit tempor ligula nec egestas. Netus ullamcorper varius aliquam quam ut at. Ridiculus scelerisque nunc turpis mattis malesuada fringilla viverra nunc. Turpis."
              }
            </div>
          ),

          value: args.children
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccordionTest__ArgProps,
      internalVariantPropNames: PlasmicAccordionTest__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicAccordionTest__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordionTest";
  } else {
    func.displayName = `PlasmicAccordionTest.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordionTest = Object.assign(
  // Top-level PlasmicAccordionTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicAccordionTest
    internalVariantProps: PlasmicAccordionTest__VariantProps,
    internalArgProps: PlasmicAccordionTest__ArgProps
  }
);

export default PlasmicAccordionTest;
/* prettier-ignore-end */
