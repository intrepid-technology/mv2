// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: x9ks47Cvll
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicButtonSideBarMemberSettings.module.css"; // plasmic-import: x9ks47Cvll/css
import Icon96Icon from "./icons/PlasmicIcon__Icon96"; // plasmic-import: CEkB3VE5m4/icon

export const PlasmicButtonSideBarMemberSettings__VariantProps = new Array();

export const PlasmicButtonSideBarMemberSettings__ArgProps = new Array();

function PlasmicButtonSideBarMemberSettings__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.button, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"elementUsernameDisplay"}
        data-plasmic-override={overrides.elementUsernameDisplay}
        hasGap={true}
        className={classNames(defaultcss.all, sty.elementUsernameDisplay)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserRealNames"}
          data-plasmic-override={overrides.elementUserRealNames}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementUserRealNames)}
        >
          <div
            data-plasmic-name={"firstnameLastname"}
            data-plasmic-override={overrides.firstnameLastname}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.firstnameLastname
            )}
          >
            {"Collin"}
          </div>

          <div
            data-plasmic-name={"elemenrtLastname"}
            data-plasmic-override={overrides.elemenrtLastname}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.elemenrtLastname
            )}
          >
            {"Thompson"}
          </div>
        </p.Stack>

        <div
          data-plasmic-name={"userDisplayname"}
          data-plasmic-override={overrides.userDisplayname}
          className={classNames(defaultcss.all, sty.userDisplayname)}
        >
          <div
            data-plasmic-name={"userDisplayNameText"}
            data-plasmic-override={overrides.userDisplayNameText}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.userDisplayNameText
            )}
          >
            {"@techronin"}
          </div>
        </div>
      </p.Stack>

      <Icon96Icon
        data-plasmic-name={"dropDownUserSettingsTrigger"}
        data-plasmic-override={overrides.dropDownUserSettingsTrigger}
        className={classNames(defaultcss.all, sty.dropDownUserSettingsTrigger)}
        role={"img"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "elementUsernameDisplay",
    "elementUserRealNames",
    "firstnameLastname",
    "elemenrtLastname",
    "userDisplayname",
    "userDisplayNameText",
    "dropDownUserSettingsTrigger"
  ],

  elementUsernameDisplay: [
    "elementUsernameDisplay",
    "elementUserRealNames",
    "firstnameLastname",
    "elemenrtLastname",
    "userDisplayname",
    "userDisplayNameText"
  ],

  elementUserRealNames: [
    "elementUserRealNames",
    "firstnameLastname",
    "elemenrtLastname"
  ],

  firstnameLastname: ["firstnameLastname"],
  elemenrtLastname: ["elemenrtLastname"],
  userDisplayname: ["userDisplayname", "userDisplayNameText"],
  userDisplayNameText: ["userDisplayNameText"],
  dropDownUserSettingsTrigger: ["dropDownUserSettingsTrigger"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonSideBarMemberSettings__ArgProps,
      internalVariantPropNames: PlasmicButtonSideBarMemberSettings__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicButtonSideBarMemberSettings__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonSideBarMemberSettings";
  } else {
    func.displayName = `PlasmicButtonSideBarMemberSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonSideBarMemberSettings = Object.assign(
  // Top-level PlasmicButtonSideBarMemberSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    elementUsernameDisplay: makeNodeComponent("elementUsernameDisplay"),
    elementUserRealNames: makeNodeComponent("elementUserRealNames"),
    firstnameLastname: makeNodeComponent("firstnameLastname"),
    elemenrtLastname: makeNodeComponent("elemenrtLastname"),
    userDisplayname: makeNodeComponent("userDisplayname"),
    userDisplayNameText: makeNodeComponent("userDisplayNameText"),
    dropDownUserSettingsTrigger: makeNodeComponent(
      "dropDownUserSettingsTrigger"
    ),

    // Metadata about props expected for PlasmicButtonSideBarMemberSettings
    internalVariantProps: PlasmicButtonSideBarMemberSettings__VariantProps,
    internalArgProps: PlasmicButtonSideBarMemberSettings__ArgProps
  }
);

export default PlasmicButtonSideBarMemberSettings;
/* prettier-ignore-end */
