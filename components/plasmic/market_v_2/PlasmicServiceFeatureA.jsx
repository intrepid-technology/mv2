// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: gBp3zt_OzO
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicServiceFeatureA.module.css"; // plasmic-import: gBp3zt_OzO/css
import Icon51Icon from "./icons/PlasmicIcon__Icon51"; // plasmic-import: vH0oVu4OT/icon

export const PlasmicServiceFeatureA__VariantProps = new Array();

export const PlasmicServiceFeatureA__ArgProps = new Array();

function PlasmicServiceFeatureA__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.text)}
      >
        {"Service Feature"}
      </div>

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        <Icon51Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "freeBox", "svg"],
  text: ["text"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServiceFeatureA__ArgProps,
      internalVariantPropNames: PlasmicServiceFeatureA__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicServiceFeatureA__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServiceFeatureA";
  } else {
    func.displayName = `PlasmicServiceFeatureA.${nodeName}`;
  }
  return func;
}

export const PlasmicServiceFeatureA = Object.assign(
  // Top-level PlasmicServiceFeatureA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicServiceFeatureA
    internalVariantProps: PlasmicServiceFeatureA__VariantProps,
    internalArgProps: PlasmicServiceFeatureA__ArgProps
  }
);

export default PlasmicServiceFeatureA;
/* prettier-ignore-end */
