// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: 6x0YIR7aDko
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavbarServiceListing from "../../NavbarServiceListing"; // plasmic-import: PUBVQZa84u/component
import ProgressBar from "../../ProgressBar"; // plasmic-import: jFfoBtNGGG/component
import CardQuestionServiceListing from "../../CardQuestionServiceListing"; // plasmic-import: hAog-BJq-d/component
import ToolTipServiceListing from "../../ToolTipServiceListing"; // plasmic-import: GDvJTAih6h/component
import FooterServiceListing from "../../FooterServiceListing"; // plasmic-import: XhB16zaJfQ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicServiceListingImage.module.css"; // plasmic-import: 6x0YIR7aDko/css
import Icon105Icon from "./icons/PlasmicIcon__Icon105"; // plasmic-import: oRZoGOt72t/icon

export const PlasmicServiceListingImage__VariantProps = new Array();

export const PlasmicServiceListingImage__ArgProps = new Array();

function PlasmicServiceListingImage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"form"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"serviceListingNavbar"}
            data-plasmic-override={overrides.serviceListingNavbar}
            className={classNames(defaultcss.all, sty.serviceListingNavbar)}
          >
            <NavbarServiceListing
              data-plasmic-name={"navbarServiceListing"}
              data-plasmic-override={overrides.navbarServiceListing}
              className={classNames("__wab_instance", sty.navbarServiceListing)}
            >
              {"Images"}
            </NavbarServiceListing>

            <ProgressBar
              data-plasmic-name={"progressBar"}
              data-plasmic-override={overrides.progressBar}
              className={classNames("__wab_instance", sty.progressBar)}
              progress={"_50"}
            />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__lc1Vo)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionImageBlock"}
              data-plasmic-override={overrides.questionImageBlock}
              hasGap={true}
              className={classNames(defaultcss.all, sty.questionImageBlock)}
            >
              <CardQuestionServiceListing
                data-plasmic-name={"cardQuestionServiceListing"}
                data-plasmic-override={overrides.cardQuestionServiceListing}
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__r5CWc
                    )}
                  >
                    {"Step 3"}
                  </div>
                }
                slot2={"Add up to 5 images aspect ratio: 1.91:1, max 20 mb."}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__ir20P
                  )}
                >
                  {"What will your finished service look like?"}
                </div>
              </CardQuestionServiceListing>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__wbEqK)}
              >
                <button
                  className={classNames(defaultcss.button, sty.button__sOrr)}
                >
                  <div className={classNames(defaultcss.all, sty.box__n0Uu4)}>
                    <Icon105Icon
                      className={classNames(defaultcss.all, sty.svg___9Ib5N)}
                      role={"img"}
                    />
                  </div>
                </button>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__uh1A1)}
                >
                  <button
                    className={classNames(defaultcss.button, sty.button___1TQM)}
                  >
                    <div className={classNames(defaultcss.all, sty.box__uze4B)}>
                      <Icon105Icon
                        className={classNames(defaultcss.all, sty.svg__c5XyL)}
                        role={"img"}
                      />
                    </div>
                  </button>

                  <button
                    className={classNames(defaultcss.button, sty.button__vh2Yn)}
                  >
                    <div className={classNames(defaultcss.all, sty.box__ntr0B)}>
                      <Icon105Icon
                        className={classNames(defaultcss.all, sty.svg___2J5Z)}
                        role={"img"}
                      />
                    </div>
                  </button>

                  <button
                    className={classNames(
                      defaultcss.button,
                      sty.button___8J7An
                    )}
                  >
                    <div className={classNames(defaultcss.all, sty.box__yiWrn)}>
                      <Icon105Icon
                        className={classNames(defaultcss.all, sty.svg__cQIuo)}
                        role={"img"}
                      />
                    </div>
                  </button>

                  <button
                    className={classNames(defaultcss.button, sty.button__zlQhp)}
                  >
                    <div
                      className={classNames(defaultcss.all, sty.box___3Ma6D)}
                    >
                      <Icon105Icon
                        className={classNames(defaultcss.all, sty.svg__kUqvr)}
                        role={"img"}
                      />
                    </div>
                  </button>
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <ToolTipServiceListing
              data-plasmic-name={"toolTipServiceListing"}
              data-plasmic-override={overrides.toolTipServiceListing}
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing
              )}
              slot={"Images & presentation"}
            >
              {
                "Images are an effective way to give an example of what the outcome or finished product will look like when delivered to the client. This helps Members know what to expect when it comes to style, tone, and quality level they'll receive when creating digital products with you, or your team."
              }
            </ToolTipServiceListing>
          </p.Stack>

          <FooterServiceListing
            data-plasmic-name={"footerServiceListing"}
            data-plasmic-override={overrides.footerServiceListing}
            className={classNames("__wab_instance", sty.footerServiceListing)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar",
    "questionImageBlock",
    "cardQuestionServiceListing",
    "toolTipServiceListing",
    "footerServiceListing"
  ],

  serviceListingNavbar: [
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar"
  ],

  navbarServiceListing: ["navbarServiceListing"],
  progressBar: ["progressBar"],
  questionImageBlock: ["questionImageBlock", "cardQuestionServiceListing"],
  cardQuestionServiceListing: ["cardQuestionServiceListing"],
  toolTipServiceListing: ["toolTipServiceListing"],
  footerServiceListing: ["footerServiceListing"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServiceListingImage__ArgProps,
      internalVariantPropNames: PlasmicServiceListingImage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicServiceListingImage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServiceListingImage";
  } else {
    func.displayName = `PlasmicServiceListingImage.${nodeName}`;
  }
  return func;
}

export const PlasmicServiceListingImage = Object.assign(
  // Top-level PlasmicServiceListingImage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    serviceListingNavbar: makeNodeComponent("serviceListingNavbar"),
    navbarServiceListing: makeNodeComponent("navbarServiceListing"),
    progressBar: makeNodeComponent("progressBar"),
    questionImageBlock: makeNodeComponent("questionImageBlock"),
    cardQuestionServiceListing: makeNodeComponent("cardQuestionServiceListing"),
    toolTipServiceListing: makeNodeComponent("toolTipServiceListing"),
    footerServiceListing: makeNodeComponent("footerServiceListing"),
    // Metadata about props expected for PlasmicServiceListingImage
    internalVariantProps: PlasmicServiceListingImage__VariantProps,
    internalArgProps: PlasmicServiceListingImage__ArgProps
  }
);

export default PlasmicServiceListingImage;
/* prettier-ignore-end */
