// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: UAvnmWIfkFX
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputFormCardAvatar from "../../InputFormCardAvatar"; // plasmic-import: 6byT-fD8VwZ/component
import InputFormCardPrimary from "../../InputFormCardPrimary"; // plasmic-import: 7K8uSXduxTH/component
import InputFormCardEmailSearchBadge from "../../InputFormCardEmailSearchBadge"; // plasmic-import: 0JndNhJNnle/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicBusinessProfile.module.css"; // plasmic-import: UAvnmWIfkFX/css

export const PlasmicBusinessProfile__VariantProps = new Array();

export const PlasmicBusinessProfile__ArgProps = new Array();

function PlasmicBusinessProfile__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__tiHbR)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__sFyDx)}
            >
              <InputFormCardAvatar
                data-plasmic-name={"companyAvatarCard"}
                data-plasmic-override={overrides.companyAvatarCard}
                className={classNames("__wab_instance", sty.companyAvatarCard)}
                description={"An avatar is optional but strongly recommended."}
                headline={"Company Logo"}
                subDescription={"subDescription"}
                subHead={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__iPaHj
                    )}
                  >
                    {
                      "Click on the avatar to upload a custom image from your files."
                    }
                  </div>
                }
              />

              <InputFormCardPrimary
                data-plasmic-name={"comPanyNamespaceCard"}
                data-plasmic-override={overrides.comPanyNamespaceCard}
                button={"button"}
                className={classNames(
                  "__wab_instance",
                  sty.comPanyNamespaceCard
                )}
                description={"50 characters maximum."}
                headline={"Company namespace"}
                inputType={"companyname"}
                subDescription={"subDescription"}
                subHead={
                  "This is your copany's URL namespace within the Intrepid community"
                }
              />

              <InputFormCardEmailSearchBadge
                data-plasmic-name={"companyDisplayNameCard"}
                data-plasmic-override={overrides.companyDisplayNameCard}
                button={"button"}
                className={classNames(
                  "__wab_instance",
                  sty.companyDisplayNameCard
                )}
                description={"50 characters maximum."}
                email={
                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox)}
                    placeholder={"your awesome company"}
                    size={1}
                    type={"text"}
                    value={""}
                  />
                }
                headline={"Company display name"}
                subDescription={"subDescription"}
                subHead={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__bN3V
                    )}
                  >
                    {
                      "Please enter your company or team name as you want it displayed on Intrepid."
                    }
                  </div>
                }
              />

              <InputFormCardPrimary
                data-plasmic-name={"companyWebsiteCard"}
                data-plasmic-override={overrides.companyWebsiteCard}
                button={"button"}
                className={classNames("__wab_instance", sty.companyWebsiteCard)}
                description={"Optional but strongly recommended."}
                headline={"Company website"}
                inputType={"companyname"}
                slot2={"https://"}
                subDescription={"subDescription"}
                subHead={"Enter your company's website address"}
              />
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "companyAvatarCard",
    "comPanyNamespaceCard",
    "companyDisplayNameCard",
    "textbox",
    "companyWebsiteCard"
  ],

  companyAvatarCard: ["companyAvatarCard"],
  comPanyNamespaceCard: ["comPanyNamespaceCard"],
  companyDisplayNameCard: ["companyDisplayNameCard", "textbox"],
  textbox: ["textbox"],
  companyWebsiteCard: ["companyWebsiteCard"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBusinessProfile__ArgProps,
      internalVariantPropNames: PlasmicBusinessProfile__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicBusinessProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBusinessProfile";
  } else {
    func.displayName = `PlasmicBusinessProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicBusinessProfile = Object.assign(
  // Top-level PlasmicBusinessProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    companyAvatarCard: makeNodeComponent("companyAvatarCard"),
    comPanyNamespaceCard: makeNodeComponent("comPanyNamespaceCard"),
    companyDisplayNameCard: makeNodeComponent("companyDisplayNameCard"),
    textbox: makeNodeComponent("textbox"),
    companyWebsiteCard: makeNodeComponent("companyWebsiteCard"),
    // Metadata about props expected for PlasmicBusinessProfile
    internalVariantProps: PlasmicBusinessProfile__VariantProps,
    internalArgProps: PlasmicBusinessProfile__ArgProps
  }
);

export default PlasmicBusinessProfile;
/* prettier-ignore-end */
