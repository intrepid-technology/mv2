// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: zUDpW9Kdd4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicAccordionTriggerChevron.module.css"; // plasmic-import: zUDpW9Kdd4/css
import ChevronDownBIcon from "./icons/PlasmicIcon__ChevronDownB"; // plasmic-import: wk3elY0ALL/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: JricKendl/icon

export const PlasmicAccordionTriggerChevron__VariantProps = new Array("state");

export const PlasmicAccordionTriggerChevron__ArgProps = new Array(
  "svg",
  "svgClosed"
);

function PlasmicAccordionTriggerChevron__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"svgParent"}
        data-plasmic-override={overrides.svgParent}
        className={classNames(projectcss.all, sty.svgParent, {
          [sty.svgParentstate_closed]: hasVariant(variants, "state", "closed")
        })}
      >
        {(hasVariant(variants, "state", "closed") ? false : true)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <ChevronDownBIcon
                  className={classNames(projectcss.all, sty.svg___63YN)}
                  role={"img"}
                />
              ),

              value: args.svg,
              className: classNames(sty.slotTargetSvg, {
                [sty.slotTargetSvgstate_closed]: hasVariant(
                  variants,
                  "state",
                  "closed"
                ),

                [sty.slotTargetSvgstate_disabled]: hasVariant(
                  variants,
                  "state",
                  "disabled"
                )
              })
            })
          : null}
        {(hasVariant(variants, "state", "closed") ? true : false)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Icon170Icon
                  className={classNames(projectcss.all, sty.svg__sDv4)}
                  role={"img"}
                />
              ),

              value: args.svgClosed
            })
          : null}
      </div>
    </button>
  );
}

const PlasmicDescendants = {
  root: ["root", "svgParent"],
  svgParent: ["svgParent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccordionTriggerChevron__ArgProps,
      internalVariantPropNames: PlasmicAccordionTriggerChevron__VariantProps
    });

    return PlasmicAccordionTriggerChevron__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordionTriggerChevron";
  } else {
    func.displayName = `PlasmicAccordionTriggerChevron.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordionTriggerChevron = Object.assign(
  // Top-level PlasmicAccordionTriggerChevron renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svgParent: makeNodeComponent("svgParent"),
    // Metadata about props expected for PlasmicAccordionTriggerChevron
    internalVariantProps: PlasmicAccordionTriggerChevron__VariantProps,
    internalArgProps: PlasmicAccordionTriggerChevron__ArgProps
  }
);

export default PlasmicAccordionTriggerChevron;
/* prettier-ignore-end */
