// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: -D9RrNuJ4S
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: BXWgCr5-vns/component
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: ta5dUay7HZW/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: 1wS8JpmDTD/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: hIka2k2fkY/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: koVqNkx_82/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: Hp_zc6XLro/component
import SelectGroupDropdownPrimary from "../../SelectGroupDropdownPrimary"; // plasmic-import: -teiDn_7Z-/component
import ButtonCirclePlusMinus from "../../ButtonCirclePlusMinus"; // plasmic-import: o1fXsWwgdW/component
import SearchbarPrimary from "../../SearchbarPrimary"; // plasmic-import: MorSLptejY/component
import RadioTextInputPrimary from "../../RadioTextInputPrimary"; // plasmic-import: 1xw4kmw_5l/component
import ButtonCircleDelete from "../../ButtonCircleDelete"; // plasmic-import: nkuQ1X_r6B/component
import ElementRadioPrimary from "../../ElementRadioPrimary"; // plasmic-import: Wn4V4PrC-K/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: KmwWxjrE8L/component
import FooterB from "../../FooterB"; // plasmic-import: kxeO2gTzwxU/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o9sjFZaOQJQZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import * as sty from "./PlasmicEditteammanage.module.css"; // plasmic-import: -D9RrNuJ4S/css

export const PlasmicEditteammanage__VariantProps = new Array();

export const PlasmicEditteammanage__ArgProps = new Array();

function PlasmicEditteammanage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
            navItems={["notifications", "messages", "reviews", "wallet"]}
            selected={"team"}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamManageMembersHeader"}
            data-plasmic-override={overrides.sectionTeamManageMembersHeader}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamManageMembersHeader
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              size={"_720"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box___6QAYz
                  )}
                >
                  {"Manage members"}
                </div>
              }
              textDisplay={"Team"}
              textSubhead={"Maintain a safe and secure community experience  "}
            />
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamInviteMembers"}
            data-plasmic-override={overrides.sectionTeamInviteMembers}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionTeamInviteMembers)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardTeamInviteMembers"}
              data-plasmic-override={overrides.cardTeamInviteMembers}
              hasGap={true}
              className={classNames(defaultcss.all, sty.cardTeamInviteMembers)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__ki7Or
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__ygMqo
                    )}
                  >
                    {
                      "Manage and invite team members by email address or by invitation link."
                    }
                  </div>
                }
              >
                {"Invite"}
              </CardHeaderTitlePrimary>

              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary___78XqV
                )}
                size={"_140"}
                type={"primary"}
              >
                {"Invite link"}
              </ButtonPrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"tableAddTeamMember"}
                data-plasmic-override={overrides.tableAddTeamMember}
                hasGap={true}
                className={classNames(defaultcss.all, sty.tableAddTeamMember)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inviteMemberHeader"}
                  data-plasmic-override={overrides.inviteMemberHeader}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inviteMemberHeader)}
                >
                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__fayfn
                    )}
                    labelHeadline={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box__ptzPj
                        )}
                      >
                        {"Email"}
                      </div>
                    }
                    subhead={"subhead"}
                    width={"_540"}
                  />

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__gj5Rn
                    )}
                    description={"description"}
                    placeholder={"Member"}
                    width={"_90"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___7A8Rf
                      )}
                    >
                      {"Role"}
                    </div>
                  </SelectGroupDropdownPrimary>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inviteMemberRecord"}
                  data-plasmic-override={overrides.inviteMemberRecord}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inviteMemberRecord)}
                >
                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__ziL9
                    )}
                    label={"label"}
                    subhead={"subhead"}
                    width={"_540"}
                  />

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__qVoyx
                    )}
                    description={"description"}
                    label={"label"}
                    placeholder={"Member"}
                    width={"_90"}
                  />
                </p.Stack>

                <div
                  data-plasmic-name={"incrementParent"}
                  data-plasmic-override={overrides.incrementParent}
                  className={classNames(defaultcss.all, sty.incrementParent)}
                >
                  <ButtonCirclePlusMinus
                    data-plasmic-name={"buttonCirclePlusMinus"}
                    data-plasmic-override={overrides.buttonCirclePlusMinus}
                    alignment={"left"}
                    className={classNames(
                      "__wab_instance",
                      sty.buttonCirclePlusMinus
                    )}
                  />
                </div>

                <div
                  data-plasmic-name={"inviteButtonParent"}
                  data-plasmic-override={overrides.inviteButtonParent}
                  className={classNames(defaultcss.all, sty.inviteButtonParent)}
                >
                  <ButtonPrimary size={"_140"} type={"outline"}>
                    {"Invite"}
                  </ButtonPrimary>
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamManageMembers"}
            data-plasmic-override={overrides.sectionTeamManageMembers}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionTeamManageMembers)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardTeamManageMembers"}
              data-plasmic-override={overrides.cardTeamManageMembers}
              hasGap={true}
              className={classNames(defaultcss.all, sty.cardTeamManageMembers)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__uWhQj
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__xopkA
                    )}
                  >
                    {"Manage member access roles"}
                  </div>
                }
              >
                {"Manage"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"tableTeamMemberEditParent"}
                data-plasmic-override={overrides.tableTeamMemberEditParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.tableTeamMemberEditParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"searchFilterDateParent"}
                  data-plasmic-override={overrides.searchFilterDateParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.searchFilterDateParent
                  )}
                >
                  <SearchbarPrimary
                    data-plasmic-name={"searchbarPrimary"}
                    data-plasmic-override={overrides.searchbarPrimary}
                    className={classNames(
                      "__wab_instance",
                      sty.searchbarPrimary
                    )}
                    width={"_540"}
                  />

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary___8Lqr8
                    )}
                    description={"description"}
                    label={"label"}
                    placeholder={"Member"}
                    width={"_90"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"tableSelectColumnParent"}
                  data-plasmic-override={overrides.tableSelectColumnParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.tableSelectColumnParent
                  )}
                >
                  <div
                    data-plasmic-name={"tableSelectHeaderRow"}
                    data-plasmic-override={overrides.tableSelectHeaderRow}
                    className={classNames(
                      defaultcss.all,
                      sty.tableSelectHeaderRow
                    )}
                  >
                    <RadioTextInputPrimary
                      data-plasmic-name={"radioTextInputPrimary"}
                      data-plasmic-override={overrides.radioTextInputPrimary}
                      className={classNames(
                        "__wab_instance",
                        sty.radioTextInputPrimary
                      )}
                      itemText={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__yQnJv
                          )}
                        >
                          {"Select all"}
                        </div>
                      }
                    />

                    <ButtonCircleDelete
                      className={classNames(
                        "__wab_instance",
                        sty.buttonCircleDelete__stXb0
                      )}
                      size={"_18Px"}
                    />
                  </div>

                  <div
                    data-plasmic-name={"memberAdminRow"}
                    data-plasmic-override={overrides.memberAdminRow}
                    className={classNames(defaultcss.all, sty.memberAdminRow)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"userAvatarNameEmailParent"}
                      data-plasmic-override={
                        overrides.userAvatarNameEmailParent
                      }
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.userAvatarNameEmailParent
                      )}
                    >
                      <ElementRadioPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.elementRadioPrimary___2Zmrj
                        )}
                        size={"_14Px"}
                      />

                      <UserAvatar
                        className={classNames(
                          "__wab_instance",
                          sty.userAvatar__jpTpo
                        )}
                        size={"_32"}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"userInfoParent"}
                        data-plasmic-override={overrides.userInfoParent}
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.userInfoParent
                        )}
                      >
                        <div
                          data-plasmic-name={"usernameParent"}
                          data-plasmic-override={overrides.usernameParent}
                          className={classNames(
                            defaultcss.all,
                            sty.usernameParent
                          )}
                        >
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.box__ms93E
                            )}
                          >
                            {"username"}
                          </div>
                        </div>

                        <div
                          data-plasmic-name={"userEmailParent"}
                          data-plasmic-override={overrides.userEmailParent}
                          className={classNames(
                            defaultcss.all,
                            sty.userEmailParent
                          )}
                        >
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.box___3WVqw
                            )}
                          >
                            {"userEmail"}
                          </div>
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"selectFabParent2"}
                      data-plasmic-override={overrides.selectFabParent2}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.selectFabParent2
                      )}
                    >
                      <div
                        data-plasmic-name={"statusTextParent"}
                        data-plasmic-override={overrides.statusTextParent}
                        className={classNames(
                          defaultcss.all,
                          sty.statusTextParent
                        )}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__xcea1
                          )}
                        >
                          {"Admin"}
                        </div>
                      </div>

                      <ButtonCircleDelete
                        className={classNames(
                          "__wab_instance",
                          sty.buttonCircleDelete__zf93E
                        )}
                        size={"_18Px"}
                      />
                    </p.Stack>
                  </div>

                  <div
                    data-plasmic-name={"memberSelectRow"}
                    data-plasmic-override={overrides.memberSelectRow}
                    className={classNames(defaultcss.all, sty.memberSelectRow)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"userAvatarNameEmailParent2"}
                      data-plasmic-override={
                        overrides.userAvatarNameEmailParent2
                      }
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.userAvatarNameEmailParent2
                      )}
                    >
                      <ElementRadioPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.elementRadioPrimary__t9Rdd
                        )}
                        size={"_14Px"}
                      />

                      <UserAvatar
                        className={classNames(
                          "__wab_instance",
                          sty.userAvatar__mooz9
                        )}
                        size={"_32"}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"userInfoParent2"}
                        data-plasmic-override={overrides.userInfoParent2}
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.userInfoParent2
                        )}
                      >
                        <div
                          data-plasmic-name={"usernameParent2"}
                          data-plasmic-override={overrides.usernameParent2}
                          className={classNames(
                            defaultcss.all,
                            sty.usernameParent2
                          )}
                        >
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.box__hmRt4
                            )}
                          >
                            {"username"}
                          </div>
                        </div>

                        <div
                          data-plasmic-name={"userEmailParent2"}
                          data-plasmic-override={overrides.userEmailParent2}
                          className={classNames(
                            defaultcss.all,
                            sty.userEmailParent2
                          )}
                        >
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.box__zf1Gy
                            )}
                          >
                            {"userEmail"}
                          </div>
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"selectFabParent3"}
                      data-plasmic-override={overrides.selectFabParent3}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.selectFabParent3
                      )}
                    >
                      <SelectGroupDropdownPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.selectGroupDropdownPrimary__sxrny
                        )}
                        description={"description"}
                        label={"label"}
                        placeholder={"Member"}
                        width={"_90"}
                      />

                      <ButtonCircleDelete
                        className={classNames(
                          "__wab_instance",
                          sty.buttonCircleDelete__qe4N
                        )}
                        size={"_18Px"}
                      />
                    </p.Stack>
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarPartnerEdit",
    "sectionTeamManageMembersHeader",
    "cardHeaderTitleDisplay",
    "sectionTeamInviteMembers",
    "cardTeamInviteMembers",
    "tableAddTeamMember",
    "inviteMemberHeader",
    "inviteMemberRecord",
    "incrementParent",
    "buttonCirclePlusMinus",
    "inviteButtonParent",
    "sectionTeamManageMembers",
    "cardTeamManageMembers",
    "tableTeamMemberEditParent",
    "searchFilterDateParent",
    "searchbarPrimary",
    "tableSelectColumnParent",
    "tableSelectHeaderRow",
    "radioTextInputPrimary",
    "memberAdminRow",
    "userAvatarNameEmailParent",
    "userInfoParent",
    "usernameParent",
    "userEmailParent",
    "selectFabParent2",
    "statusTextParent",
    "memberSelectRow",
    "userAvatarNameEmailParent2",
    "userInfoParent2",
    "usernameParent2",
    "userEmailParent2",
    "selectFabParent3",
    "footerB"
  ],

  navbarInternal: ["navbarInternal"],
  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionTeamManageMembersHeader: [
    "sectionTeamManageMembersHeader",
    "cardHeaderTitleDisplay"
  ],

  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  sectionTeamInviteMembers: [
    "sectionTeamInviteMembers",
    "cardTeamInviteMembers",
    "tableAddTeamMember",
    "inviteMemberHeader",
    "inviteMemberRecord",
    "incrementParent",
    "buttonCirclePlusMinus",
    "inviteButtonParent"
  ],

  cardTeamInviteMembers: [
    "cardTeamInviteMembers",
    "tableAddTeamMember",
    "inviteMemberHeader",
    "inviteMemberRecord",
    "incrementParent",
    "buttonCirclePlusMinus",
    "inviteButtonParent"
  ],

  tableAddTeamMember: [
    "tableAddTeamMember",
    "inviteMemberHeader",
    "inviteMemberRecord",
    "incrementParent",
    "buttonCirclePlusMinus",
    "inviteButtonParent"
  ],

  inviteMemberHeader: ["inviteMemberHeader"],
  inviteMemberRecord: ["inviteMemberRecord"],
  incrementParent: ["incrementParent", "buttonCirclePlusMinus"],
  buttonCirclePlusMinus: ["buttonCirclePlusMinus"],
  inviteButtonParent: ["inviteButtonParent"],
  sectionTeamManageMembers: [
    "sectionTeamManageMembers",
    "cardTeamManageMembers",
    "tableTeamMemberEditParent",
    "searchFilterDateParent",
    "searchbarPrimary",
    "tableSelectColumnParent",
    "tableSelectHeaderRow",
    "radioTextInputPrimary",
    "memberAdminRow",
    "userAvatarNameEmailParent",
    "userInfoParent",
    "usernameParent",
    "userEmailParent",
    "selectFabParent2",
    "statusTextParent",
    "memberSelectRow",
    "userAvatarNameEmailParent2",
    "userInfoParent2",
    "usernameParent2",
    "userEmailParent2",
    "selectFabParent3"
  ],

  cardTeamManageMembers: [
    "cardTeamManageMembers",
    "tableTeamMemberEditParent",
    "searchFilterDateParent",
    "searchbarPrimary",
    "tableSelectColumnParent",
    "tableSelectHeaderRow",
    "radioTextInputPrimary",
    "memberAdminRow",
    "userAvatarNameEmailParent",
    "userInfoParent",
    "usernameParent",
    "userEmailParent",
    "selectFabParent2",
    "statusTextParent",
    "memberSelectRow",
    "userAvatarNameEmailParent2",
    "userInfoParent2",
    "usernameParent2",
    "userEmailParent2",
    "selectFabParent3"
  ],

  tableTeamMemberEditParent: [
    "tableTeamMemberEditParent",
    "searchFilterDateParent",
    "searchbarPrimary",
    "tableSelectColumnParent",
    "tableSelectHeaderRow",
    "radioTextInputPrimary",
    "memberAdminRow",
    "userAvatarNameEmailParent",
    "userInfoParent",
    "usernameParent",
    "userEmailParent",
    "selectFabParent2",
    "statusTextParent",
    "memberSelectRow",
    "userAvatarNameEmailParent2",
    "userInfoParent2",
    "usernameParent2",
    "userEmailParent2",
    "selectFabParent3"
  ],

  searchFilterDateParent: ["searchFilterDateParent", "searchbarPrimary"],
  searchbarPrimary: ["searchbarPrimary"],
  tableSelectColumnParent: [
    "tableSelectColumnParent",
    "tableSelectHeaderRow",
    "radioTextInputPrimary",
    "memberAdminRow",
    "userAvatarNameEmailParent",
    "userInfoParent",
    "usernameParent",
    "userEmailParent",
    "selectFabParent2",
    "statusTextParent",
    "memberSelectRow",
    "userAvatarNameEmailParent2",
    "userInfoParent2",
    "usernameParent2",
    "userEmailParent2",
    "selectFabParent3"
  ],

  tableSelectHeaderRow: ["tableSelectHeaderRow", "radioTextInputPrimary"],
  radioTextInputPrimary: ["radioTextInputPrimary"],
  memberAdminRow: [
    "memberAdminRow",
    "userAvatarNameEmailParent",
    "userInfoParent",
    "usernameParent",
    "userEmailParent",
    "selectFabParent2",
    "statusTextParent"
  ],

  userAvatarNameEmailParent: [
    "userAvatarNameEmailParent",
    "userInfoParent",
    "usernameParent",
    "userEmailParent"
  ],

  userInfoParent: ["userInfoParent", "usernameParent", "userEmailParent"],
  usernameParent: ["usernameParent"],
  userEmailParent: ["userEmailParent"],
  selectFabParent2: ["selectFabParent2", "statusTextParent"],
  statusTextParent: ["statusTextParent"],
  memberSelectRow: [
    "memberSelectRow",
    "userAvatarNameEmailParent2",
    "userInfoParent2",
    "usernameParent2",
    "userEmailParent2",
    "selectFabParent3"
  ],

  userAvatarNameEmailParent2: [
    "userAvatarNameEmailParent2",
    "userInfoParent2",
    "usernameParent2",
    "userEmailParent2"
  ],

  userInfoParent2: ["userInfoParent2", "usernameParent2", "userEmailParent2"],
  usernameParent2: ["usernameParent2"],
  userEmailParent2: ["userEmailParent2"],
  selectFabParent3: ["selectFabParent3"],
  footerB: ["footerB"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditteammanage__ArgProps,
      internalVariantPropNames: PlasmicEditteammanage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicEditteammanage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditteammanage";
  } else {
    func.displayName = `PlasmicEditteammanage.${nodeName}`;
  }
  return func;
}

export const PlasmicEditteammanage = Object.assign(
  // Top-level PlasmicEditteammanage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionTeamManageMembersHeader: makeNodeComponent(
      "sectionTeamManageMembersHeader"
    ),

    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    sectionTeamInviteMembers: makeNodeComponent("sectionTeamInviteMembers"),
    cardTeamInviteMembers: makeNodeComponent("cardTeamInviteMembers"),
    tableAddTeamMember: makeNodeComponent("tableAddTeamMember"),
    inviteMemberHeader: makeNodeComponent("inviteMemberHeader"),
    inviteMemberRecord: makeNodeComponent("inviteMemberRecord"),
    incrementParent: makeNodeComponent("incrementParent"),
    buttonCirclePlusMinus: makeNodeComponent("buttonCirclePlusMinus"),
    inviteButtonParent: makeNodeComponent("inviteButtonParent"),
    sectionTeamManageMembers: makeNodeComponent("sectionTeamManageMembers"),
    cardTeamManageMembers: makeNodeComponent("cardTeamManageMembers"),
    tableTeamMemberEditParent: makeNodeComponent("tableTeamMemberEditParent"),
    searchFilterDateParent: makeNodeComponent("searchFilterDateParent"),
    searchbarPrimary: makeNodeComponent("searchbarPrimary"),
    tableSelectColumnParent: makeNodeComponent("tableSelectColumnParent"),
    tableSelectHeaderRow: makeNodeComponent("tableSelectHeaderRow"),
    radioTextInputPrimary: makeNodeComponent("radioTextInputPrimary"),
    memberAdminRow: makeNodeComponent("memberAdminRow"),
    userAvatarNameEmailParent: makeNodeComponent("userAvatarNameEmailParent"),
    userInfoParent: makeNodeComponent("userInfoParent"),
    usernameParent: makeNodeComponent("usernameParent"),
    userEmailParent: makeNodeComponent("userEmailParent"),
    selectFabParent2: makeNodeComponent("selectFabParent2"),
    statusTextParent: makeNodeComponent("statusTextParent"),
    memberSelectRow: makeNodeComponent("memberSelectRow"),
    userAvatarNameEmailParent2: makeNodeComponent("userAvatarNameEmailParent2"),
    userInfoParent2: makeNodeComponent("userInfoParent2"),
    usernameParent2: makeNodeComponent("usernameParent2"),
    userEmailParent2: makeNodeComponent("userEmailParent2"),
    selectFabParent3: makeNodeComponent("selectFabParent3"),
    footerB: makeNodeComponent("footerB"),
    // Metadata about props expected for PlasmicEditteammanage
    internalVariantProps: PlasmicEditteammanage__VariantProps,
    internalArgProps: PlasmicEditteammanage__ArgProps
  }
);

export default PlasmicEditteammanage;
/* prettier-ignore-end */
