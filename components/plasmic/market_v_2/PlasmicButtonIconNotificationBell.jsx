// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: oyQklGfTop
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TagNotification from "../../TagNotification"; // plasmic-import: -8KQRPGoiM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicButtonIconNotificationBell.module.css"; // plasmic-import: oyQklGfTop/css
import NotificationBellIcon from "./icons/PlasmicIcon__NotificationBell"; // plasmic-import: e76jROc_X/icon

export const PlasmicButtonIconNotificationBell__VariantProps = new Array(
  "inactive",
  "state",
  "size"
);

export const PlasmicButtonIconNotificationBell__ArgProps = new Array("target");

function PlasmicButtonIconNotificationBell__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootstate_alert]: hasVariant(variants, "state", "alert") }
      )}
    >
      <NotificationBellIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svginactive]: hasVariant(variants, "inactive", "inactive"),
          [sty.svgsize__16]: hasVariant(variants, "size", "_16"),
          [sty.svgsize__24]: hasVariant(variants, "size", "_24"),
          [sty.svgsize__32]: hasVariant(variants, "size", "_32"),
          [sty.svgsize__36]: hasVariant(variants, "size", "_36"),
          [sty.svgsize__40]: hasVariant(variants, "size", "_40"),
          [sty.svgsize__48]: hasVariant(variants, "size", "_48"),
          [sty.svgstate_alert]: hasVariant(variants, "state", "alert"),
          [sty.svgstate_silent]: hasVariant(variants, "state", "silent")
        })}
        role={"img"}
      />

      {(
        hasVariant(variants, "state", "silent")
          ? false
          : hasVariant(variants, "inactive", "inactive")
          ? false
          : true
      ) ? (
        <TagNotification
          data-plasmic-name={"elementSidebarHeadlineNotificationIndicator"}
          data-plasmic-override={
            overrides.elementSidebarHeadlineNotificationIndicator
          }
          className={classNames(
            "__wab_instance",
            sty.elementSidebarHeadlineNotificationIndicator,
            {
              [sty.elementSidebarHeadlineNotificationIndicatorinactive]:
                hasVariant(variants, "inactive", "inactive"),
              [sty.elementSidebarHeadlineNotificationIndicatorsize__16]:
                hasVariant(variants, "size", "_16"),
              [sty.elementSidebarHeadlineNotificationIndicatorsize__24]:
                hasVariant(variants, "size", "_24"),
              [sty.elementSidebarHeadlineNotificationIndicatorsize__32]:
                hasVariant(variants, "size", "_32"),
              [sty.elementSidebarHeadlineNotificationIndicatorsize__36]:
                hasVariant(variants, "size", "_36"),
              [sty.elementSidebarHeadlineNotificationIndicatorsize__40]:
                hasVariant(variants, "size", "_40"),
              [sty.elementSidebarHeadlineNotificationIndicatorsize__48]:
                hasVariant(variants, "size", "_48"),
              [sty.elementSidebarHeadlineNotificationIndicatorstate_alert]:
                hasVariant(variants, "state", "alert"),
              [sty.elementSidebarHeadlineNotificationIndicatorstate_silent]:
                hasVariant(variants, "state", "silent")
            }
          )}
          size={
            hasVariant(variants, "size", "_48")
              ? "_16"
              : hasVariant(variants, "size", "_40")
              ? "_16"
              : hasVariant(variants, "size", "_36")
              ? "_16"
              : hasVariant(variants, "size", "_32")
              ? "_16"
              : hasVariant(variants, "size", "_24")
              ? "_12"
              : undefined
          }
        />
      ) : null}
    </button>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg", "elementSidebarHeadlineNotificationIndicator"],
  svg: ["svg"],
  elementSidebarHeadlineNotificationIndicator: [
    "elementSidebarHeadlineNotificationIndicator"
  ]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonIconNotificationBell__ArgProps,
      internalVariantPropNames: PlasmicButtonIconNotificationBell__VariantProps
    });

    return PlasmicButtonIconNotificationBell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonIconNotificationBell";
  } else {
    func.displayName = `PlasmicButtonIconNotificationBell.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonIconNotificationBell = Object.assign(
  // Top-level PlasmicButtonIconNotificationBell renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    elementSidebarHeadlineNotificationIndicator: makeNodeComponent(
      "elementSidebarHeadlineNotificationIndicator"
    ),

    // Metadata about props expected for PlasmicButtonIconNotificationBell
    internalVariantProps: PlasmicButtonIconNotificationBell__VariantProps,
    internalArgProps: PlasmicButtonIconNotificationBell__ArgProps
  }
);

export default PlasmicButtonIconNotificationBell;
/* prettier-ignore-end */
