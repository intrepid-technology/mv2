// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3jRhtnjrFaHJWfNWC1k5BV
// Component: WoHRRICUYW
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_market_v_2.module.css"; // plasmic-import: 3jRhtnjrFaHJWfNWC1k5BV/projectcss
import sty from "./PlasmicNavbarNotifications.module.css"; // plasmic-import: WoHRRICUYW/css
import NotificationIcon from "./icons/PlasmicIcon__Notification"; // plasmic-import: rEeGdo5vaH/icon

export const PlasmicNavbarNotifications__VariantProps = new Array("light");

export const PlasmicNavbarNotifications__ArgProps = new Array();

function PlasmicNavbarNotifications__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__light]: hasVariant(variants, "light", "light")
      })}
    >
      <NotificationIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svg__light]: hasVariant(variants, "light", "light")
        })}
        role={"img"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarNotifications__ArgProps,
      internalVariantPropNames: PlasmicNavbarNotifications__VariantProps
    });

    return PlasmicNavbarNotifications__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarNotifications";
  } else {
    func.displayName = `PlasmicNavbarNotifications.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarNotifications = Object.assign(
  // Top-level PlasmicNavbarNotifications renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicNavbarNotifications
    internalVariantProps: PlasmicNavbarNotifications__VariantProps,
    internalArgProps: PlasmicNavbarNotifications__ArgProps
  }
);

export default PlasmicNavbarNotifications;
/* prettier-ignore-end */
